var ls = Object.defineProperty;
var OA = (Z) => {
  throw TypeError(Z);
};
var ss = (Z, I, g) => I in Z ? ls(Z, I, { enumerable: !0, configurable: !0, writable: !0, value: g }) : Z[I] = g;
var UA = (Z, I, g) => ss(Z, typeof I != "symbol" ? I + "" : I, g), jC = (Z, I, g) => I.has(Z) || OA("Cannot " + g);
var v = (Z, I, g) => (jC(Z, I, "read from private field"), g ? g.call(Z) : I.get(Z)), yI = (Z, I, g) => I.has(Z) ? OA("Cannot add the same private member more than once") : I instanceof WeakSet ? I.add(Z) : I.set(Z, g), hI = (Z, I, g, C) => (jC(Z, I, "write to private field"), C ? C.call(Z, g) : I.set(Z, g), g), MI = (Z, I, g) => (jC(Z, I, "access private method"), g);
var vA = (Z, I, g, C) => ({
  set _(A) {
    hI(Z, I, A, g);
  },
  get _() {
    return v(Z, I, C);
  }
});
const aI = typeof process == "object" && process + "" == "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser"), iA = [1e-3, 0, 0, 1e-3, 0, 0], QC = 1.35, nI = {
  ANY: 1,
  DISPLAY: 2,
  PRINT: 4,
  ANNOTATIONS_FORMS: 16,
  ANNOTATIONS_STORAGE: 32,
  ANNOTATIONS_DISABLE: 64,
  IS_EDITING: 128,
  OPLIST: 256
}, _I = {
  DISABLE: 0,
  ENABLE: 1,
  ENABLE_FORMS: 2,
  ENABLE_STORAGE: 3
}, Og = "pdfjs_internal_editor_", k = {
  DISABLE: -1,
  NONE: 0,
  FREETEXT: 3,
  HIGHLIGHT: 9,
  STAMP: 13,
  INK: 15,
  POPUP: 16,
  SIGNATURE: 101,
  COMMENT: 102
}, j = {
  RESIZE: 1,
  CREATE: 2,
  FREETEXT_SIZE: 11,
  FREETEXT_COLOR: 12,
  FREETEXT_OPACITY: 13,
  INK_COLOR: 21,
  INK_THICKNESS: 22,
  INK_OPACITY: 23,
  HIGHLIGHT_COLOR: 31,
  HIGHLIGHT_THICKNESS: 32,
  HIGHLIGHT_FREE: 33,
  HIGHLIGHT_SHOW_ALL: 34,
  DRAW_STEP: 41
}, ds = {
  PRINT: 4,
  MODIFY_CONTENTS: 8,
  COPY: 16,
  MODIFY_ANNOTATIONS: 32,
  FILL_INTERACTIVE_FORMS: 256,
  COPY_FOR_ACCESSIBILITY: 512,
  ASSEMBLE: 1024,
  PRINT_HIGH_QUALITY: 2048
}, ZI = {
  FILL: 0,
  STROKE: 1,
  FILL_STROKE: 2,
  INVISIBLE: 3,
  FILL_STROKE_MASK: 3,
  ADD_TO_PATH_FLAG: 4
}, wC = {
  GRAYSCALE_1BPP: 1,
  RGB_24BPP: 2,
  RGBA_32BPP: 3
}, iI = {
  TEXT: 1,
  LINK: 2,
  FREETEXT: 3,
  LINE: 4,
  SQUARE: 5,
  CIRCLE: 6,
  POLYGON: 7,
  POLYLINE: 8,
  HIGHLIGHT: 9,
  UNDERLINE: 10,
  SQUIGGLY: 11,
  STRIKEOUT: 12,
  STAMP: 13,
  CARET: 14,
  INK: 15,
  POPUP: 16,
  FILEATTACHMENT: 17,
  SOUND: 18,
  MOVIE: 19,
  WIDGET: 20,
  SCREEN: 21,
  PRINTERMARK: 22,
  TRAPNET: 23,
  WATERMARK: 24,
  THREED: 25,
  REDACT: 26
}, tg = {
  SOLID: 1,
  DASHED: 2,
  BEVELED: 3,
  INSET: 4,
  UNDERLINE: 5
}, KC = {
  ERRORS: 0,
  WARNINGS: 1,
  INFOS: 5
}, Ug = {
  dependency: 1,
  setLineWidth: 2,
  setLineCap: 3,
  setLineJoin: 4,
  setMiterLimit: 5,
  setDash: 6,
  setRenderingIntent: 7,
  setFlatness: 8,
  setGState: 9,
  save: 10,
  restore: 11,
  transform: 12,
  moveTo: 13,
  lineTo: 14,
  curveTo: 15,
  curveTo2: 16,
  curveTo3: 17,
  closePath: 18,
  rectangle: 19,
  stroke: 20,
  closeStroke: 21,
  fill: 22,
  eoFill: 23,
  fillStroke: 24,
  eoFillStroke: 25,
  closeFillStroke: 26,
  closeEOFillStroke: 27,
  endPath: 28,
  clip: 29,
  eoClip: 30,
  beginText: 31,
  endText: 32,
  setCharSpacing: 33,
  setWordSpacing: 34,
  setHScale: 35,
  setLeading: 36,
  setFont: 37,
  setTextRenderingMode: 38,
  setTextRise: 39,
  moveText: 40,
  setLeadingMoveText: 41,
  setTextMatrix: 42,
  nextLine: 43,
  showText: 44,
  showSpacedText: 45,
  nextLineShowText: 46,
  nextLineSetSpacingShowText: 47,
  setCharWidth: 48,
  setCharWidthAndBounds: 49,
  setStrokeColorSpace: 50,
  setFillColorSpace: 51,
  setStrokeColor: 52,
  setStrokeColorN: 53,
  setFillColor: 54,
  setFillColorN: 55,
  setStrokeGray: 56,
  setFillGray: 57,
  setStrokeRGBColor: 58,
  setFillRGBColor: 59,
  setStrokeCMYKColor: 60,
  setFillCMYKColor: 61,
  shadingFill: 62,
  beginInlineImage: 63,
  beginImageData: 64,
  endInlineImage: 65,
  paintXObject: 66,
  markPoint: 67,
  markPointProps: 68,
  beginMarkedContent: 69,
  beginMarkedContentProps: 70,
  endMarkedContent: 71,
  beginCompat: 72,
  endCompat: 73,
  paintFormXObjectBegin: 74,
  paintFormXObjectEnd: 75,
  beginGroup: 76,
  endGroup: 77,
  beginAnnotation: 80,
  endAnnotation: 81,
  paintImageMaskXObject: 83,
  paintImageMaskXObjectGroup: 84,
  paintImageXObject: 85,
  paintInlineImageXObject: 86,
  paintInlineImageXObjectGroup: 87,
  paintImageXObjectRepeat: 88,
  paintImageMaskXObjectRepeat: 89,
  paintSolidColorImageMask: 90,
  constructPath: 91,
  setStrokeTransparent: 92,
  setFillTransparent: 93,
  rawFillPath: 94
}, lC = {
  moveTo: 0,
  lineTo: 1,
  curveTo: 2,
  closePath: 3
}, Zs = {
  NEED_PASSWORD: 1,
  INCORRECT_PASSWORD: 2
};
let SC = KC.WARNINGS;
function cs(Z) {
  Number.isInteger(Z) && (SC = Z);
}
function Gs() {
  return SC;
}
function pC(Z) {
  SC >= KC.INFOS && console.info(`Info: ${Z}`);
}
function L(Z) {
  SC >= KC.WARNINGS && console.warn(`Warning: ${Z}`);
}
function f(Z) {
  throw new Error(Z);
}
function Q(Z, I) {
  Z || f(I);
}
function bs(Z) {
  switch (Z?.protocol) {
    case "http:":
    case "https:":
    case "ftp:":
    case "mailto:":
    case "tel:":
      return !0;
    default:
      return !1;
  }
}
function gl(Z, I = null, g = null) {
  if (!Z)
    return null;
  if (g && typeof Z == "string" && (g.addDefaultProtocol && Z.startsWith("www.") && Z.match(/\./g)?.length >= 2 && (Z = `http://${Z}`), g.tryConvertEncoding))
    try {
      Z = ts(Z);
    } catch {
    }
  const C = I ? URL.parse(Z, I) : URL.parse(Z);
  return bs(C) ? C : null;
}
function Cl(Z, I, g = !1) {
  const C = URL.parse(Z);
  return C ? (C.hash = I, C.href) : g && gl(Z, "http://example.com") ? Z.split("#", 1)[0] + `${I ? `#${I}` : ""}` : "";
}
function T(Z, I, g, C = !1) {
  return Object.defineProperty(Z, I, {
    value: g,
    enumerable: !C,
    configurable: !0,
    writable: !1
  }), g;
}
const og = (function() {
  function I(g, C) {
    this.message = g, this.name = C;
  }
  return I.prototype = new Error(), I.constructor = I, I;
})();
class EA extends og {
  constructor(I, g) {
    super(I, "PasswordException"), this.code = g;
  }
}
class xC extends og {
  constructor(I, g) {
    super(I, "UnknownErrorException"), this.details = g;
  }
}
let lA = class extends og {
  constructor(I) {
    super(I, "InvalidPDFException");
  }
}, uC = class extends og {
  constructor(I, g, C) {
    super(I, "ResponseException"), this.status = g, this.missing = C;
  }
};
class os extends og {
  constructor(I) {
    super(I, "FormatError");
  }
}
let Ig = class extends og {
  constructor(I) {
    super(I, "AbortException");
  }
};
function Al(Z) {
  (typeof Z != "object" || Z?.length === void 0) && f("Invalid argument for bytesToString");
  const I = Z.length, g = 8192;
  if (I < g)
    return String.fromCharCode.apply(null, Z);
  const C = [];
  for (let A = 0; A < I; A += g) {
    const i = Math.min(A + g, I), l = Z.subarray(A, i);
    C.push(String.fromCharCode.apply(null, l));
  }
  return C.join("");
}
function qg(Z) {
  typeof Z != "string" && f("Invalid argument for stringToBytes");
  const I = Z.length, g = new Uint8Array(I);
  for (let C = 0; C < I; ++C)
    g[C] = Z.charCodeAt(C) & 255;
  return g;
}
function ms(Z) {
  return String.fromCharCode(Z >> 24 & 255, Z >> 16 & 255, Z >> 8 & 255, Z & 255);
}
function as() {
  const Z = new Uint8Array(4);
  return Z[0] = 1, new Uint32Array(Z.buffer, 0, 1)[0] === 1;
}
function es() {
  try {
    return new Function(""), !0;
  } catch {
    return !1;
  }
}
class GI {
  static get isLittleEndian() {
    return T(this, "isLittleEndian", as());
  }
  static get isEvalSupported() {
    return T(this, "isEvalSupported", es());
  }
  static get isOffscreenCanvasSupported() {
    return T(this, "isOffscreenCanvasSupported", typeof OffscreenCanvas < "u");
  }
  static get isImageDecoderSupported() {
    return T(this, "isImageDecoderSupported", typeof ImageDecoder < "u");
  }
  static get platform() {
    const {
      platform: I,
      userAgent: g
    } = navigator;
    return T(this, "platform", {
      isAndroid: g.includes("Android"),
      isLinux: I.includes("Linux"),
      isMac: I.includes("Mac"),
      isWindows: I.includes("Win"),
      isFirefox: g.includes("Firefox")
    });
  }
  static get isCSSRoundSupported() {
    return T(this, "isCSSRoundSupported", globalThis.CSS?.supports?.("width: round(1.5px, 1px)"));
  }
}
const OC = Array.from(Array(256).keys(), (Z) => Z.toString(16).padStart(2, "0"));
let M = class {
  static makeHexColor(I, g, C) {
    return `#${OC[I]}${OC[g]}${OC[C]}`;
  }
  static domMatrixToTransform(I) {
    return [I.a, I.b, I.c, I.d, I.e, I.f];
  }
  static scaleMinMax(I, g) {
    let C;
    I[0] ? (I[0] < 0 && (C = g[0], g[0] = g[2], g[2] = C), g[0] *= I[0], g[2] *= I[0], I[3] < 0 && (C = g[1], g[1] = g[3], g[3] = C), g[1] *= I[3], g[3] *= I[3]) : (C = g[0], g[0] = g[1], g[1] = C, C = g[2], g[2] = g[3], g[3] = C, I[1] < 0 && (C = g[1], g[1] = g[3], g[3] = C), g[1] *= I[1], g[3] *= I[1], I[2] < 0 && (C = g[0], g[0] = g[2], g[2] = C), g[0] *= I[2], g[2] *= I[2]), g[0] += I[4], g[1] += I[5], g[2] += I[4], g[3] += I[5];
  }
  static transform(I, g) {
    return [I[0] * g[0] + I[2] * g[1], I[1] * g[0] + I[3] * g[1], I[0] * g[2] + I[2] * g[3], I[1] * g[2] + I[3] * g[3], I[0] * g[4] + I[2] * g[5] + I[4], I[1] * g[4] + I[3] * g[5] + I[5]];
  }
  static multiplyByDOMMatrix(I, g) {
    return [I[0] * g.a + I[2] * g.b, I[1] * g.a + I[3] * g.b, I[0] * g.c + I[2] * g.d, I[1] * g.c + I[3] * g.d, I[0] * g.e + I[2] * g.f + I[4], I[1] * g.e + I[3] * g.f + I[5]];
  }
  static applyTransform(I, g, C = 0) {
    const A = I[C], i = I[C + 1];
    I[C] = A * g[0] + i * g[2] + g[4], I[C + 1] = A * g[1] + i * g[3] + g[5];
  }
  static applyTransformToBezier(I, g, C = 0) {
    const A = g[0], i = g[1], l = g[2], s = g[3], d = g[4], c = g[5];
    for (let G = 0; G < 6; G += 2) {
      const b = I[C + G], o = I[C + G + 1];
      I[C + G] = b * A + o * l + d, I[C + G + 1] = b * i + o * s + c;
    }
  }
  static applyInverseTransform(I, g) {
    const C = I[0], A = I[1], i = g[0] * g[3] - g[1] * g[2];
    I[0] = (C * g[3] - A * g[2] + g[2] * g[5] - g[4] * g[3]) / i, I[1] = (-C * g[1] + A * g[0] + g[4] * g[1] - g[5] * g[0]) / i;
  }
  static axialAlignedBoundingBox(I, g, C) {
    const A = g[0], i = g[1], l = g[2], s = g[3], d = g[4], c = g[5], G = I[0], b = I[1], o = I[2], m = I[3];
    let e = A * G + d, a = e, h = A * o + d, t = h, W = s * b + c, B = W, w = s * m + c, n = w;
    if (i !== 0 || l !== 0) {
      const V = i * G, N = i * o, R = l * b, Y = l * m;
      e += R, t += R, h += Y, a += Y, W += V, n += V, w += N, B += N;
    }
    C[0] = Math.min(C[0], e, h, a, t), C[1] = Math.min(C[1], W, w, B, n), C[2] = Math.max(C[2], e, h, a, t), C[3] = Math.max(C[3], W, w, B, n);
  }
  static inverseTransform(I) {
    const g = I[0] * I[3] - I[1] * I[2];
    return [I[3] / g, -I[1] / g, -I[2] / g, I[0] / g, (I[2] * I[5] - I[4] * I[3]) / g, (I[4] * I[1] - I[5] * I[0]) / g];
  }
  static singularValueDecompose2dScale(I, g) {
    const C = I[0], A = I[1], i = I[2], l = I[3], s = C ** 2 + A ** 2, d = C * i + A * l, c = i ** 2 + l ** 2, G = (s + c) / 2, b = Math.sqrt(G ** 2 - (s * c - d ** 2));
    g[0] = Math.sqrt(G + b || 1), g[1] = Math.sqrt(G - b || 1);
  }
  static normalizeRect(I) {
    const g = I.slice(0);
    return I[0] > I[2] && (g[0] = I[2], g[2] = I[0]), I[1] > I[3] && (g[1] = I[3], g[3] = I[1]), g;
  }
  static intersect(I, g) {
    const C = Math.max(Math.min(I[0], I[2]), Math.min(g[0], g[2])), A = Math.min(Math.max(I[0], I[2]), Math.max(g[0], g[2]));
    if (C > A)
      return null;
    const i = Math.max(Math.min(I[1], I[3]), Math.min(g[1], g[3])), l = Math.min(Math.max(I[1], I[3]), Math.max(g[1], g[3]));
    return i > l ? null : [C, i, A, l];
  }
  static pointBoundingBox(I, g, C) {
    C[0] = Math.min(C[0], I), C[1] = Math.min(C[1], g), C[2] = Math.max(C[2], I), C[3] = Math.max(C[3], g);
  }
  static rectBoundingBox(I, g, C, A, i) {
    i[0] = Math.min(i[0], I, C), i[1] = Math.min(i[1], g, A), i[2] = Math.max(i[2], I, C), i[3] = Math.max(i[3], g, A);
  }
  static #I(I, g, C, A, i, l, s, d, c, G) {
    if (c <= 0 || c >= 1)
      return;
    const b = 1 - c, o = c * c, m = o * c, e = b * (b * (b * I + 3 * c * g) + 3 * o * C) + m * A, a = b * (b * (b * i + 3 * c * l) + 3 * o * s) + m * d;
    G[0] = Math.min(G[0], e), G[1] = Math.min(G[1], a), G[2] = Math.max(G[2], e), G[3] = Math.max(G[3], a);
  }
  static #g(I, g, C, A, i, l, s, d, c, G, b, o) {
    if (Math.abs(c) < 1e-12) {
      Math.abs(G) >= 1e-12 && this.#I(I, g, C, A, i, l, s, d, -b / G, o);
      return;
    }
    const m = G ** 2 - 4 * b * c;
    if (m < 0)
      return;
    const e = Math.sqrt(m), a = 2 * c;
    this.#I(I, g, C, A, i, l, s, d, (-G + e) / a, o), this.#I(I, g, C, A, i, l, s, d, (-G - e) / a, o);
  }
  static bezierBoundingBox(I, g, C, A, i, l, s, d, c) {
    c[0] = Math.min(c[0], I, s), c[1] = Math.min(c[1], g, d), c[2] = Math.max(c[2], I, s), c[3] = Math.max(c[3], g, d), this.#g(I, C, i, s, g, A, l, d, 3 * (-I + 3 * (C - i) + s), 6 * (I - 2 * C + i), 3 * (C - I), c), this.#g(I, C, i, s, g, A, l, d, 3 * (-g + 3 * (A - l) + d), 6 * (g - 2 * A + l), 3 * (A - g), c);
  }
};
function ts(Z) {
  return decodeURIComponent(escape(Z));
}
let UC = null, PA = null;
function hs(Z) {
  return UC || (UC = /([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu, PA = /* @__PURE__ */ new Map([["ﬅ", "ſt"]])), Z.replaceAll(UC, (I, g, C) => g ? g.normalize("NFKC") : PA.get(C));
}
function il() {
  if (typeof crypto.randomUUID == "function")
    return crypto.randomUUID();
  const Z = new Uint8Array(32);
  return crypto.getRandomValues(Z), Al(Z);
}
const yA = "pdfjs_internal_id_";
function Bs(Z, I, g) {
  if (!Array.isArray(g) || g.length < 2)
    return !1;
  const [C, A, ...i] = g;
  if (!Z(C) && !Number.isInteger(C) || !I(A))
    return !1;
  const l = i.length;
  let s = !0;
  switch (A.name) {
    case "XYZ":
      if (l < 2 || l > 3)
        return !1;
      break;
    case "Fit":
    case "FitB":
      return l === 0;
    case "FitH":
    case "FitBH":
    case "FitV":
    case "FitBV":
      if (l > 1)
        return !1;
      break;
    case "FitR":
      if (l !== 4)
        return !1;
      s = !1;
      break;
    default:
      return !1;
  }
  for (const d of i)
    if (!(typeof d == "number" || s && d === null))
      return !1;
  return !0;
}
function eI(Z, I, g) {
  return Math.min(Math.max(Z, I), g);
}
function ll(Z) {
  return Uint8Array.prototype.toBase64 ? Z.toBase64() : btoa(Al(Z));
}
function Ws(Z) {
  return Uint8Array.fromBase64 ? Uint8Array.fromBase64(Z) : qg(atob(Z));
}
typeof Promise.try != "function" && (Promise.try = function(Z, ...I) {
  return new Promise((g) => {
    g(Z(...I));
  });
});
typeof Math.sumPrecise != "function" && (Math.sumPrecise = function(Z) {
  return Z.reduce((I, g) => I + g, 0);
});
class vg {
  static textContent(I) {
    const g = [], C = {
      items: g,
      styles: /* @__PURE__ */ Object.create(null)
    };
    function A(i) {
      if (!i)
        return;
      let l = null;
      const s = i.name;
      if (s === "#text")
        l = i.value;
      else if (vg.shouldBuildText(s))
        i?.attributes?.textContent ? l = i.attributes.textContent : i.value && (l = i.value);
      else return;
      if (l !== null && g.push({
        str: l
      }), !!i.children)
        for (const d of i.children)
          A(d);
    }
    return A(I), C;
  }
  static shouldBuildText(I) {
    return !(I === "textarea" || I === "input" || I === "option" || I === "select");
  }
}
let sl = class {
  static setupStorage(I, g, C, A, i) {
    const l = A.getValue(g, {
      value: null
    });
    switch (C.name) {
      case "textarea":
        if (l.value !== null && (I.textContent = l.value), i === "print")
          break;
        I.addEventListener("input", (s) => {
          A.setValue(g, {
            value: s.target.value
          });
        });
        break;
      case "input":
        if (C.attributes.type === "radio" || C.attributes.type === "checkbox") {
          if (l.value === C.attributes.xfaOn ? I.setAttribute("checked", !0) : l.value === C.attributes.xfaOff && I.removeAttribute("checked"), i === "print")
            break;
          I.addEventListener("change", (s) => {
            A.setValue(g, {
              value: s.target.checked ? s.target.getAttribute("xfaOn") : s.target.getAttribute("xfaOff")
            });
          });
        } else {
          if (l.value !== null && I.setAttribute("value", l.value), i === "print")
            break;
          I.addEventListener("input", (s) => {
            A.setValue(g, {
              value: s.target.value
            });
          });
        }
        break;
      case "select":
        if (l.value !== null) {
          I.setAttribute("value", l.value);
          for (const s of C.children)
            s.attributes.value === l.value ? s.attributes.selected = !0 : s.attributes.hasOwnProperty("selected") && delete s.attributes.selected;
        }
        I.addEventListener("input", (s) => {
          const d = s.target.options, c = d.selectedIndex === -1 ? "" : d[d.selectedIndex].value;
          A.setValue(g, {
            value: c
          });
        });
        break;
    }
  }
  static setAttributes({
    html: I,
    element: g,
    storage: C = null,
    intent: A,
    linkService: i
  }) {
    const {
      attributes: l
    } = g, s = I instanceof HTMLAnchorElement;
    l.type === "radio" && (l.name = `${l.name}-${A}`);
    for (const [d, c] of Object.entries(l))
      if (c != null)
        switch (d) {
          case "class":
            c.length && I.setAttribute(d, c.join(" "));
            break;
          case "dataId":
            break;
          case "id":
            I.setAttribute("data-element-id", c);
            break;
          case "style":
            Object.assign(I.style, c);
            break;
          case "textContent":
            I.textContent = c;
            break;
          default:
            (!s || d !== "href" && d !== "newWindow") && I.setAttribute(d, c);
        }
    s && i.addLinkAttributes(I, l.href, l.newWindow), C && l.dataId && this.setupStorage(I, l.dataId, g, C);
  }
  static render(I) {
    const g = I.annotationStorage, C = I.linkService, A = I.xfaHtml, i = I.intent || "display", l = document.createElement(A.name);
    A.attributes && this.setAttributes({
      html: l,
      element: A,
      intent: i,
      linkService: C
    });
    const s = i !== "richText", d = I.div;
    if (d.append(l), I.viewport) {
      const b = `matrix(${I.viewport.transform.join(",")})`;
      d.style.transform = b;
    }
    s && d.setAttribute("class", "xfaLayer xfaFont");
    const c = [];
    if (A.children.length === 0) {
      if (A.value) {
        const b = document.createTextNode(A.value);
        l.append(b), s && vg.shouldBuildText(A.name) && c.push(b);
      }
      return {
        textDivs: c
      };
    }
    const G = [[A, -1, l]];
    for (; G.length > 0; ) {
      const [b, o, m] = G.at(-1);
      if (o + 1 === b.children.length) {
        G.pop();
        continue;
      }
      const e = b.children[++G.at(-1)[1]];
      if (e === null)
        continue;
      const {
        name: a
      } = e;
      if (a === "#text") {
        const t = document.createTextNode(e.value);
        c.push(t), m.append(t);
        continue;
      }
      const h = e?.attributes?.xmlns ? document.createElementNS(e.attributes.xmlns, a) : document.createElement(a);
      if (m.append(h), e.attributes && this.setAttributes({
        html: h,
        element: e,
        storage: g,
        intent: i,
        linkService: C
      }), e.children?.length > 0)
        G.push([e, -1, h]);
      else if (e.value) {
        const t = document.createTextNode(e.value);
        s && vg.shouldBuildText(a) && c.push(t), h.append(t);
      }
    }
    for (const b of d.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))
      b.setAttribute("readOnly", !0);
    return {
      textDivs: c
    };
  }
  static update(I) {
    const g = `matrix(${I.viewport.transform.join(",")})`;
    I.div.style.transform = g, I.div.hidden = !1;
  }
};
const rI = "http://www.w3.org/2000/svg";
let Hg = class {
  static CSS = 96;
  static PDF = 72;
  static PDF_TO_CSS_UNITS = this.CSS / this.PDF;
};
async function $g(Z, I = "text") {
  if (Lg(Z, document.baseURI)) {
    const g = await fetch(Z);
    if (!g.ok)
      throw new Error(g.statusText);
    switch (I) {
      case "arraybuffer":
        return g.arrayBuffer();
      case "blob":
        return g.blob();
      case "json":
        return g.json();
    }
    return g.text();
  }
  return new Promise((g, C) => {
    const A = new XMLHttpRequest();
    A.open("GET", Z, !0), A.responseType = I, A.onreadystatechange = () => {
      if (A.readyState === XMLHttpRequest.DONE) {
        if (A.status === 200 || A.status === 0) {
          switch (I) {
            case "arraybuffer":
            case "blob":
            case "json":
              g(A.response);
              return;
          }
          g(A.responseText);
          return;
        }
        C(new Error(A.statusText));
      }
    }, A.send(null);
  });
}
class IC {
  constructor({
    viewBox: I,
    userUnit: g,
    scale: C,
    rotation: A,
    offsetX: i = 0,
    offsetY: l = 0,
    dontFlip: s = !1
  }) {
    this.viewBox = I, this.userUnit = g, this.scale = C, this.rotation = A, this.offsetX = i, this.offsetY = l, C *= g;
    const d = (I[2] + I[0]) / 2, c = (I[3] + I[1]) / 2;
    let G, b, o, m;
    switch (A %= 360, A < 0 && (A += 360), A) {
      case 180:
        G = -1, b = 0, o = 0, m = 1;
        break;
      case 90:
        G = 0, b = 1, o = 1, m = 0;
        break;
      case 270:
        G = 0, b = -1, o = -1, m = 0;
        break;
      case 0:
        G = 1, b = 0, o = 0, m = -1;
        break;
      default:
        throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.");
    }
    s && (o = -o, m = -m);
    let e, a, h, t;
    G === 0 ? (e = Math.abs(c - I[1]) * C + i, a = Math.abs(d - I[0]) * C + l, h = (I[3] - I[1]) * C, t = (I[2] - I[0]) * C) : (e = Math.abs(d - I[0]) * C + i, a = Math.abs(c - I[1]) * C + l, h = (I[2] - I[0]) * C, t = (I[3] - I[1]) * C), this.transform = [G * C, b * C, o * C, m * C, e - G * C * d - o * C * c, a - b * C * d - m * C * c], this.width = h, this.height = t;
  }
  get rawDims() {
    const I = this.viewBox;
    return T(this, "rawDims", {
      pageWidth: I[2] - I[0],
      pageHeight: I[3] - I[1],
      pageX: I[0],
      pageY: I[1]
    });
  }
  clone({
    scale: I = this.scale,
    rotation: g = this.rotation,
    offsetX: C = this.offsetX,
    offsetY: A = this.offsetY,
    dontFlip: i = !1
  } = {}) {
    return new IC({
      viewBox: this.viewBox.slice(),
      userUnit: this.userUnit,
      scale: I,
      rotation: g,
      offsetX: C,
      offsetY: A,
      dontFlip: i
    });
  }
  convertToViewportPoint(I, g) {
    const C = [I, g];
    return M.applyTransform(C, this.transform), C;
  }
  convertToViewportRectangle(I) {
    const g = [I[0], I[1]];
    M.applyTransform(g, this.transform);
    const C = [I[2], I[3]];
    return M.applyTransform(C, this.transform), [g[0], g[1], C[0], C[1]];
  }
  convertToPdfPoint(I, g) {
    const C = [I, g];
    return M.applyInverseTransform(C, this.transform), C;
  }
}
let XA = class extends og {
  constructor(I, g = 0) {
    super(I, "RenderingCancelledException"), this.extraDelay = g;
  }
};
function FC(Z) {
  const I = Z.length;
  let g = 0;
  for (; g < I && Z[g].trim() === ""; )
    g++;
  return Z.substring(g, g + 5).toLowerCase() === "data:";
}
function HA(Z) {
  return typeof Z == "string" && /\.pdf$/i.test(Z);
}
function ws(Z) {
  return [Z] = Z.split(/[#?]/, 1), Z.substring(Z.lastIndexOf("/") + 1);
}
function ns(Z, I = "document.pdf") {
  if (typeof Z != "string")
    return I;
  if (FC(Z))
    return L('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'), I;
  const C = ((s) => {
    try {
      return new URL(s);
    } catch {
      try {
        return new URL(decodeURIComponent(s));
      } catch {
        try {
          return new URL(s, "https://foo.bar");
        } catch {
          try {
            return new URL(decodeURIComponent(s), "https://foo.bar");
          } catch {
            return null;
          }
        }
      }
    }
  })(Z);
  if (!C)
    return I;
  const A = (s) => {
    try {
      let d = decodeURIComponent(s);
      return d.includes("/") ? (d = d.split("/").at(-1), d.test(/^\.pdf$/i) ? d : s) : d;
    } catch {
      return s;
    }
  }, i = /\.pdf$/i, l = C.pathname.split("/").at(-1);
  if (i.test(l))
    return A(l);
  if (C.searchParams.size > 0) {
    const s = Array.from(C.searchParams.values()).reverse();
    for (const c of s)
      if (i.test(c))
        return A(c);
    const d = Array.from(C.searchParams.keys()).reverse();
    for (const c of d)
      if (i.test(c))
        return A(c);
  }
  if (C.hash) {
    const d = /[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i.exec(C.hash);
    if (d)
      return A(d[0]);
  }
  return I;
}
class fA {
  started = /* @__PURE__ */ Object.create(null);
  times = [];
  time(I) {
    I in this.started && L(`Timer is already running for ${I}`), this.started[I] = Date.now();
  }
  timeEnd(I) {
    I in this.started || L(`Timer has not been started for ${I}`), this.times.push({
      name: I,
      start: this.started[I],
      end: Date.now()
    }), delete this.started[I];
  }
  toString() {
    const I = [];
    let g = 0;
    for (const {
      name: C
    } of this.times)
      g = Math.max(C.length, g);
    for (const {
      name: C,
      start: A,
      end: i
    } of this.times)
      I.push(`${C.padEnd(g)} ${i - A}ms
`);
    return I.join("");
  }
}
function Lg(Z, I) {
  const g = I ? URL.parse(Z, I) : URL.parse(Z);
  return g?.protocol === "http:" || g?.protocol === "https:";
}
function RI(Z) {
  Z.preventDefault();
}
function II(Z) {
  Z.preventDefault(), Z.stopPropagation();
}
function Ys(Z) {
  console.log("Deprecated API usage: " + Z);
}
let sA = class {
  static #I;
  static toDateObject(I) {
    if (I instanceof Date)
      return I;
    if (!I || typeof I != "string")
      return null;
    this.#I ||= new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?");
    const g = this.#I.exec(I);
    if (!g)
      return null;
    const C = parseInt(g[1], 10);
    let A = parseInt(g[2], 10);
    A = A >= 1 && A <= 12 ? A - 1 : 0;
    let i = parseInt(g[3], 10);
    i = i >= 1 && i <= 31 ? i : 1;
    let l = parseInt(g[4], 10);
    l = l >= 0 && l <= 23 ? l : 0;
    let s = parseInt(g[5], 10);
    s = s >= 0 && s <= 59 ? s : 0;
    let d = parseInt(g[6], 10);
    d = d >= 0 && d <= 59 ? d : 0;
    const c = g[7] || "Z";
    let G = parseInt(g[8], 10);
    G = G >= 0 && G <= 23 ? G : 0;
    let b = parseInt(g[9], 10) || 0;
    return b = b >= 0 && b <= 59 ? b : 0, c === "-" ? (l += G, s += b) : c === "+" && (l -= G, s -= b), new Date(Date.UTC(C, A, i, l, s, d));
  }
};
function Vs(Z, {
  scale: I = 1,
  rotation: g = 0
}) {
  const {
    width: C,
    height: A
  } = Z.attributes.style, i = [0, 0, parseInt(C), parseInt(A)];
  return new IC({
    viewBox: i,
    userUnit: 1,
    scale: I,
    rotation: g
  });
}
function gC(Z) {
  if (Z.startsWith("#")) {
    const I = parseInt(Z.slice(1), 16);
    return [(I & 16711680) >> 16, (I & 65280) >> 8, I & 255];
  }
  return Z.startsWith("rgb(") ? Z.slice(4, -1).split(",").map((I) => parseInt(I)) : Z.startsWith("rgba(") ? Z.slice(5, -1).split(",").map((I) => parseInt(I)).slice(0, 3) : (L(`Not a valid color format: "${Z}"`), [0, 0, 0]);
}
function Ns(Z) {
  const I = document.createElement("span");
  I.style.visibility = "hidden", I.style.colorScheme = "only light", document.body.append(I);
  for (const g of Z.keys()) {
    I.style.color = g;
    const C = window.getComputedStyle(I).color;
    Z.set(g, gC(C));
  }
  I.remove();
}
function q(Z) {
  const {
    a: I,
    b: g,
    c: C,
    d: A,
    e: i,
    f: l
  } = Z.getTransform();
  return [I, g, C, A, i, l];
}
function DI(Z) {
  const {
    a: I,
    b: g,
    c: C,
    d: A,
    e: i,
    f: l
  } = Z.getTransform().invertSelf();
  return [I, g, C, A, i, l];
}
function cg(Z, I, g = !1, C = !0) {
  if (I instanceof IC) {
    const {
      pageWidth: A,
      pageHeight: i
    } = I.rawDims, {
      style: l
    } = Z, s = GI.isCSSRoundSupported, d = `var(--total-scale-factor) * ${A}px`, c = `var(--total-scale-factor) * ${i}px`, G = s ? `round(down, ${d}, var(--scale-round-x))` : `calc(${d})`, b = s ? `round(down, ${c}, var(--scale-round-y))` : `calc(${c})`;
    !g || I.rotation % 180 === 0 ? (l.width = G, l.height = b) : (l.width = b, l.height = G);
  }
  C && Z.setAttribute("data-main-rotation", I.rotation);
}
let Gg = class dA {
  constructor() {
    const {
      pixelRatio: I
    } = dA;
    this.sx = I, this.sy = I;
  }
  get scaled() {
    return this.sx !== 1 || this.sy !== 1;
  }
  get symmetric() {
    return this.sx === this.sy;
  }
  limitCanvas(I, g, C, A, i = -1) {
    let l = 1 / 0, s = 1 / 0, d = 1 / 0;
    C = dA.capPixels(C, i), C > 0 && (l = Math.sqrt(C / (I * g))), A !== -1 && (s = A / I, d = A / g);
    const c = Math.min(l, s, d);
    return this.sx > c || this.sy > c ? (this.sx = c, this.sy = c, !0) : !1;
  }
  static get pixelRatio() {
    return globalThis.devicePixelRatio || 1;
  }
  static capPixels(I, g) {
    if (g >= 0) {
      const C = Math.ceil(window.screen.availWidth * window.screen.availHeight * this.pixelRatio ** 2 * (1 + g / 100));
      return I > 0 ? Math.min(I, C) : C;
    }
    return I;
  }
};
const ZA = ["image/apng", "image/avif", "image/bmp", "image/gif", "image/jpeg", "image/png", "image/svg+xml", "image/webp", "image/x-icon"];
class us {
  static get isDarkMode() {
    return T(this, "isDarkMode", !!window?.matchMedia?.("(prefers-color-scheme: dark)").matches);
  }
}
let Rs = class {
  static get commentForegroundColor() {
    const I = document.createElement("span");
    I.classList.add("comment", "sidebar");
    const {
      style: g
    } = I;
    g.width = g.height = "0", g.display = "none", g.color = "var(--comment-fg-color)", document.body.append(I);
    const {
      color: C
    } = window.getComputedStyle(I);
    return I.remove(), T(this, "commentForegroundColor", gC(C));
  }
};
function ys(Z, I, g, C) {
  C = Math.min(Math.max(C ?? 1, 0), 1);
  const A = 255 * (1 - C);
  return Z = Math.round(Z * C + A), I = Math.round(I * C + A), g = Math.round(g * C + A), [Z, I, g];
}
function _A(Z, I) {
  const g = Z[0] / 255, C = Z[1] / 255, A = Z[2] / 255, i = Math.max(g, C, A), l = Math.min(g, C, A), s = (i + l) / 2;
  if (i === l)
    I[0] = I[1] = 0;
  else {
    const d = i - l;
    switch (I[1] = s < 0.5 ? d / (i + l) : d / (2 - i - l), i) {
      case g:
        I[0] = ((C - A) / d + (C < A ? 6 : 0)) * 60;
        break;
      case C:
        I[0] = ((A - g) / d + 2) * 60;
        break;
      case A:
        I[0] = ((g - C) / d + 4) * 60;
        break;
    }
  }
  I[2] = s;
}
function cA(Z, I) {
  const g = Z[0], C = Z[1], A = Z[2], i = (1 - Math.abs(2 * A - 1)) * C, l = i * (1 - Math.abs(g / 60 % 2 - 1)), s = A - i / 2;
  switch (Math.floor(g / 60)) {
    case 0:
      I[0] = i + s, I[1] = l + s, I[2] = s;
      break;
    case 1:
      I[0] = l + s, I[1] = i + s, I[2] = s;
      break;
    case 2:
      I[0] = s, I[1] = i + s, I[2] = l + s;
      break;
    case 3:
      I[0] = s, I[1] = l + s, I[2] = i + s;
      break;
    case 4:
      I[0] = l + s, I[1] = s, I[2] = i + s;
      break;
    case 5:
    case 6:
      I[0] = i + s, I[1] = s, I[2] = l + s;
      break;
  }
}
function qA(Z) {
  return Z <= 0.03928 ? Z / 12.92 : ((Z + 0.055) / 1.055) ** 2.4;
}
function $A(Z, I, g) {
  cA(Z, g), g.map(qA);
  const C = 0.2126 * g[0] + 0.7152 * g[1] + 0.0722 * g[2];
  cA(I, g), g.map(qA);
  const A = 0.2126 * g[0] + 0.7152 * g[1] + 0.0722 * g[2];
  return C > A ? (C + 0.05) / (A + 0.05) : (A + 0.05) / (C + 0.05);
}
const Ii = /* @__PURE__ */ new Map();
function Xs(Z, I) {
  const g = Z[0] + Z[1] * 256 + Z[2] * 65536 + I[0] * 16777216 + I[1] * 4294967296 + I[2] * 1099511627776;
  let C = Ii.get(g);
  if (C)
    return C;
  const A = new Float32Array(9), i = A.subarray(0, 3), l = A.subarray(3, 6);
  _A(Z, l);
  const s = A.subarray(6, 9);
  _A(I, s);
  const d = s[2] < 0.5, c = d ? 12 : 4.5;
  if (l[2] = d ? Math.sqrt(l[2]) : 1 - Math.sqrt(1 - l[2]), $A(l, s, i) < c) {
    let G, b;
    d ? (G = l[2], b = 1) : (G = 0, b = l[2]);
    const o = 5e-3;
    for (; b - G > o; ) {
      const m = l[2] = (G + b) / 2;
      d === $A(l, s, i) < c ? G = m : b = m;
    }
    l[2] = d ? b : G;
  }
  return cA(l, i), C = M.makeHexColor(Math.round(i[0] * 255), Math.round(i[1] * 255), Math.round(i[2] * 255)), Ii.set(g, C), C;
}
function dl({
  html: Z,
  dir: I,
  className: g
}, C) {
  const A = document.createDocumentFragment();
  if (typeof Z == "string") {
    const i = document.createElement("p");
    i.dir = I || "auto";
    const l = Z.split(/(?:\r\n?|\n)/);
    for (let s = 0, d = l.length; s < d; ++s) {
      const c = l[s];
      i.append(document.createTextNode(c)), s < d - 1 && i.append(document.createElement("br"));
    }
    A.append(i);
  } else
    sl.render({
      xfaHtml: Z,
      div: A,
      intent: "richText"
    });
  A.firstChild.classList.add("richText", g), C.append(A);
}
class Tg {
  #I = null;
  #g = null;
  #A;
  #C = null;
  #i = null;
  #l = null;
  #s = null;
  #d = null;
  static #c = null;
  constructor(I) {
    this.#A = I, Tg.#c ||= Object.freeze({
      freetext: "pdfjs-editor-remove-freetext-button",
      highlight: "pdfjs-editor-remove-highlight-button",
      ink: "pdfjs-editor-remove-ink-button",
      stamp: "pdfjs-editor-remove-stamp-button",
      signature: "pdfjs-editor-remove-signature-button"
    });
  }
  render() {
    const I = this.#I = document.createElement("div");
    I.classList.add("editToolbar", "hidden"), I.setAttribute("role", "toolbar");
    const g = this.#A._uiManager._signal;
    g instanceof AbortSignal && !g.aborted && (I.addEventListener("contextmenu", RI, {
      signal: g
    }), I.addEventListener("pointerdown", Tg.#Z, {
      signal: g
    }));
    const C = this.#C = document.createElement("div");
    C.className = "buttons", I.append(C);
    const A = this.#A.toolbarPosition;
    if (A) {
      const {
        style: i
      } = I, l = this.#A._uiManager.direction === "ltr" ? 1 - A[0] : A[0];
      i.insetInlineEnd = `${100 * l}%`, i.top = `calc(${100 * A[1]}% + var(--editor-toolbar-vert-offset))`;
    }
    return I;
  }
  get div() {
    return this.#I;
  }
  static #Z(I) {
    I.stopPropagation();
  }
  #o(I) {
    this.#A._focusEventsAllowed = !1, II(I);
  }
  #b(I) {
    this.#A._focusEventsAllowed = !0, II(I);
  }
  #m(I) {
    const g = this.#A._uiManager._signal;
    return !(g instanceof AbortSignal) || g.aborted ? !1 : (I.addEventListener("focusin", this.#o.bind(this), {
      capture: !0,
      signal: g
    }), I.addEventListener("focusout", this.#b.bind(this), {
      capture: !0,
      signal: g
    }), I.addEventListener("contextmenu", RI, {
      signal: g
    }), !0);
  }
  hide() {
    this.#I.classList.add("hidden"), this.#g?.hideDropdown();
  }
  show() {
    this.#I.classList.remove("hidden"), this.#i?.shown(), this.#l?.shown();
  }
  addDeleteButton() {
    const {
      editorType: I,
      _uiManager: g
    } = this.#A, C = document.createElement("button");
    C.classList.add("basic", "deleteButton"), C.tabIndex = 0, C.setAttribute("data-l10n-id", Tg.#c[I]), this.#m(C) && C.addEventListener("click", (A) => {
      g.delete();
    }, {
      signal: g._signal
    }), this.#C.append(C);
  }
  get #t() {
    const I = document.createElement("div");
    return I.className = "divider", I;
  }
  async addAltText(I) {
    const g = await I.render();
    this.#m(g), this.#C.append(g, this.#t), this.#i = I;
  }
  addComment(I, g = null) {
    if (this.#l)
      return;
    const C = I.renderForToolbar();
    if (!C)
      return;
    this.#m(C);
    const A = this.#s = this.#t;
    g ? (this.#C.insertBefore(C, g), this.#C.insertBefore(A, g)) : this.#C.append(C, A), this.#l = I, I.toolbar = this;
  }
  addColorPicker(I) {
    if (this.#g)
      return;
    this.#g = I;
    const g = I.renderButton();
    this.#m(g), this.#C.append(g, this.#t);
  }
  async addEditSignatureButton(I) {
    const g = this.#d = await I.renderEditButton(this.#A);
    this.#m(g), this.#C.append(g, this.#t);
  }
  removeButton(I) {
    switch (I) {
      case "comment":
        this.#l?.removeToolbarCommentButton(), this.#l = null, this.#s?.remove(), this.#s = null;
        break;
    }
  }
  async addButton(I, g) {
    switch (I) {
      case "colorPicker":
        this.addColorPicker(g);
        break;
      case "altText":
        await this.addAltText(g);
        break;
      case "editSignature":
        await this.addEditSignatureButton(g);
        break;
      case "delete":
        this.addDeleteButton();
        break;
      case "comment":
        this.addComment(g);
        break;
    }
  }
  async addButtonBefore(I, g, C) {
    const A = this.#C.querySelector(C);
    A && I === "comment" && this.addComment(g, A);
  }
  updateEditSignatureButton(I) {
    this.#d && (this.#d.title = I);
  }
  remove() {
    this.#I.remove(), this.#g?.destroy(), this.#g = null;
  }
}
class Hs {
  #I = null;
  #g = null;
  #A;
  constructor(I) {
    this.#A = I;
  }
  #C() {
    const I = this.#g = document.createElement("div");
    I.className = "editToolbar", I.setAttribute("role", "toolbar");
    const g = this.#A._signal;
    g instanceof AbortSignal && !g.aborted && I.addEventListener("contextmenu", RI, {
      signal: g
    });
    const C = this.#I = document.createElement("div");
    return C.className = "buttons", I.append(C), this.#A.hasCommentManager() && this.#l("commentButton", "pdfjs-comment-floating-button", "pdfjs-comment-floating-button-label", () => {
      this.#A.commentSelection("floating_button");
    }), this.#l("highlightButton", "pdfjs-highlight-floating-button1", "pdfjs-highlight-floating-button-label", () => {
      this.#A.highlightSelection("floating_button");
    }), I;
  }
  #i(I, g) {
    let C = 0, A = 0;
    for (const i of I) {
      const l = i.y + i.height;
      if (l < C)
        continue;
      const s = i.x + (g ? i.width : 0);
      if (l > C) {
        A = s, C = l;
        continue;
      }
      g ? s > A && (A = s) : s < A && (A = s);
    }
    return [g ? 1 - A : A, C];
  }
  show(I, g, C) {
    const [A, i] = this.#i(g, C), {
      style: l
    } = this.#g ||= this.#C();
    I.append(this.#g), l.insetInlineEnd = `${100 * A}%`, l.top = `calc(${100 * i}% + var(--editor-toolbar-vert-offset))`;
  }
  hide() {
    this.#g.remove();
  }
  #l(I, g, C, A) {
    const i = document.createElement("button");
    i.classList.add("basic", I), i.tabIndex = 0, i.setAttribute("data-l10n-id", g);
    const l = document.createElement("span");
    i.append(l), l.className = "visuallyHidden", l.setAttribute("data-l10n-id", C);
    const s = this.#A._signal;
    s instanceof AbortSignal && !s.aborted && (i.addEventListener("contextmenu", RI, {
      signal: s
    }), i.addEventListener("click", A, {
      signal: s
    })), this.#I.append(i);
  }
}
function Zl(Z, I, g) {
  for (const C of g)
    I.addEventListener(C, Z[C].bind(Z));
}
class Ms {
  #I = 0;
  get id() {
    return `${Og}${this.#I++}`;
  }
}
class MA {
  #I = il();
  #g = 0;
  #A = null;
  static get _isSVGFittingCanvas() {
    const I = 'data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>', C = new OffscreenCanvas(1, 3).getContext("2d", {
      willReadFrequently: !0
    }), A = new Image();
    A.src = I;
    const i = A.decode().then(() => (C.drawImage(A, 0, 0, 1, 1, 0, 0, 1, 3), new Uint32Array(C.getImageData(0, 0, 1, 1).data.buffer)[0] === 0));
    return T(this, "_isSVGFittingCanvas", i);
  }
  async #C(I, g) {
    this.#A ||= /* @__PURE__ */ new Map();
    let C = this.#A.get(I);
    if (C === null)
      return null;
    if (C?.bitmap)
      return C.refCounter += 1, C;
    try {
      C ||= {
        bitmap: null,
        id: `image_${this.#I}_${this.#g++}`,
        refCounter: 0,
        isSvg: !1
      };
      let A;
      if (typeof g == "string" ? (C.url = g, A = await $g(g, "blob")) : g instanceof File ? A = C.file = g : g instanceof Blob && (A = g), A.type === "image/svg+xml") {
        const i = MA._isSVGFittingCanvas, l = new FileReader(), s = new Image(), d = new Promise((c, G) => {
          s.onload = () => {
            C.bitmap = s, C.isSvg = !0, c();
          }, l.onload = async () => {
            const b = C.svgUrl = l.result;
            s.src = await i ? `${b}#svgView(preserveAspectRatio(none))` : b;
          }, s.onerror = l.onerror = G;
        });
        l.readAsDataURL(A), await d;
      } else
        C.bitmap = await createImageBitmap(A);
      C.refCounter = 1;
    } catch (A) {
      L(A), C = null;
    }
    return this.#A.set(I, C), C && this.#A.set(C.id, C), C;
  }
  async getFromFile(I) {
    const {
      lastModified: g,
      name: C,
      size: A,
      type: i
    } = I;
    return this.#C(`${g}_${C}_${A}_${i}`, I);
  }
  async getFromUrl(I) {
    return this.#C(I, I);
  }
  async getFromBlob(I, g) {
    const C = await g;
    return this.#C(I, C);
  }
  async getFromId(I) {
    this.#A ||= /* @__PURE__ */ new Map();
    const g = this.#A.get(I);
    if (!g)
      return null;
    if (g.bitmap)
      return g.refCounter += 1, g;
    if (g.file)
      return this.getFromFile(g.file);
    if (g.blobPromise) {
      const {
        blobPromise: C
      } = g;
      return delete g.blobPromise, this.getFromBlob(g.id, C);
    }
    return this.getFromUrl(g.url);
  }
  getFromCanvas(I, g) {
    this.#A ||= /* @__PURE__ */ new Map();
    let C = this.#A.get(I);
    if (C?.bitmap)
      return C.refCounter += 1, C;
    const A = new OffscreenCanvas(g.width, g.height);
    return A.getContext("2d").drawImage(g, 0, 0), C = {
      bitmap: A.transferToImageBitmap(),
      id: `image_${this.#I}_${this.#g++}`,
      refCounter: 1,
      isSvg: !1
    }, this.#A.set(I, C), this.#A.set(C.id, C), C;
  }
  getSvgUrl(I) {
    const g = this.#A.get(I);
    return g?.isSvg ? g.svgUrl : null;
  }
  deleteId(I) {
    this.#A ||= /* @__PURE__ */ new Map();
    const g = this.#A.get(I);
    if (!g || (g.refCounter -= 1, g.refCounter !== 0))
      return;
    const {
      bitmap: C
    } = g;
    if (!g.url && !g.file) {
      const A = new OffscreenCanvas(C.width, C.height);
      A.getContext("bitmaprenderer").transferFromImageBitmap(C), g.blobPromise = A.convertToBlob();
    }
    C.close?.(), g.bitmap = null;
  }
  isValidId(I) {
    return I.startsWith(`image_${this.#I}_`);
  }
}
class Ds {
  #I = [];
  #g = !1;
  #A;
  #C = -1;
  constructor(I = 128) {
    this.#A = I;
  }
  add({
    cmd: I,
    undo: g,
    post: C,
    mustExec: A,
    type: i = NaN,
    overwriteIfSameType: l = !1,
    keepUndo: s = !1
  }) {
    if (A && I(), this.#g)
      return;
    const d = {
      cmd: I,
      undo: g,
      post: C,
      type: i
    };
    if (this.#C === -1) {
      this.#I.length > 0 && (this.#I.length = 0), this.#C = 0, this.#I.push(d);
      return;
    }
    if (l && this.#I[this.#C].type === i) {
      s && (d.undo = this.#I[this.#C].undo), this.#I[this.#C] = d;
      return;
    }
    const c = this.#C + 1;
    c === this.#A ? this.#I.splice(0, 1) : (this.#C = c, c < this.#I.length && this.#I.splice(c)), this.#I.push(d);
  }
  undo() {
    if (this.#C === -1)
      return;
    this.#g = !0;
    const {
      undo: I,
      post: g
    } = this.#I[this.#C];
    I(), g?.(), this.#g = !1, this.#C -= 1;
  }
  redo() {
    if (this.#C < this.#I.length - 1) {
      this.#C += 1, this.#g = !0;
      const {
        cmd: I,
        post: g
      } = this.#I[this.#C];
      I(), g?.(), this.#g = !1;
    }
  }
  hasSomethingToUndo() {
    return this.#C !== -1;
  }
  hasSomethingToRedo() {
    return this.#C < this.#I.length - 1;
  }
  cleanType(I) {
    if (this.#C !== -1) {
      for (let g = this.#C; g >= 0; g--)
        if (this.#I[g].type !== I) {
          this.#I.splice(g + 1, this.#C - g), this.#C = g;
          return;
        }
      this.#I.length = 0, this.#C = -1;
    }
  }
  destroy() {
    this.#I = null;
  }
}
class CC {
  constructor(I) {
    this.buffer = [], this.callbacks = /* @__PURE__ */ new Map(), this.allKeys = /* @__PURE__ */ new Set();
    const {
      isMac: g
    } = GI.platform;
    for (const [C, A, i = {}] of I)
      for (const l of C) {
        const s = l.startsWith("mac+");
        g && s ? (this.callbacks.set(l.slice(4), {
          callback: A,
          options: i
        }), this.allKeys.add(l.split("+").at(-1))) : !g && !s && (this.callbacks.set(l, {
          callback: A,
          options: i
        }), this.allKeys.add(l.split("+").at(-1)));
      }
  }
  #I(I) {
    I.altKey && this.buffer.push("alt"), I.ctrlKey && this.buffer.push("ctrl"), I.metaKey && this.buffer.push("meta"), I.shiftKey && this.buffer.push("shift"), this.buffer.push(I.key);
    const g = this.buffer.join("+");
    return this.buffer.length = 0, g;
  }
  exec(I, g) {
    if (!this.allKeys.has(g.key))
      return;
    const C = this.callbacks.get(this.#I(g));
    if (!C)
      return;
    const {
      callback: A,
      options: {
        bubbles: i = !1,
        args: l = [],
        checker: s = null
      }
    } = C;
    s && !s(I, g) || (A.bind(I, ...l, g)(), i || II(g));
  }
}
class DA {
  static _colorsMapping = /* @__PURE__ */ new Map([["CanvasText", [0, 0, 0]], ["Canvas", [255, 255, 255]]]);
  get _colors() {
    const I = /* @__PURE__ */ new Map([["CanvasText", null], ["Canvas", null]]);
    return Ns(I), T(this, "_colors", I);
  }
  convert(I) {
    const g = gC(I);
    if (!window.matchMedia("(forced-colors: active)").matches)
      return g;
    for (const [C, A] of this._colors)
      if (A.every((i, l) => i === g[l]))
        return DA._colorsMapping.get(C);
    return g;
  }
  getHexCode(I) {
    const g = this._colors.get(I);
    return g ? M.makeHexColor(...g) : I;
  }
}
let Eg = class GA {
  #I = new AbortController();
  #g = null;
  #A = null;
  #C = /* @__PURE__ */ new Map();
  #i = /* @__PURE__ */ new Map();
  #l = null;
  #s = null;
  #d = null;
  #c = new Ds();
  #Z = null;
  #o = null;
  #b = null;
  #m = 0;
  #t = /* @__PURE__ */ new Set();
  #a = null;
  #G = null;
  #e = /* @__PURE__ */ new Set();
  _editorUndoBar = null;
  #B = !1;
  #W = !1;
  #h = !1;
  #N = null;
  #w = null;
  #n = null;
  #R = null;
  #Y = !1;
  #u = null;
  #M = new Ms();
  #y = !1;
  #X = !1;
  #p = !1;
  #K = null;
  #S = null;
  #F = null;
  #z = null;
  #x = null;
  #H = k.NONE;
  #V = /* @__PURE__ */ new Set();
  #D = null;
  #r = null;
  #j = null;
  #P = null;
  #k = null;
  #v = {
    isEditing: !1,
    isEmpty: !0,
    hasSomethingToUndo: !1,
    hasSomethingToRedo: !1,
    hasSelectedEditor: !1,
    hasSelectedText: !1
  };
  #Q = [0, 0];
  #J = null;
  #O = null;
  #f = null;
  #q = null;
  #T = null;
  static TRANSLATE_SMALL = 1;
  static TRANSLATE_BIG = 10;
  static get _keyboardManager() {
    const I = GA.prototype, g = (l) => l.#O.contains(document.activeElement) && document.activeElement.tagName !== "BUTTON" && l.hasSomethingToControl(), C = (l, {
      target: s
    }) => {
      if (s instanceof HTMLInputElement) {
        const {
          type: d
        } = s;
        return d !== "text" && d !== "number";
      }
      return !0;
    }, A = this.TRANSLATE_SMALL, i = this.TRANSLATE_BIG;
    return T(this, "_keyboardManager", new CC([[["ctrl+a", "mac+meta+a"], I.selectAll, {
      checker: C
    }], [["ctrl+z", "mac+meta+z"], I.undo, {
      checker: C
    }], [["ctrl+y", "ctrl+shift+z", "mac+meta+shift+z", "ctrl+shift+Z", "mac+meta+shift+Z"], I.redo, {
      checker: C
    }], [["Backspace", "alt+Backspace", "ctrl+Backspace", "shift+Backspace", "mac+Backspace", "mac+alt+Backspace", "mac+ctrl+Backspace", "Delete", "ctrl+Delete", "shift+Delete", "mac+Delete"], I.delete, {
      checker: C
    }], [["Enter", "mac+Enter"], I.addNewEditorFromKeyboard, {
      checker: (l, {
        target: s
      }) => !(s instanceof HTMLButtonElement) && l.#O.contains(s) && !l.isEnterHandled
    }], [[" ", "mac+ "], I.addNewEditorFromKeyboard, {
      checker: (l, {
        target: s
      }) => !(s instanceof HTMLButtonElement) && l.#O.contains(document.activeElement)
    }], [["Escape", "mac+Escape"], I.unselectAll], [["ArrowLeft", "mac+ArrowLeft"], I.translateSelectedEditors, {
      args: [-A, 0],
      checker: g
    }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], I.translateSelectedEditors, {
      args: [-i, 0],
      checker: g
    }], [["ArrowRight", "mac+ArrowRight"], I.translateSelectedEditors, {
      args: [A, 0],
      checker: g
    }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], I.translateSelectedEditors, {
      args: [i, 0],
      checker: g
    }], [["ArrowUp", "mac+ArrowUp"], I.translateSelectedEditors, {
      args: [0, -A],
      checker: g
    }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], I.translateSelectedEditors, {
      args: [0, -i],
      checker: g
    }], [["ArrowDown", "mac+ArrowDown"], I.translateSelectedEditors, {
      args: [0, A],
      checker: g
    }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], I.translateSelectedEditors, {
      args: [0, i],
      checker: g
    }]]));
  }
  constructor(I, g, C, A, i, l, s, d, c, G, b, o, m, e, a, h) {
    const t = this._signal = this.#I.signal;
    this.#O = I, this.#f = g, this.#q = C, this.#l = A, this.#Z = i, this.#r = l, this.#k = d, this._eventBus = s, s._on("editingaction", this.onEditingAction.bind(this), {
      signal: t
    }), s._on("pagechanging", this.onPageChanging.bind(this), {
      signal: t
    }), s._on("scalechanging", this.onScaleChanging.bind(this), {
      signal: t
    }), s._on("rotationchanging", this.onRotationChanging.bind(this), {
      signal: t
    }), s._on("setpreference", this.onSetPreference.bind(this), {
      signal: t
    }), s._on("switchannotationeditorparams", (W) => this.updateParams(W.type, W.value), {
      signal: t
    }), window.addEventListener("pointerdown", () => {
      this.#X = !0;
    }, {
      capture: !0,
      signal: t
    }), window.addEventListener("pointerup", () => {
      this.#X = !1;
    }, {
      capture: !0,
      signal: t
    }), this.#ZI(), this.#oI(), this.#gI(), this.#s = d.annotationStorage, this.#N = d.filterFactory, this.#j = c, this.#R = G || null, this.#B = b, this.#W = o, this.#h = m, this.#x = e || null, this.viewParameters = {
      realScale: Hg.PDF_TO_CSS_UNITS,
      rotation: 0
    }, this.isShiftKeyDown = !1, this._editorUndoBar = a || null, this._supportsPinchToZoom = h !== !1, i?.setSidebarUiManager(this);
  }
  destroy() {
    this.#T?.resolve(), this.#T = null, this.#I?.abort(), this.#I = null, this._signal = null;
    for (const I of this.#i.values())
      I.destroy();
    this.#i.clear(), this.#C.clear(), this.#e.clear(), this.#z?.clear(), this.#g = null, this.#V.clear(), this.#c.destroy(), this.#l?.destroy(), this.#Z?.destroy(), this.#r?.destroy(), this.#u?.hide(), this.#u = null, this.#F?.destroy(), this.#F = null, this.#A = null, this.#w && (clearTimeout(this.#w), this.#w = null), this.#J && (clearTimeout(this.#J), this.#J = null), this._editorUndoBar?.destroy(), this.#k = null;
  }
  combinedSignal(I) {
    return AbortSignal.any([this._signal, I.signal]);
  }
  get mlManager() {
    return this.#x;
  }
  get useNewAltTextFlow() {
    return this.#W;
  }
  get useNewAltTextWhenAddingImage() {
    return this.#h;
  }
  get hcmFilter() {
    return T(this, "hcmFilter", this.#j ? this.#N.addHCMFilter(this.#j.foreground, this.#j.background) : "none");
  }
  get direction() {
    return T(this, "direction", getComputedStyle(this.#O).direction);
  }
  get _highlightColors() {
    return T(this, "_highlightColors", this.#R ? new Map(this.#R.split(",").map((I) => (I = I.split("=").map((g) => g.trim()), I[1] = I[1].toUpperCase(), I))) : null);
  }
  get highlightColors() {
    const {
      _highlightColors: I
    } = this;
    if (!I)
      return T(this, "highlightColors", null);
    const g = /* @__PURE__ */ new Map(), C = !!this.#j;
    for (const [A, i] of I) {
      const l = A.endsWith("_HCM");
      if (C && l) {
        g.set(A.replace("_HCM", ""), i);
        continue;
      }
      !C && !l && g.set(A, i);
    }
    return T(this, "highlightColors", g);
  }
  get highlightColorNames() {
    return T(this, "highlightColorNames", this.highlightColors ? new Map(Array.from(this.highlightColors, (I) => I.reverse())) : null);
  }
  getNonHCMColor(I) {
    if (!this._highlightColors)
      return I;
    const g = this.highlightColorNames.get(I);
    return this._highlightColors.get(g) || I;
  }
  getNonHCMColorName(I) {
    return this.highlightColorNames.get(I) || I;
  }
  setCurrentDrawingSession(I) {
    I ? (this.unselectAll(), this.disableUserSelect(!0)) : this.disableUserSelect(!1), this.#b = I;
  }
  setMainHighlightColorPicker(I) {
    this.#F = I;
  }
  editAltText(I, g = !1) {
    this.#l?.editAltText(this, I, g);
  }
  hasCommentManager() {
    return !!this.#Z;
  }
  editComment(I, g, C, A) {
    this.#Z?.showDialog(this, I, g, C, A);
  }
  selectComment(I, g) {
    this.#i.get(I)?.getEditorByUID(g)?.toggleComment(!0, !0);
  }
  updateComment(I) {
    this.#Z?.updateComment(I.getData());
  }
  updatePopupColor(I) {
    this.#Z?.updatePopupColor(I);
  }
  removeComment(I) {
    this.#Z?.removeComments([I.uid]);
  }
  toggleComment(I, g, C = void 0) {
    this.#Z?.toggleCommentPopup(I, g, C);
  }
  makeCommentColor(I, g) {
    return I && this.#Z?.makeCommentColor(I, g) || null;
  }
  getCommentDialogElement() {
    return this.#Z?.dialogElement || null;
  }
  async waitForEditorsRendered(I) {
    if (this.#i.has(I - 1))
      return;
    const {
      resolve: g,
      promise: C
    } = Promise.withResolvers(), A = (i) => {
      i.pageNumber === I && (this._eventBus._off("editorsrendered", A), g());
    };
    this._eventBus.on("editorsrendered", A), await C;
  }
  getSignature(I) {
    this.#r?.getSignature({
      uiManager: this,
      editor: I
    });
  }
  get signatureManager() {
    return this.#r;
  }
  switchToMode(I, g) {
    this._eventBus.on("annotationeditormodechanged", g, {
      once: !0,
      signal: this._signal
    }), this._eventBus.dispatch("showannotationeditorui", {
      source: this,
      mode: I
    });
  }
  setPreference(I, g) {
    this._eventBus.dispatch("setpreference", {
      source: this,
      name: I,
      value: g
    });
  }
  onSetPreference({
    name: I,
    value: g
  }) {
    switch (I) {
      case "enableNewAltTextWhenAddingImage":
        this.#h = g;
        break;
    }
  }
  onPageChanging({
    pageNumber: I
  }) {
    this.#m = I - 1;
  }
  focusMainContainer() {
    this.#O.focus();
  }
  findParent(I, g) {
    for (const C of this.#i.values()) {
      const {
        x: A,
        y: i,
        width: l,
        height: s
      } = C.div.getBoundingClientRect();
      if (I >= A && I <= A + l && g >= i && g <= i + s)
        return C;
    }
    return null;
  }
  disableUserSelect(I = !1) {
    this.#f.classList.toggle("noUserSelect", I);
  }
  addShouldRescale(I) {
    this.#e.add(I);
  }
  removeShouldRescale(I) {
    this.#e.delete(I);
  }
  onScaleChanging({
    scale: I
  }) {
    this.commitOrRemove(), this.viewParameters.realScale = I * Hg.PDF_TO_CSS_UNITS;
    for (const g of this.#e)
      g.onScaleChanging();
    this.#b?.onScaleChanging();
  }
  onRotationChanging({
    pagesRotation: I
  }) {
    this.commitOrRemove(), this.viewParameters.rotation = I;
  }
  #E({
    anchorNode: I
  }) {
    return I.nodeType === Node.TEXT_NODE ? I.parentElement : I;
  }
  #_(I) {
    const {
      currentLayer: g
    } = this;
    if (g.hasTextLayer(I))
      return g;
    for (const C of this.#i.values())
      if (C.hasTextLayer(I))
        return C;
    return null;
  }
  highlightSelection(I = "", g = !1) {
    const C = document.getSelection();
    if (!C || C.isCollapsed)
      return;
    const {
      anchorNode: A,
      anchorOffset: i,
      focusNode: l,
      focusOffset: s
    } = C, d = C.toString(), G = this.#E(C).closest(".textLayer"), b = this.getSelectionBoxes(G);
    if (!b)
      return;
    C.empty();
    const o = this.#_(G), m = this.#H === k.NONE, e = () => {
      const a = o?.createAndAddNewEditor({
        x: 0,
        y: 0
      }, !1, {
        methodOfCreation: I,
        boxes: b,
        anchorNode: A,
        anchorOffset: i,
        focusNode: l,
        focusOffset: s,
        text: d
      });
      m && this.showAllEditors("highlight", !0, !0), g && a?.editComment();
    };
    if (m) {
      this.switchToMode(k.HIGHLIGHT, e);
      return;
    }
    e();
  }
  commentSelection(I = "") {
    this.highlightSelection(I, !0);
  }
  #sI() {
    const I = document.getSelection();
    if (!I || I.isCollapsed)
      return;
    const C = this.#E(I).closest(".textLayer"), A = this.getSelectionBoxes(C);
    A && (this.#u ||= new Hs(this), this.#u.show(C, A, this.direction === "ltr"));
  }
  getAndRemoveDataFromAnnotationStorage(I) {
    if (!this.#s)
      return null;
    const g = `${Og}${I}`, C = this.#s.getRawValue(g);
    return C && this.#s.remove(g), C;
  }
  addToAnnotationStorage(I) {
    !I.isEmpty() && this.#s && !this.#s.has(I.id) && this.#s.setValue(I.id, I);
  }
  a11yAlert(I, g = null) {
    const C = this.#q;
    C && (C.setAttribute("data-l10n-id", I), g ? C.setAttribute("data-l10n-args", JSON.stringify(g)) : C.removeAttribute("data-l10n-args"));
  }
  #dI() {
    const I = document.getSelection();
    if (!I || I.isCollapsed) {
      this.#D && (this.#u?.hide(), this.#D = null, this.#L({
        hasSelectedText: !1
      }));
      return;
    }
    const {
      anchorNode: g
    } = I;
    if (g === this.#D)
      return;
    const A = this.#E(I).closest(".textLayer");
    if (!A) {
      this.#D && (this.#u?.hide(), this.#D = null, this.#L({
        hasSelectedText: !1
      }));
      return;
    }
    if (this.#u?.hide(), this.#D = g, this.#L({
      hasSelectedText: !0
    }), !(this.#H !== k.HIGHLIGHT && this.#H !== k.NONE) && (this.#H === k.HIGHLIGHT && this.showAllEditors("highlight", !0, !0), this.#Y = this.isShiftKeyDown, !this.isShiftKeyDown)) {
      const i = this.#H === k.HIGHLIGHT ? this.#_(A) : null;
      if (i?.toggleDrawing(), this.#X) {
        const l = new AbortController(), s = this.combinedSignal(l), d = (c) => {
          c.type === "pointerup" && c.button !== 0 || (l.abort(), i?.toggleDrawing(!0), c.type === "pointerup" && this.#$("main_toolbar"));
        };
        window.addEventListener("pointerup", d, {
          signal: s
        }), window.addEventListener("blur", d, {
          signal: s
        });
      } else
        i?.toggleDrawing(!0), this.#$("main_toolbar");
    }
  }
  #$(I = "") {
    this.#H === k.HIGHLIGHT ? this.highlightSelection(I) : this.#B && this.#sI();
  }
  #ZI() {
    document.addEventListener("selectionchange", this.#dI.bind(this), {
      signal: this._signal
    });
  }
  #cI() {
    if (this.#n)
      return;
    this.#n = new AbortController();
    const I = this.combinedSignal(this.#n);
    window.addEventListener("focus", this.focus.bind(this), {
      signal: I
    }), window.addEventListener("blur", this.blur.bind(this), {
      signal: I
    });
  }
  #GI() {
    this.#n?.abort(), this.#n = null;
  }
  blur() {
    if (this.isShiftKeyDown = !1, this.#Y && (this.#Y = !1, this.#$("main_toolbar")), !this.hasSelection)
      return;
    const {
      activeElement: I
    } = document;
    for (const g of this.#V)
      if (g.div.contains(I)) {
        this.#S = [g, I], g._focusEventsAllowed = !1;
        break;
      }
  }
  focus() {
    if (!this.#S)
      return;
    const [I, g] = this.#S;
    this.#S = null, g.addEventListener("focusin", () => {
      I._focusEventsAllowed = !0;
    }, {
      once: !0,
      signal: this._signal
    }), g.focus();
  }
  #gI() {
    if (this.#K)
      return;
    this.#K = new AbortController();
    const I = this.combinedSignal(this.#K);
    window.addEventListener("keydown", this.keydown.bind(this), {
      signal: I
    }), window.addEventListener("keyup", this.keyup.bind(this), {
      signal: I
    });
  }
  #bI() {
    this.#K?.abort(), this.#K = null;
  }
  #CI() {
    if (this.#o)
      return;
    this.#o = new AbortController();
    const I = this.combinedSignal(this.#o);
    document.addEventListener("copy", this.copy.bind(this), {
      signal: I
    }), document.addEventListener("cut", this.cut.bind(this), {
      signal: I
    }), document.addEventListener("paste", this.paste.bind(this), {
      signal: I
    });
  }
  #AI() {
    this.#o?.abort(), this.#o = null;
  }
  #oI() {
    const I = this._signal;
    document.addEventListener("dragover", this.dragOver.bind(this), {
      signal: I
    }), document.addEventListener("drop", this.drop.bind(this), {
      signal: I
    });
  }
  addEditListeners() {
    this.#gI(), this.#CI();
  }
  removeEditListeners() {
    this.#bI(), this.#AI();
  }
  dragOver(I) {
    for (const {
      type: g
    } of I.dataTransfer.items)
      for (const C of this.#G)
        if (C.isHandlingMimeForPasting(g)) {
          I.dataTransfer.dropEffect = "copy", I.preventDefault();
          return;
        }
  }
  drop(I) {
    for (const g of I.dataTransfer.items)
      for (const C of this.#G)
        if (C.isHandlingMimeForPasting(g.type)) {
          C.paste(g, this.currentLayer), I.preventDefault();
          return;
        }
  }
  copy(I) {
    if (I.preventDefault(), this.#g?.commitOrRemove(), !this.hasSelection)
      return;
    const g = [];
    for (const C of this.#V) {
      const A = C.serialize(!0);
      A && g.push(A);
    }
    g.length !== 0 && I.clipboardData.setData("application/pdfjs", JSON.stringify(g));
  }
  cut(I) {
    this.copy(I), this.delete();
  }
  async paste(I) {
    I.preventDefault();
    const {
      clipboardData: g
    } = I;
    for (const i of g.items)
      for (const l of this.#G)
        if (l.isHandlingMimeForPasting(i.type)) {
          l.paste(i, this.currentLayer);
          return;
        }
    let C = g.getData("application/pdfjs");
    if (!C)
      return;
    try {
      C = JSON.parse(C);
    } catch (i) {
      L(`paste: "${i.message}".`);
      return;
    }
    if (!Array.isArray(C))
      return;
    this.unselectAll();
    const A = this.currentLayer;
    try {
      const i = [];
      for (const d of C) {
        const c = await A.deserialize(d);
        if (!c)
          return;
        i.push(c);
      }
      const l = () => {
        for (const d of i)
          this.#iI(d);
        this.#lI(i);
      }, s = () => {
        for (const d of i)
          d.remove();
      };
      this.addCommands({
        cmd: l,
        undo: s,
        mustExec: !0
      });
    } catch (i) {
      L(`paste: "${i.message}".`);
    }
  }
  keydown(I) {
    !this.isShiftKeyDown && I.key === "Shift" && (this.isShiftKeyDown = !0), this.#H !== k.NONE && !this.isEditorHandlingKeyboard && GA._keyboardManager.exec(this, I);
  }
  keyup(I) {
    this.isShiftKeyDown && I.key === "Shift" && (this.isShiftKeyDown = !1, this.#Y && (this.#Y = !1, this.#$("main_toolbar")));
  }
  onEditingAction({
    name: I
  }) {
    switch (I) {
      case "undo":
      case "redo":
      case "delete":
      case "selectAll":
        this[I]();
        break;
      case "highlightSelection":
        this.highlightSelection("context_menu");
        break;
      case "commentSelection":
        this.commentSelection("context_menu");
        break;
    }
  }
  #L(I) {
    Object.entries(I).some(([C, A]) => this.#v[C] !== A) && (this._eventBus.dispatch("annotationeditorstateschanged", {
      source: this,
      details: Object.assign(this.#v, I)
    }), this.#H === k.HIGHLIGHT && I.hasSelectedEditor === !1 && this.#U([[j.HIGHLIGHT_FREE, !0]]));
  }
  #U(I) {
    this._eventBus.dispatch("annotationeditorparamschanged", {
      source: this,
      details: I
    });
  }
  setEditingState(I) {
    I ? (this.#cI(), this.#CI(), this.#L({
      isEditing: this.#H !== k.NONE,
      isEmpty: this.#II(),
      hasSomethingToUndo: this.#c.hasSomethingToUndo(),
      hasSomethingToRedo: this.#c.hasSomethingToRedo(),
      hasSelectedEditor: !1
    })) : (this.#GI(), this.#AI(), this.#L({
      isEditing: !1
    }), this.disableUserSelect(!1));
  }
  registerEditorTypes(I) {
    if (!this.#G) {
      this.#G = I;
      for (const g of this.#G)
        this.#U(g.defaultPropertiesToUpdate);
    }
  }
  getId() {
    return this.#M.id;
  }
  get currentLayer() {
    return this.#i.get(this.#m);
  }
  getLayer(I) {
    return this.#i.get(I);
  }
  get currentPageIndex() {
    return this.#m;
  }
  addLayer(I) {
    this.#i.set(I.pageIndex, I), this.#y ? I.enable() : I.disable();
  }
  removeLayer(I) {
    this.#i.delete(I.pageIndex);
  }
  async updateMode(I, g = null, C = !1, A = !1, i = !1) {
    if (this.#H !== I && !(this.#T && (await this.#T.promise, !this.#T))) {
      if (this.#T = Promise.withResolvers(), this.#b?.commitOrRemove(), this.#H === k.POPUP && this.#Z?.hideSidebar(), this.#Z?.destroyPopup(), this.#H = I, I === k.NONE) {
        this.setEditingState(!1), this.#aI();
        for (const l of this.#C.values())
          l.hideStandaloneCommentButton();
        this._editorUndoBar?.hide(), this.toggleComment(null), this.#T.resolve();
        return;
      }
      for (const l of this.#C.values())
        l.addStandaloneCommentButton();
      I === k.SIGNATURE && await this.#r?.loadSignatures(), this.setEditingState(!0), await this.#mI(), this.unselectAll();
      for (const l of this.#i.values())
        l.updateMode(I);
      if (I === k.POPUP) {
        this.#A ||= await this.#k.getAnnotationsByType(new Set(this.#G.map((d) => d._editorType)));
        const l = /* @__PURE__ */ new Set(), s = [];
        for (const d of this.#C.values()) {
          const {
            annotationElementId: c,
            hasComment: G,
            deleted: b
          } = d;
          c && l.add(c), G && !b && s.push(d.getData());
        }
        for (const d of this.#A) {
          const {
            id: c,
            popupRef: G,
            contentsObj: b
          } = d;
          G && b?.str && !l.has(c) && !this.#t.has(c) && s.push(d);
        }
        this.#Z?.showSidebar(s);
      }
      if (!g) {
        C && this.addNewEditorFromKeyboard(), this.#T.resolve();
        return;
      }
      for (const l of this.#C.values())
        l.uid === g ? (this.setSelected(l), i ? l.editComment() : A ? l.enterInEditMode() : l.focus()) : l.unselect();
      this.#T.resolve();
    }
  }
  addNewEditorFromKeyboard() {
    this.currentLayer.canCreateNewEmptyEditor() && this.currentLayer.addNewEditor();
  }
  updateToolbar(I) {
    I.mode !== this.#H && this._eventBus.dispatch("switchannotationeditormode", {
      source: this,
      ...I
    });
  }
  updateParams(I, g) {
    if (this.#G) {
      switch (I) {
        case j.CREATE:
          this.currentLayer.addNewEditor(g);
          return;
        case j.HIGHLIGHT_SHOW_ALL:
          this._eventBus.dispatch("reporttelemetry", {
            source: this,
            details: {
              type: "editing",
              data: {
                type: "highlight",
                action: "toggle_visibility"
              }
            }
          }), (this.#P ||= /* @__PURE__ */ new Map()).set(I, g), this.showAllEditors("highlight", g);
          break;
      }
      if (this.hasSelection)
        for (const C of this.#V)
          C.updateParams(I, g);
      else
        for (const C of this.#G)
          C.updateDefaultParams(I, g);
    }
  }
  showAllEditors(I, g, C = !1) {
    for (const i of this.#C.values())
      i.editorType === I && i.show(g);
    (this.#P?.get(j.HIGHLIGHT_SHOW_ALL) ?? !0) !== g && this.#U([[j.HIGHLIGHT_SHOW_ALL, g]]);
  }
  enableWaiting(I = !1) {
    if (this.#p !== I) {
      this.#p = I;
      for (const g of this.#i.values())
        I ? g.disableClick() : g.enableClick(), g.div.classList.toggle("waiting", I);
    }
  }
  async #mI() {
    if (!this.#y) {
      this.#y = !0;
      const I = [];
      for (const g of this.#i.values())
        I.push(g.enable());
      await Promise.all(I);
      for (const g of this.#C.values())
        g.enable();
    }
  }
  #aI() {
    if (this.unselectAll(), this.#y) {
      this.#y = !1;
      for (const I of this.#i.values())
        I.disable();
      for (const I of this.#C.values())
        I.disable();
    }
  }
  *getEditors(I) {
    for (const g of this.#C.values())
      g.pageIndex === I && (yield g);
  }
  getEditor(I) {
    return this.#C.get(I);
  }
  addEditor(I) {
    this.#C.set(I.id, I);
  }
  removeEditor(I) {
    I.div.contains(document.activeElement) && (this.#w && clearTimeout(this.#w), this.#w = setTimeout(() => {
      this.focusMainContainer(), this.#w = null;
    }, 0)), this.#C.delete(I.id), I.annotationElementId && this.#z?.delete(I.annotationElementId), this.unselect(I), (!I.annotationElementId || !this.#t.has(I.annotationElementId)) && this.#s?.remove(I.id);
  }
  addDeletedAnnotationElement(I) {
    this.#t.add(I.annotationElementId), this.addChangedExistingAnnotation(I), I.deleted = !0;
  }
  isDeletedAnnotationElement(I) {
    return this.#t.has(I);
  }
  removeDeletedAnnotationElement(I) {
    this.#t.delete(I.annotationElementId), this.removeChangedExistingAnnotation(I), I.deleted = !1;
  }
  #iI(I) {
    const g = this.#i.get(I.pageIndex);
    g ? g.addOrRebuild(I) : (this.addEditor(I), this.addToAnnotationStorage(I));
  }
  setActiveEditor(I) {
    this.#g !== I && (this.#g = I, I && this.#U(I.propertiesToUpdate));
  }
  get #eI() {
    let I = null;
    for (I of this.#V)
      ;
    return I;
  }
  updateUI(I) {
    this.#eI === I && this.#U(I.propertiesToUpdate);
  }
  updateUIForDefaultProperties(I) {
    this.#U(I.defaultPropertiesToUpdate);
  }
  toggleSelected(I) {
    if (this.#V.has(I)) {
      this.#V.delete(I), I.unselect(), this.#L({
        hasSelectedEditor: this.hasSelection
      });
      return;
    }
    this.#V.add(I), I.select(), this.#U(I.propertiesToUpdate), this.#L({
      hasSelectedEditor: !0
    });
  }
  setSelected(I) {
    this.updateToolbar({
      mode: I.mode,
      editId: I.id
    }), this.#b?.commitOrRemove();
    for (const g of this.#V)
      g !== I && g.unselect();
    this.#V.clear(), this.#V.add(I), I.select(), this.#U(I.propertiesToUpdate), this.#L({
      hasSelectedEditor: !0
    });
  }
  isSelected(I) {
    return this.#V.has(I);
  }
  get firstSelectedEditor() {
    return this.#V.values().next().value;
  }
  unselect(I) {
    I.unselect(), this.#V.delete(I), this.#L({
      hasSelectedEditor: this.hasSelection
    });
  }
  get hasSelection() {
    return this.#V.size !== 0;
  }
  get isEnterHandled() {
    return this.#V.size === 1 && this.firstSelectedEditor.isEnterHandled;
  }
  undo() {
    this.#c.undo(), this.#L({
      hasSomethingToUndo: this.#c.hasSomethingToUndo(),
      hasSomethingToRedo: !0,
      isEmpty: this.#II()
    }), this._editorUndoBar?.hide();
  }
  redo() {
    this.#c.redo(), this.#L({
      hasSomethingToUndo: !0,
      hasSomethingToRedo: this.#c.hasSomethingToRedo(),
      isEmpty: this.#II()
    });
  }
  addCommands(I) {
    this.#c.add(I), this.#L({
      hasSomethingToUndo: !0,
      hasSomethingToRedo: !1,
      isEmpty: this.#II()
    });
  }
  cleanUndoStack(I) {
    this.#c.cleanType(I);
  }
  #II() {
    if (this.#C.size === 0)
      return !0;
    if (this.#C.size === 1)
      for (const I of this.#C.values())
        return I.isEmpty();
    return !1;
  }
  delete() {
    this.commitOrRemove();
    const I = this.currentLayer?.endDrawingSession(!0);
    if (!this.hasSelection && !I)
      return;
    const g = I ? [I] : [...this.#V], C = () => {
      this._editorUndoBar?.show(A, g.length === 1 ? g[0].editorType : g.length);
      for (const i of g)
        i.remove();
    }, A = () => {
      for (const i of g)
        this.#iI(i);
    };
    this.addCommands({
      cmd: C,
      undo: A,
      mustExec: !0
    });
  }
  commitOrRemove() {
    this.#g?.commitOrRemove();
  }
  hasSomethingToControl() {
    return this.#g || this.hasSelection;
  }
  #lI(I) {
    for (const g of this.#V)
      g.unselect();
    this.#V.clear();
    for (const g of I)
      g.isEmpty() || (this.#V.add(g), g.select());
    this.#L({
      hasSelectedEditor: this.hasSelection
    });
  }
  selectAll() {
    for (const I of this.#V)
      I.commit();
    this.#lI(this.#C.values());
  }
  unselectAll() {
    if (!(this.#g && (this.#g.commitOrRemove(), this.#H !== k.NONE)) && !this.#b?.commitOrRemove() && this.hasSelection) {
      for (const I of this.#V)
        I.unselect();
      this.#V.clear(), this.#L({
        hasSelectedEditor: !1
      });
    }
  }
  translateSelectedEditors(I, g, C = !1) {
    if (C || this.commitOrRemove(), !this.hasSelection)
      return;
    this.#Q[0] += I, this.#Q[1] += g;
    const [A, i] = this.#Q, l = [...this.#V], s = 1e3;
    this.#J && clearTimeout(this.#J), this.#J = setTimeout(() => {
      this.#J = null, this.#Q[0] = this.#Q[1] = 0, this.addCommands({
        cmd: () => {
          for (const d of l)
            this.#C.has(d.id) && (d.translateInPage(A, i), d.translationDone());
        },
        undo: () => {
          for (const d of l)
            this.#C.has(d.id) && (d.translateInPage(-A, -i), d.translationDone());
        },
        mustExec: !1
      });
    }, s);
    for (const d of l)
      d.translateInPage(I, g), d.translationDone();
  }
  setUpDragSession() {
    if (this.hasSelection) {
      this.disableUserSelect(!0), this.#a = /* @__PURE__ */ new Map();
      for (const I of this.#V)
        this.#a.set(I, {
          savedX: I.x,
          savedY: I.y,
          savedPageIndex: I.pageIndex,
          newX: 0,
          newY: 0,
          newPageIndex: -1
        });
    }
  }
  endDragSession() {
    if (!this.#a)
      return !1;
    this.disableUserSelect(!1);
    const I = this.#a;
    this.#a = null;
    let g = !1;
    for (const [{
      x: A,
      y: i,
      pageIndex: l
    }, s] of I)
      s.newX = A, s.newY = i, s.newPageIndex = l, g ||= A !== s.savedX || i !== s.savedY || l !== s.savedPageIndex;
    if (!g)
      return !1;
    const C = (A, i, l, s) => {
      if (this.#C.has(A.id)) {
        const d = this.#i.get(s);
        d ? A._setParentAndPosition(d, i, l) : (A.pageIndex = s, A.x = i, A.y = l);
      }
    };
    return this.addCommands({
      cmd: () => {
        for (const [A, {
          newX: i,
          newY: l,
          newPageIndex: s
        }] of I)
          C(A, i, l, s);
      },
      undo: () => {
        for (const [A, {
          savedX: i,
          savedY: l,
          savedPageIndex: s
        }] of I)
          C(A, i, l, s);
      },
      mustExec: !0
    }), !0;
  }
  dragSelectedEditors(I, g) {
    if (this.#a)
      for (const C of this.#a.keys())
        C.drag(I, g);
  }
  rebuild(I) {
    if (I.parent === null) {
      const g = this.getLayer(I.pageIndex);
      g ? (g.changeParent(I), g.addOrRebuild(I)) : (this.addEditor(I), this.addToAnnotationStorage(I), I.rebuild());
    } else
      I.parent.addOrRebuild(I);
  }
  get isEditorHandlingKeyboard() {
    return this.getActive()?.shouldGetKeyboardEvents() || this.#V.size === 1 && this.firstSelectedEditor.shouldGetKeyboardEvents();
  }
  isActive(I) {
    return this.#g === I;
  }
  getActive() {
    return this.#g;
  }
  getMode() {
    return this.#H;
  }
  isEditingMode() {
    return this.#H !== k.NONE;
  }
  get imageManager() {
    return T(this, "imageManager", new MA());
  }
  getSelectionBoxes(I) {
    if (!I)
      return null;
    const g = document.getSelection();
    for (let c = 0, G = g.rangeCount; c < G; c++)
      if (!I.contains(g.getRangeAt(c).commonAncestorContainer))
        return null;
    const {
      x: C,
      y: A,
      width: i,
      height: l
    } = I.getBoundingClientRect();
    let s;
    switch (I.getAttribute("data-main-rotation")) {
      case "90":
        s = (c, G, b, o) => ({
          x: (G - A) / l,
          y: 1 - (c + b - C) / i,
          width: o / l,
          height: b / i
        });
        break;
      case "180":
        s = (c, G, b, o) => ({
          x: 1 - (c + b - C) / i,
          y: 1 - (G + o - A) / l,
          width: b / i,
          height: o / l
        });
        break;
      case "270":
        s = (c, G, b, o) => ({
          x: 1 - (G + o - A) / l,
          y: (c - C) / i,
          width: o / l,
          height: b / i
        });
        break;
      default:
        s = (c, G, b, o) => ({
          x: (c - C) / i,
          y: (G - A) / l,
          width: b / i,
          height: o / l
        });
        break;
    }
    const d = [];
    for (let c = 0, G = g.rangeCount; c < G; c++) {
      const b = g.getRangeAt(c);
      if (!b.collapsed)
        for (const {
          x: o,
          y: m,
          width: e,
          height: a
        } of b.getClientRects())
          e === 0 || a === 0 || d.push(s(o, m, e, a));
    }
    return d.length === 0 ? null : d;
  }
  addChangedExistingAnnotation({
    annotationElementId: I,
    id: g
  }) {
    (this.#d ||= /* @__PURE__ */ new Map()).set(I, g);
  }
  removeChangedExistingAnnotation({
    annotationElementId: I
  }) {
    this.#d?.delete(I);
  }
  renderAnnotationElement(I) {
    const g = this.#d?.get(I.data.id);
    if (!g)
      return;
    const C = this.#s.getRawValue(g);
    C && (this.#H === k.NONE && !C.hasBeenModified || C.renderAnnotationElement(I));
  }
  setMissingCanvas(I, g, C) {
    const A = this.#z?.get(I);
    A && (A.setCanvas(g, C), this.#z.delete(I));
  }
  addMissingCanvas(I, g) {
    (this.#z ||= /* @__PURE__ */ new Map()).set(I, g);
  }
};
class zI {
  #I = null;
  #g = !1;
  #A = null;
  #C = null;
  #i = null;
  #l = null;
  #s = !1;
  #d = null;
  #c = null;
  #Z = null;
  #o = null;
  #b = !1;
  static #m = null;
  static _l10n = null;
  constructor(I) {
    this.#c = I, this.#b = I._uiManager.useNewAltTextFlow, zI.#m ||= Object.freeze({
      added: "pdfjs-editor-new-alt-text-added-button",
      "added-label": "pdfjs-editor-new-alt-text-added-button-label",
      missing: "pdfjs-editor-new-alt-text-missing-button",
      "missing-label": "pdfjs-editor-new-alt-text-missing-button-label",
      review: "pdfjs-editor-new-alt-text-to-review-button",
      "review-label": "pdfjs-editor-new-alt-text-to-review-button-label"
    });
  }
  static initialize(I) {
    zI._l10n ??= I;
  }
  async render() {
    const I = this.#A = document.createElement("button");
    I.className = "altText", I.tabIndex = "0";
    const g = this.#C = document.createElement("span");
    I.append(g), this.#b ? (I.classList.add("new"), I.setAttribute("data-l10n-id", zI.#m.missing), g.setAttribute("data-l10n-id", zI.#m["missing-label"])) : (I.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-button"), g.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-button-label"));
    const C = this.#c._uiManager._signal;
    I.addEventListener("contextmenu", RI, {
      signal: C
    }), I.addEventListener("pointerdown", (i) => i.stopPropagation(), {
      signal: C
    });
    const A = (i) => {
      i.preventDefault(), this.#c._uiManager.editAltText(this.#c), this.#b && this.#c._reportTelemetry({
        action: "pdfjs.image.alt_text.image_status_label_clicked",
        data: {
          label: this.#t
        }
      });
    };
    return I.addEventListener("click", A, {
      capture: !0,
      signal: C
    }), I.addEventListener("keydown", (i) => {
      i.target === I && i.key === "Enter" && (this.#s = !0, A(i));
    }, {
      signal: C
    }), await this.#a(), I;
  }
  get #t() {
    return this.#I && "added" || this.#I === null && this.guessedText && "review" || "missing";
  }
  finish() {
    this.#A && (this.#A.focus({
      focusVisible: this.#s
    }), this.#s = !1);
  }
  isEmpty() {
    return this.#b ? this.#I === null : !this.#I && !this.#g;
  }
  hasData() {
    return this.#b ? this.#I !== null || !!this.#Z : this.isEmpty();
  }
  get guessedText() {
    return this.#Z;
  }
  async setGuessedText(I) {
    this.#I === null && (this.#Z = I, this.#o = await zI._l10n.get("pdfjs-editor-new-alt-text-generated-alt-text-with-disclaimer", {
      generatedAltText: I
    }), this.#a());
  }
  toggleAltTextBadge(I = !1) {
    if (!this.#b || this.#I) {
      this.#d?.remove(), this.#d = null;
      return;
    }
    if (!this.#d) {
      const g = this.#d = document.createElement("div");
      g.className = "noAltTextBadge", this.#c.div.append(g);
    }
    this.#d.classList.toggle("hidden", !I);
  }
  serialize(I) {
    let g = this.#I;
    return !I && this.#Z === g && (g = this.#o), {
      altText: g,
      decorative: this.#g,
      guessedText: this.#Z,
      textWithDisclaimer: this.#o
    };
  }
  get data() {
    return {
      altText: this.#I,
      decorative: this.#g
    };
  }
  set data({
    altText: I,
    decorative: g,
    guessedText: C,
    textWithDisclaimer: A,
    cancel: i = !1
  }) {
    C && (this.#Z = C, this.#o = A), !(this.#I === I && this.#g === g) && (i || (this.#I = I, this.#g = g), this.#a());
  }
  toggle(I = !1) {
    this.#A && (!I && this.#l && (clearTimeout(this.#l), this.#l = null), this.#A.disabled = !I);
  }
  shown() {
    this.#c._reportTelemetry({
      action: "pdfjs.image.alt_text.image_status_label_displayed",
      data: {
        label: this.#t
      }
    });
  }
  destroy() {
    this.#A?.remove(), this.#A = null, this.#C = null, this.#i = null, this.#d?.remove(), this.#d = null;
  }
  async #a() {
    const I = this.#A;
    if (!I)
      return;
    if (this.#b) {
      if (I.classList.toggle("done", !!this.#I), I.setAttribute("data-l10n-id", zI.#m[this.#t]), this.#C?.setAttribute("data-l10n-id", zI.#m[`${this.#t}-label`]), !this.#I) {
        this.#i?.remove();
        return;
      }
    } else {
      if (!this.#I && !this.#g) {
        I.classList.remove("done"), this.#i?.remove();
        return;
      }
      I.classList.add("done"), I.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-edit-button");
    }
    let g = this.#i;
    if (!g) {
      this.#i = g = document.createElement("span"), g.className = "tooltip", g.setAttribute("role", "tooltip"), g.id = `alt-text-tooltip-${this.#c.id}`;
      const A = 100, i = this.#c._uiManager._signal;
      i.addEventListener("abort", () => {
        clearTimeout(this.#l), this.#l = null;
      }, {
        once: !0
      }), I.addEventListener("mouseenter", () => {
        this.#l = setTimeout(() => {
          this.#l = null, this.#i.classList.add("show"), this.#c._reportTelemetry({
            action: "alt_text_tooltip"
          });
        }, A);
      }, {
        signal: i
      }), I.addEventListener("mouseleave", () => {
        this.#l && (clearTimeout(this.#l), this.#l = null), this.#i?.classList.remove("show");
      }, {
        signal: i
      });
    }
    this.#g ? g.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-decorative-tooltip") : (g.removeAttribute("data-l10n-id"), g.textContent = this.#I), g.parentNode || I.append(g), this.#c.getElementForAltText()?.setAttribute("aria-describedby", g.id);
  }
}
class sC {
  #I = null;
  #g = null;
  #A = !1;
  #C = null;
  #i = null;
  #l = null;
  #s = null;
  #d = null;
  #c = !1;
  #Z = null;
  constructor(I) {
    this.#C = I;
  }
  renderForToolbar() {
    const I = this.#g = document.createElement("button");
    return I.className = "comment", this.#o(I, !1);
  }
  renderForStandalone() {
    const I = this.#I = document.createElement("button");
    I.className = "annotationCommentButton";
    const g = this.#C.commentButtonPosition;
    if (g) {
      const {
        style: C
      } = I;
      C.insetInlineEnd = `calc(${100 * (this.#C._uiManager.direction === "ltr" ? 1 - g[0] : g[0])}% - var(--comment-button-dim))`, C.top = `calc(${100 * g[1]}% - var(--comment-button-dim))`;
      const A = this.#C.commentButtonColor;
      A && (C.backgroundColor = A);
    }
    return this.#o(I, !0);
  }
  focusButton() {
    setTimeout(() => {
      (this.#I ?? this.#g)?.focus();
    }, 0);
  }
  onUpdatedColor() {
    if (!this.#I)
      return;
    const I = this.#C.commentButtonColor;
    I && (this.#I.style.backgroundColor = I), this.#C._uiManager.updatePopupColor(this.#C);
  }
  get commentButtonWidth() {
    return (this.#I?.getBoundingClientRect().width ?? 0) / this.#C.parent.boundingClientRect.width;
  }
  get commentPopupPositionInLayer() {
    if (this.#Z)
      return this.#Z;
    if (!this.#I)
      return null;
    const {
      x: I,
      y: g,
      height: C
    } = this.#I.getBoundingClientRect(), {
      x: A,
      y: i,
      width: l,
      height: s
    } = this.#C.parent.boundingClientRect;
    return [(I - A) / l, (g + C - i) / s];
  }
  set commentPopupPositionInLayer(I) {
    this.#Z = I;
  }
  hasDefaultPopupPosition() {
    return this.#Z === null;
  }
  removeStandaloneCommentButton() {
    this.#I?.remove(), this.#I = null;
  }
  removeToolbarCommentButton() {
    this.#g?.remove(), this.#g = null;
  }
  setCommentButtonStates({
    selected: I,
    hasPopup: g
  }) {
    this.#I && (this.#I.classList.toggle("selected", I), this.#I.ariaExpanded = g);
  }
  #o(I, g) {
    if (!this.#C._uiManager.hasCommentManager())
      return null;
    I.tabIndex = "0", I.ariaHasPopup = "dialog", g ? (I.ariaControls = "commentPopup", I.setAttribute("data-l10n-id", "pdfjs-show-comment-button")) : (I.ariaControlsElements = [this.#C._uiManager.getCommentDialogElement()], I.setAttribute("data-l10n-id", "pdfjs-editor-edit-comment-button"));
    const C = this.#C._uiManager._signal;
    if (!(C instanceof AbortSignal) || C.aborted)
      return I;
    I.addEventListener("contextmenu", RI, {
      signal: C
    }), g && (I.addEventListener("focusin", (i) => {
      this.#C._focusEventsAllowed = !1, II(i);
    }, {
      capture: !0,
      signal: C
    }), I.addEventListener("focusout", (i) => {
      this.#C._focusEventsAllowed = !0, II(i);
    }, {
      capture: !0,
      signal: C
    })), I.addEventListener("pointerdown", (i) => i.stopPropagation(), {
      signal: C
    });
    const A = (i) => {
      i.preventDefault(), I === this.#g ? this.edit() : this.#C.toggleComment(!0);
    };
    return I.addEventListener("click", A, {
      capture: !0,
      signal: C
    }), I.addEventListener("keydown", (i) => {
      i.target === I && i.key === "Enter" && (this.#A = !0, A(i));
    }, {
      signal: C
    }), I.addEventListener("pointerenter", () => {
      this.#C.toggleComment(!1, !0);
    }, {
      signal: C
    }), I.addEventListener("pointerleave", () => {
      this.#C.toggleComment(!1, !1);
    }, {
      signal: C
    }), I;
  }
  edit(I) {
    const g = this.commentPopupPositionInLayer;
    let C, A;
    if (g)
      [C, A] = g;
    else {
      [C, A] = this.#C.commentButtonPosition;
      const {
        width: G,
        height: b,
        x: o,
        y: m
      } = this.#C;
      C = o + C * G, A = m + A * b;
    }
    const i = this.#C.parent.boundingClientRect, {
      x: l,
      y: s,
      width: d,
      height: c
    } = i;
    this.#C._uiManager.editComment(this.#C, l + C * d, s + A * c, {
      ...I,
      parentDimensions: i
    });
  }
  finish() {
    this.#g && (this.#g.focus({
      focusVisible: this.#A
    }), this.#A = !1);
  }
  isDeleted() {
    return this.#c || this.#s === "";
  }
  isEmpty() {
    return this.#s === null;
  }
  hasBeenEdited() {
    return this.isDeleted() || this.#s !== this.#i;
  }
  serialize() {
    return this.data;
  }
  get data() {
    return {
      text: this.#s,
      richText: this.#l,
      date: this.#d,
      deleted: this.isDeleted()
    };
  }
  set data(I) {
    if (I !== this.#s && (this.#l = null), I === null) {
      this.#s = "", this.#c = !0;
      return;
    }
    this.#s = I, this.#d = /* @__PURE__ */ new Date(), this.#c = !1;
  }
  setInitialText(I, g = null) {
    this.#i = I, this.data = I, this.#d = null, this.#l = g;
  }
  shown() {
  }
  destroy() {
    this.#g?.remove(), this.#g = null, this.#I?.remove(), this.#I = null, this.#s = "", this.#l = null, this.#d = null, this.#C = null, this.#A = !1, this.#c = !1;
  }
}
let cl = class Gl {
  #I;
  #g = !1;
  #A = null;
  #C;
  #i;
  #l;
  #s;
  #d = null;
  #c;
  #Z = null;
  #o;
  #b = null;
  constructor({
    container: I,
    isPinchingDisabled: g = null,
    isPinchingStopped: C = null,
    onPinchStart: A = null,
    onPinching: i = null,
    onPinchEnd: l = null,
    signal: s
  }) {
    this.#I = I, this.#A = C, this.#C = g, this.#i = A, this.#l = i, this.#s = l, this.#o = new AbortController(), this.#c = AbortSignal.any([s, this.#o.signal]), I.addEventListener("touchstart", this.#m.bind(this), {
      passive: !1,
      signal: this.#c
    });
  }
  get MIN_TOUCH_DISTANCE_TO_PINCH() {
    return 35 / Gg.pixelRatio;
  }
  #m(I) {
    if (this.#C?.())
      return;
    if (I.touches.length === 1) {
      if (this.#d)
        return;
      const A = this.#d = new AbortController(), i = AbortSignal.any([this.#c, A.signal]), l = this.#I, s = {
        capture: !0,
        signal: i,
        passive: !1
      }, d = (c) => {
        c.pointerType === "touch" && (this.#d?.abort(), this.#d = null);
      };
      l.addEventListener("pointerdown", (c) => {
        c.pointerType === "touch" && (II(c), d(c));
      }, s), l.addEventListener("pointerup", d, s), l.addEventListener("pointercancel", d, s);
      return;
    }
    if (!this.#b) {
      this.#b = new AbortController();
      const A = AbortSignal.any([this.#c, this.#b.signal]), i = this.#I, l = {
        signal: A,
        capture: !1,
        passive: !1
      };
      i.addEventListener("touchmove", this.#t.bind(this), l);
      const s = this.#a.bind(this);
      i.addEventListener("touchend", s, l), i.addEventListener("touchcancel", s, l), l.capture = !0, i.addEventListener("pointerdown", II, l), i.addEventListener("pointermove", II, l), i.addEventListener("pointercancel", II, l), i.addEventListener("pointerup", II, l), this.#i?.();
    }
    if (II(I), I.touches.length !== 2 || this.#A?.()) {
      this.#Z = null;
      return;
    }
    let [g, C] = I.touches;
    g.identifier > C.identifier && ([g, C] = [C, g]), this.#Z = {
      touch0X: g.screenX,
      touch0Y: g.screenY,
      touch1X: C.screenX,
      touch1Y: C.screenY
    };
  }
  #t(I) {
    if (!this.#Z || I.touches.length !== 2)
      return;
    II(I);
    let [g, C] = I.touches;
    g.identifier > C.identifier && ([g, C] = [C, g]);
    const {
      screenX: A,
      screenY: i
    } = g, {
      screenX: l,
      screenY: s
    } = C, d = this.#Z, {
      touch0X: c,
      touch0Y: G,
      touch1X: b,
      touch1Y: o
    } = d, m = b - c, e = o - G, a = l - A, h = s - i, t = Math.hypot(a, h) || 1, W = Math.hypot(m, e) || 1;
    if (!this.#g && Math.abs(W - t) <= Gl.MIN_TOUCH_DISTANCE_TO_PINCH)
      return;
    if (d.touch0X = A, d.touch0Y = i, d.touch1X = l, d.touch1Y = s, !this.#g) {
      this.#g = !0;
      return;
    }
    const B = [(A + l) / 2, (i + s) / 2];
    this.#l?.(B, W, t);
  }
  #a(I) {
    I.touches.length >= 2 || (this.#b && (this.#b.abort(), this.#b = null, this.#s?.()), this.#Z && (II(I), this.#Z = null, this.#g = !1));
  }
  destroy() {
    this.#o?.abort(), this.#o = null, this.#d?.abort(), this.#d = null;
  }
};
class F {
  #I = null;
  #g = null;
  #A = null;
  #C = null;
  #i = null;
  #l = !1;
  #s = null;
  #d = "";
  #c = null;
  #Z = null;
  #o = null;
  #b = null;
  #m = null;
  #t = "";
  #a = !1;
  #G = null;
  #e = !1;
  #B = !1;
  #W = !1;
  #h = null;
  #N = 0;
  #w = 0;
  #n = null;
  #R = null;
  isSelected = !1;
  _isCopy = !1;
  _editToolbar = null;
  _initialOptions = /* @__PURE__ */ Object.create(null);
  _initialData = null;
  _isVisible = !0;
  _uiManager = null;
  _focusEventsAllowed = !0;
  static _l10n = null;
  static _l10nResizer = null;
  #Y = !1;
  #u = F._zIndex++;
  static _borderLineWidth = -1;
  static _colorManager = new DA();
  static _zIndex = 1;
  static _telemetryTimeout = 1e3;
  static get _resizerKeyboardManager() {
    const I = F.prototype._resizeWithKeyboard, g = Eg.TRANSLATE_SMALL, C = Eg.TRANSLATE_BIG;
    return T(this, "_resizerKeyboardManager", new CC([[["ArrowLeft", "mac+ArrowLeft"], I, {
      args: [-g, 0]
    }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], I, {
      args: [-C, 0]
    }], [["ArrowRight", "mac+ArrowRight"], I, {
      args: [g, 0]
    }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], I, {
      args: [C, 0]
    }], [["ArrowUp", "mac+ArrowUp"], I, {
      args: [0, -g]
    }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], I, {
      args: [0, -C]
    }], [["ArrowDown", "mac+ArrowDown"], I, {
      args: [0, g]
    }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], I, {
      args: [0, C]
    }], [["Escape", "mac+Escape"], F.prototype._stopResizingWithKeyboard]]));
  }
  constructor(I) {
    this.parent = I.parent, this.id = I.id, this.width = this.height = null, this.pageIndex = I.parent.pageIndex, this.name = I.name, this.div = null, this._uiManager = I.uiManager, this.annotationElementId = null, this._willKeepAspectRatio = !1, this._initialOptions.isCentered = I.isCentered, this._structTreeParentId = null, this.annotationElementId = I.annotationElementId || null, this.creationDate = I.creationDate || /* @__PURE__ */ new Date(), this.modificationDate = I.modificationDate || null;
    const {
      rotation: g,
      rawDims: {
        pageWidth: C,
        pageHeight: A,
        pageX: i,
        pageY: l
      }
    } = this.parent.viewport;
    this.rotation = g, this.pageRotation = (360 + g - this._uiManager.viewParameters.rotation) % 360, this.pageDimensions = [C, A], this.pageTranslation = [i, l];
    const [s, d] = this.parentDimensions;
    this.x = I.x / s, this.y = I.y / d, this.isAttachedToDOM = !1, this.deleted = !1;
  }
  get editorType() {
    return Object.getPrototypeOf(this).constructor._type;
  }
  get mode() {
    return Object.getPrototypeOf(this).constructor._editorType;
  }
  static get isDrawer() {
    return !1;
  }
  static get _defaultLineColor() {
    return T(this, "_defaultLineColor", this._colorManager.getHexCode("CanvasText"));
  }
  static deleteAnnotationElement(I) {
    const g = new Ks({
      id: I.parent.getNextId(),
      parent: I.parent,
      uiManager: I._uiManager
    });
    g.annotationElementId = I.annotationElementId, g.deleted = !0, g._uiManager.addToAnnotationStorage(g);
  }
  static initialize(I, g) {
    if (F._l10n ??= I, F._l10nResizer ||= Object.freeze({
      topLeft: "pdfjs-editor-resizer-top-left",
      topMiddle: "pdfjs-editor-resizer-top-middle",
      topRight: "pdfjs-editor-resizer-top-right",
      middleRight: "pdfjs-editor-resizer-middle-right",
      bottomRight: "pdfjs-editor-resizer-bottom-right",
      bottomMiddle: "pdfjs-editor-resizer-bottom-middle",
      bottomLeft: "pdfjs-editor-resizer-bottom-left",
      middleLeft: "pdfjs-editor-resizer-middle-left"
    }), F._borderLineWidth !== -1)
      return;
    const C = getComputedStyle(document.documentElement);
    F._borderLineWidth = parseFloat(C.getPropertyValue("--outline-width")) || 0;
  }
  static updateDefaultParams(I, g) {
  }
  static get defaultPropertiesToUpdate() {
    return [];
  }
  static isHandlingMimeForPasting(I) {
    return !1;
  }
  static paste(I, g) {
    f("Not implemented");
  }
  get propertiesToUpdate() {
    return [];
  }
  get _isDraggable() {
    return this.#Y;
  }
  set _isDraggable(I) {
    this.#Y = I, this.div?.classList.toggle("draggable", I);
  }
  get uid() {
    return this.annotationElementId || this.id;
  }
  get isEnterHandled() {
    return !0;
  }
  center() {
    const [I, g] = this.pageDimensions;
    switch (this.parentRotation) {
      case 90:
        this.x -= this.height * g / (I * 2), this.y += this.width * I / (g * 2);
        break;
      case 180:
        this.x += this.width / 2, this.y += this.height / 2;
        break;
      case 270:
        this.x += this.height * g / (I * 2), this.y -= this.width * I / (g * 2);
        break;
      default:
        this.x -= this.width / 2, this.y -= this.height / 2;
        break;
    }
    this.fixAndSetPosition();
  }
  addCommands(I) {
    this._uiManager.addCommands(I);
  }
  get currentLayer() {
    return this._uiManager.currentLayer;
  }
  setInBackground() {
    this.div.style.zIndex = 0;
  }
  setInForeground() {
    this.div.style.zIndex = this.#u;
  }
  setParent(I) {
    I !== null ? (this.pageIndex = I.pageIndex, this.pageDimensions = I.pageDimensions) : (this.#J(), this.#b?.remove(), this.#b = null), this.parent = I;
  }
  focusin(I) {
    this._focusEventsAllowed && (this.#a ? this.#a = !1 : this.parent.setSelected(this));
  }
  focusout(I) {
    !this._focusEventsAllowed || !this.isAttachedToDOM || I.relatedTarget?.closest(`#${this.id}`) || (I.preventDefault(), this.parent?.isMultipleSelection || this.commitOrRemove());
  }
  commitOrRemove() {
    this.isEmpty() ? this.remove() : this.commit();
  }
  commit() {
    this.isInEditMode() && this.addToAnnotationStorage();
  }
  addToAnnotationStorage() {
    this._uiManager.addToAnnotationStorage(this);
  }
  setAt(I, g, C, A) {
    const [i, l] = this.parentDimensions;
    [C, A] = this.screenToPageTranslation(C, A), this.x = (I + C) / i, this.y = (g + A) / l, this.fixAndSetPosition();
  }
  _moveAfterPaste(I, g) {
    const [C, A] = this.parentDimensions;
    this.setAt(I * C, g * A, this.width * C, this.height * A), this._onTranslated();
  }
  #M([I, g], C, A) {
    [C, A] = this.screenToPageTranslation(C, A), this.x += C / I, this.y += A / g, this._onTranslating(this.x, this.y), this.fixAndSetPosition();
  }
  translate(I, g) {
    this.#M(this.parentDimensions, I, g);
  }
  translateInPage(I, g) {
    this.#G ||= [this.x, this.y, this.width, this.height], this.#M(this.pageDimensions, I, g), this.div.scrollIntoView({
      block: "nearest"
    });
  }
  translationDone() {
    this._onTranslated(this.x, this.y);
  }
  drag(I, g) {
    this.#G ||= [this.x, this.y, this.width, this.height];
    const {
      div: C,
      parentDimensions: [A, i]
    } = this;
    if (this.x += I / A, this.y += g / i, this.parent && (this.x < 0 || this.x > 1 || this.y < 0 || this.y > 1)) {
      const {
        x: b,
        y: o
      } = this.div.getBoundingClientRect();
      this.parent.findNewParent(this, b, o) && (this.x -= Math.floor(this.x), this.y -= Math.floor(this.y));
    }
    let {
      x: l,
      y: s
    } = this;
    const [d, c] = this.getBaseTranslation();
    l += d, s += c;
    const {
      style: G
    } = C;
    G.left = `${(100 * l).toFixed(2)}%`, G.top = `${(100 * s).toFixed(2)}%`, this._onTranslating(l, s), C.scrollIntoView({
      block: "nearest"
    });
  }
  _onTranslating(I, g) {
  }
  _onTranslated(I, g) {
  }
  get _hasBeenMoved() {
    return !!this.#G && (this.#G[0] !== this.x || this.#G[1] !== this.y);
  }
  get _hasBeenResized() {
    return !!this.#G && (this.#G[2] !== this.width || this.#G[3] !== this.height);
  }
  getBaseTranslation() {
    const [I, g] = this.parentDimensions, {
      _borderLineWidth: C
    } = F, A = C / I, i = C / g;
    switch (this.rotation) {
      case 90:
        return [-A, i];
      case 180:
        return [A, i];
      case 270:
        return [A, -i];
      default:
        return [-A, -i];
    }
  }
  get _mustFixPosition() {
    return !0;
  }
  fixAndSetPosition(I = this.rotation) {
    const {
      div: {
        style: g
      },
      pageDimensions: [C, A]
    } = this;
    let {
      x: i,
      y: l,
      width: s,
      height: d
    } = this;
    if (s *= C, d *= A, i *= C, l *= A, this._mustFixPosition)
      switch (I) {
        case 0:
          i = eI(i, 0, C - s), l = eI(l, 0, A - d);
          break;
        case 90:
          i = eI(i, 0, C - d), l = eI(l, s, A);
          break;
        case 180:
          i = eI(i, s, C), l = eI(l, d, A);
          break;
        case 270:
          i = eI(i, d, C), l = eI(l, 0, A - s);
          break;
      }
    this.x = i /= C, this.y = l /= A;
    const [c, G] = this.getBaseTranslation();
    i += c, l += G, g.left = `${(100 * i).toFixed(2)}%`, g.top = `${(100 * l).toFixed(2)}%`, this.moveInDOM();
  }
  static #y(I, g, C) {
    switch (C) {
      case 90:
        return [g, -I];
      case 180:
        return [-I, -g];
      case 270:
        return [-g, I];
      default:
        return [I, g];
    }
  }
  screenToPageTranslation(I, g) {
    return F.#y(I, g, this.parentRotation);
  }
  pageTranslationToScreen(I, g) {
    return F.#y(I, g, 360 - this.parentRotation);
  }
  #X(I) {
    switch (I) {
      case 90: {
        const [g, C] = this.pageDimensions;
        return [0, -g / C, C / g, 0];
      }
      case 180:
        return [-1, 0, 0, -1];
      case 270: {
        const [g, C] = this.pageDimensions;
        return [0, g / C, -C / g, 0];
      }
      default:
        return [1, 0, 0, 1];
    }
  }
  get parentScale() {
    return this._uiManager.viewParameters.realScale;
  }
  get parentRotation() {
    return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;
  }
  get parentDimensions() {
    const {
      parentScale: I,
      pageDimensions: [g, C]
    } = this;
    return [g * I, C * I];
  }
  setDims() {
    const {
      div: {
        style: I
      },
      width: g,
      height: C
    } = this;
    I.width = `${(100 * g).toFixed(2)}%`, I.height = `${(100 * C).toFixed(2)}%`;
  }
  getInitialTranslation() {
    return [0, 0];
  }
  #p() {
    if (this.#c)
      return;
    this.#c = document.createElement("div"), this.#c.classList.add("resizers");
    const I = this._willKeepAspectRatio ? ["topLeft", "topRight", "bottomRight", "bottomLeft"] : ["topLeft", "topMiddle", "topRight", "middleRight", "bottomRight", "bottomMiddle", "bottomLeft", "middleLeft"], g = this._uiManager._signal;
    for (const C of I) {
      const A = document.createElement("div");
      this.#c.append(A), A.classList.add("resizer", C), A.setAttribute("data-resizer-name", C), A.addEventListener("pointerdown", this.#K.bind(this, C), {
        signal: g
      }), A.addEventListener("contextmenu", RI, {
        signal: g
      }), A.tabIndex = -1;
    }
    this.div.prepend(this.#c);
  }
  #K(I, g) {
    g.preventDefault();
    const {
      isMac: C
    } = GI.platform;
    if (g.button !== 0 || g.ctrlKey && C)
      return;
    this.#A?.toggle(!1);
    const A = this._isDraggable;
    this._isDraggable = !1, this.#Z = [g.screenX, g.screenY];
    const i = new AbortController(), l = this._uiManager.combinedSignal(i);
    this.parent.togglePointerEvents(!1), window.addEventListener("pointermove", this.#z.bind(this, I), {
      passive: !0,
      capture: !0,
      signal: l
    }), window.addEventListener("touchmove", II, {
      passive: !1,
      signal: l
    }), window.addEventListener("contextmenu", RI, {
      signal: l
    }), this.#o = {
      savedX: this.x,
      savedY: this.y,
      savedWidth: this.width,
      savedHeight: this.height
    };
    const s = this.parent.div.style.cursor, d = this.div.style.cursor;
    this.div.style.cursor = this.parent.div.style.cursor = window.getComputedStyle(g.target).cursor;
    const c = () => {
      i.abort(), this.parent.togglePointerEvents(!0), this.#A?.toggle(!0), this._isDraggable = A, this.parent.div.style.cursor = s, this.div.style.cursor = d, this.#F();
    };
    window.addEventListener("pointerup", c, {
      signal: l
    }), window.addEventListener("blur", c, {
      signal: l
    });
  }
  #S(I, g, C, A) {
    this.width = C, this.height = A, this.x = I, this.y = g, this.setDims(), this.fixAndSetPosition(), this._onResized();
  }
  _onResized() {
  }
  #F() {
    if (!this.#o)
      return;
    const {
      savedX: I,
      savedY: g,
      savedWidth: C,
      savedHeight: A
    } = this.#o;
    this.#o = null;
    const i = this.x, l = this.y, s = this.width, d = this.height;
    i === I && l === g && s === C && d === A || this.addCommands({
      cmd: this.#S.bind(this, i, l, s, d),
      undo: this.#S.bind(this, I, g, C, A),
      mustExec: !0
    });
  }
  static _round(I) {
    return Math.round(I * 1e4) / 1e4;
  }
  #z(I, g) {
    const [C, A] = this.parentDimensions, i = this.x, l = this.y, s = this.width, d = this.height, c = F.MIN_SIZE / C, G = F.MIN_SIZE / A, b = this.#X(this.rotation), o = (D, z) => [b[0] * D + b[2] * z, b[1] * D + b[3] * z], m = this.#X(360 - this.rotation), e = (D, z) => [m[0] * D + m[2] * z, m[1] * D + m[3] * z];
    let a, h, t = !1, W = !1;
    switch (I) {
      case "topLeft":
        t = !0, a = (D, z) => [0, 0], h = (D, z) => [D, z];
        break;
      case "topMiddle":
        a = (D, z) => [D / 2, 0], h = (D, z) => [D / 2, z];
        break;
      case "topRight":
        t = !0, a = (D, z) => [D, 0], h = (D, z) => [0, z];
        break;
      case "middleRight":
        W = !0, a = (D, z) => [D, z / 2], h = (D, z) => [0, z / 2];
        break;
      case "bottomRight":
        t = !0, a = (D, z) => [D, z], h = (D, z) => [0, 0];
        break;
      case "bottomMiddle":
        a = (D, z) => [D / 2, z], h = (D, z) => [D / 2, 0];
        break;
      case "bottomLeft":
        t = !0, a = (D, z) => [0, z], h = (D, z) => [D, 0];
        break;
      case "middleLeft":
        W = !0, a = (D, z) => [0, z / 2], h = (D, z) => [D, z / 2];
        break;
    }
    const B = a(s, d), w = h(s, d);
    let n = o(...w);
    const V = F._round(i + n[0]), N = F._round(l + n[1]);
    let R = 1, Y = 1, y, X;
    if (g.fromKeyboard)
      ({
        deltaX: y,
        deltaY: X
      } = g);
    else {
      const {
        screenX: D,
        screenY: z
      } = g, [U, mI] = this.#Z;
      [y, X] = this.screenToPageTranslation(D - U, z - mI), this.#Z[0] = D, this.#Z[1] = z;
    }
    if ([y, X] = e(y / C, X / A), t) {
      const D = Math.hypot(s, d);
      R = Y = Math.max(Math.min(Math.hypot(w[0] - B[0] - y, w[1] - B[1] - X) / D, 1 / s, 1 / d), c / s, G / d);
    } else W ? R = eI(Math.abs(w[0] - B[0] - y), c, 1) / s : Y = eI(Math.abs(w[1] - B[1] - X), G, 1) / d;
    const K = F._round(s * R), S = F._round(d * Y);
    n = o(...h(K, S));
    const p = V - n[0], r = N - n[1];
    this.#G ||= [this.x, this.y, this.width, this.height], this.width = K, this.height = S, this.x = p, this.y = r, this.setDims(), this.fixAndSetPosition(), this._onResizing();
  }
  _onResizing() {
  }
  altTextFinish() {
    this.#A?.finish();
  }
  get toolbarButtons() {
    return null;
  }
  async addEditToolbar() {
    if (this._editToolbar || this.#B)
      return this._editToolbar;
    this._editToolbar = new Tg(this), this.div.append(this._editToolbar.render());
    const {
      toolbarButtons: I
    } = this;
    if (I)
      for (const [g, C] of I)
        await this._editToolbar.addButton(g, C);
    return this.hasComment || this._editToolbar.addButton("comment", this.addCommentButton()), this._editToolbar.addButton("delete"), this._editToolbar;
  }
  addCommentButtonInToolbar() {
    this._editToolbar?.addButtonBefore("comment", this.addCommentButton(), ".deleteButton");
  }
  removeCommentButtonFromToolbar() {
    this._editToolbar?.removeButton("comment");
  }
  removeEditToolbar() {
    this._editToolbar?.remove(), this._editToolbar = null, this.#A?.destroy();
  }
  addContainer(I) {
    const g = this._editToolbar?.div;
    g ? g.before(I) : this.div.append(I);
  }
  getClientDimensions() {
    return this.div.getBoundingClientRect();
  }
  createAltText() {
    return this.#A || (zI.initialize(F._l10n), this.#A = new zI(this), this.#I && (this.#A.data = this.#I, this.#I = null)), this.#A;
  }
  get altTextData() {
    return this.#A?.data;
  }
  set altTextData(I) {
    this.#A && (this.#A.data = I);
  }
  get guessedAltText() {
    return this.#A?.guessedText;
  }
  async setGuessedAltText(I) {
    await this.#A?.setGuessedText(I);
  }
  serializeAltText(I) {
    return this.#A?.serialize(I);
  }
  hasAltText() {
    return !!this.#A && !this.#A.isEmpty();
  }
  hasAltTextData() {
    return this.#A?.hasData() ?? !1;
  }
  focusCommentButton() {
    this.#C?.focusButton();
  }
  addCommentButton() {
    return this.#C ||= new sC(this);
  }
  addStandaloneCommentButton() {
    if (this.#i) {
      this._uiManager.isEditingMode() && this.#i.classList.remove("hidden");
      return;
    }
    this.hasComment && (this.#i = this.#C.renderForStandalone(), this.div.append(this.#i));
  }
  removeStandaloneCommentButton() {
    this.#C.removeStandaloneCommentButton(), this.#i = null;
  }
  hideStandaloneCommentButton() {
    this.#i?.classList.add("hidden");
  }
  get comment() {
    const {
      data: {
        richText: I,
        text: g,
        date: C,
        deleted: A
      }
    } = this.#C;
    return {
      text: g,
      richText: I,
      date: C,
      deleted: A,
      color: this.getNonHCMColor(),
      opacity: this.opacity ?? 1
    };
  }
  set comment(I) {
    this.#C ||= new sC(this), this.#C.data = I, this.hasComment ? (this.removeCommentButtonFromToolbar(), this.addStandaloneCommentButton(), this._uiManager.updateComment(this)) : (this.addCommentButtonInToolbar(), this.removeStandaloneCommentButton(), this._uiManager.removeComment(this));
  }
  setCommentData({
    comment: I,
    popupRef: g,
    richText: C
  }) {
    if (!g || (this.#C ||= new sC(this), this.#C.setInitialText(I, C), !this.annotationElementId))
      return;
    const A = this._uiManager.getAndRemoveDataFromAnnotationStorage(this.annotationElementId);
    A && this.updateFromAnnotationLayer(A);
  }
  get hasEditedComment() {
    return this.#C?.hasBeenEdited();
  }
  get hasDeletedComment() {
    return this.#C?.isDeleted();
  }
  get hasComment() {
    return !!this.#C && !this.#C.isEmpty() && !this.#C.isDeleted();
  }
  async editComment(I) {
    this.#C ||= new sC(this), this.#C.edit(I);
  }
  toggleComment(I, g = void 0) {
    this.hasComment && this._uiManager.toggleComment(this, I, g);
  }
  setSelectedCommentButton(I) {
    this.#C.setSelectedButton(I);
  }
  addComment(I) {
    if (this.hasEditedComment) {
      const [, , , A] = I.rect, [i] = this.pageDimensions, [l] = this.pageTranslation, s = l + i + 1, d = A - 100, c = s + 180;
      I.popup = {
        contents: this.comment.text,
        deleted: this.comment.deleted,
        rect: [s, d, c, A]
      };
    }
  }
  updateFromAnnotationLayer({
    popup: {
      contents: I,
      deleted: g
    }
  }) {
    this.#C.data = g ? null : I;
  }
  get parentBoundingClientRect() {
    return this.parent.boundingClientRect;
  }
  render() {
    const I = this.div = document.createElement("div");
    I.setAttribute("data-editor-rotation", (360 - this.rotation) % 360), I.className = this.name, I.setAttribute("id", this.id), I.tabIndex = this.#l ? -1 : 0, I.setAttribute("role", "application"), this.defaultL10nId && I.setAttribute("data-l10n-id", this.defaultL10nId), this._isVisible || I.classList.add("hidden"), this.setInForeground(), this.#j();
    const [g, C] = this.parentDimensions;
    this.parentRotation % 180 !== 0 && (I.style.maxWidth = `${(100 * C / g).toFixed(2)}%`, I.style.maxHeight = `${(100 * g / C).toFixed(2)}%`);
    const [A, i] = this.getInitialTranslation();
    return this.translate(A, i), Zl(this, I, ["keydown", "pointerdown", "dblclick"]), this.isResizable && this._uiManager._supportsPinchToZoom && (this.#R ||= new cl({
      container: I,
      isPinchingDisabled: () => !this.isSelected,
      onPinchStart: this.#x.bind(this),
      onPinching: this.#H.bind(this),
      onPinchEnd: this.#V.bind(this),
      signal: this._uiManager._signal
    })), this.addStandaloneCommentButton(), this._uiManager._editorUndoBar?.hide(), I;
  }
  #x() {
    this.#o = {
      savedX: this.x,
      savedY: this.y,
      savedWidth: this.width,
      savedHeight: this.height
    }, this.#A?.toggle(!1), this.parent.togglePointerEvents(!1);
  }
  #H(I, g, C) {
    let i = 0.7 * (C / g) + 1 - 0.7;
    if (i === 1)
      return;
    const l = this.#X(this.rotation), s = (V, N) => [l[0] * V + l[2] * N, l[1] * V + l[3] * N], [d, c] = this.parentDimensions, G = this.x, b = this.y, o = this.width, m = this.height, e = F.MIN_SIZE / d, a = F.MIN_SIZE / c;
    i = Math.max(Math.min(i, 1 / o, 1 / m), e / o, a / m);
    const h = F._round(o * i), t = F._round(m * i);
    if (h === o && t === m)
      return;
    this.#G ||= [G, b, o, m];
    const W = s(o / 2, m / 2), B = F._round(G + W[0]), w = F._round(b + W[1]), n = s(h / 2, t / 2);
    this.x = B - n[0], this.y = w - n[1], this.width = h, this.height = t, this.setDims(), this.fixAndSetPosition(), this._onResizing();
  }
  #V() {
    this.#A?.toggle(!0), this.parent.togglePointerEvents(!0), this.#F();
  }
  pointerdown(I) {
    const {
      isMac: g
    } = GI.platform;
    if (I.button !== 0 || I.ctrlKey && g) {
      I.preventDefault();
      return;
    }
    if (this.#a = !0, this._isDraggable) {
      this.#r(I);
      return;
    }
    this.#D(I);
  }
  #D(I) {
    const {
      isMac: g
    } = GI.platform;
    I.ctrlKey && !g || I.shiftKey || I.metaKey && g ? this.parent.toggleSelected(this) : this.parent.setSelected(this);
  }
  #r(I) {
    const {
      isSelected: g
    } = this;
    this._uiManager.setUpDragSession();
    let C = !1;
    const A = new AbortController(), i = this._uiManager.combinedSignal(A), l = {
      capture: !0,
      passive: !1,
      signal: i
    }, s = (c) => {
      A.abort(), this.#s = null, this.#a = !1, this._uiManager.endDragSession() || this.#D(c), C && this._onStopDragging();
    };
    g && (this.#N = I.clientX, this.#w = I.clientY, this.#s = I.pointerId, this.#d = I.pointerType, window.addEventListener("pointermove", (c) => {
      C || (C = !0, this._uiManager.toggleComment(this, !0, !1), this._onStartDragging());
      const {
        clientX: G,
        clientY: b,
        pointerId: o
      } = c;
      if (o !== this.#s) {
        II(c);
        return;
      }
      const [m, e] = this.screenToPageTranslation(G - this.#N, b - this.#w);
      this.#N = G, this.#w = b, this._uiManager.dragSelectedEditors(m, e);
    }, l), window.addEventListener("touchmove", II, l), window.addEventListener("pointerdown", (c) => {
      c.pointerType === this.#d && (this.#R || c.isPrimary) && s(c), II(c);
    }, l));
    const d = (c) => {
      if (!this.#s || this.#s === c.pointerId) {
        s(c);
        return;
      }
      II(c);
    };
    window.addEventListener("pointerup", d, {
      signal: i
    }), window.addEventListener("blur", d, {
      signal: i
    });
  }
  _onStartDragging() {
  }
  _onStopDragging() {
  }
  moveInDOM() {
    this.#h && clearTimeout(this.#h), this.#h = setTimeout(() => {
      this.#h = null, this.parent?.moveEditorInDOM(this);
    }, 0);
  }
  _setParentAndPosition(I, g, C) {
    I.changeParent(this), this.x = g, this.y = C, this.fixAndSetPosition(), this._onTranslated();
  }
  getRect(I, g, C = this.rotation) {
    const A = this.parentScale, [i, l] = this.pageDimensions, [s, d] = this.pageTranslation, c = I / A, G = g / A, b = this.x * i, o = this.y * l, m = this.width * i, e = this.height * l;
    switch (C) {
      case 0:
        return [b + c + s, l - o - G - e + d, b + c + m + s, l - o - G + d];
      case 90:
        return [b + G + s, l - o + c + d, b + G + e + s, l - o + c + m + d];
      case 180:
        return [b - c - m + s, l - o + G + d, b - c + s, l - o + G + e + d];
      case 270:
        return [b - G - e + s, l - o - c - m + d, b - G + s, l - o - c + d];
      default:
        throw new Error("Invalid rotation");
    }
  }
  getRectInCurrentCoords(I, g) {
    const [C, A, i, l] = I, s = i - C, d = l - A;
    switch (this.rotation) {
      case 0:
        return [C, g - l, s, d];
      case 90:
        return [C, g - A, d, s];
      case 180:
        return [i, g - A, s, d];
      case 270:
        return [i, g - l, d, s];
      default:
        throw new Error("Invalid rotation");
    }
  }
  getPDFRect() {
    return this.getRect(0, 0);
  }
  getNonHCMColor() {
    return this.color && F._colorManager.convert(this._uiManager.getNonHCMColor(this.color));
  }
  onUpdatedColor() {
    this.#C?.onUpdatedColor();
  }
  getData() {
    const {
      comment: {
        text: I,
        color: g,
        date: C,
        opacity: A,
        deleted: i,
        richText: l
      },
      uid: s,
      pageIndex: d,
      creationDate: c,
      modificationDate: G
    } = this;
    return {
      id: s,
      pageIndex: d,
      rect: this.getPDFRect(),
      richText: l,
      contentsObj: {
        str: I
      },
      creationDate: c,
      modificationDate: C || G,
      popupRef: !i,
      color: g,
      opacity: A
    };
  }
  onceAdded(I) {
  }
  isEmpty() {
    return !1;
  }
  enableEditMode() {
    return this.isInEditMode() ? !1 : (this.parent.setEditingState(!1), this.#B = !0, !0);
  }
  disableEditMode() {
    return this.isInEditMode() ? (this.parent.setEditingState(!0), this.#B = !1, !0) : !1;
  }
  isInEditMode() {
    return this.#B;
  }
  shouldGetKeyboardEvents() {
    return this.#W;
  }
  needsToBeRebuilt() {
    return this.div && !this.isAttachedToDOM;
  }
  get isOnScreen() {
    const {
      top: I,
      left: g,
      bottom: C,
      right: A
    } = this.getClientDimensions(), {
      innerHeight: i,
      innerWidth: l
    } = window;
    return g < l && A > 0 && I < i && C > 0;
  }
  #j() {
    if (this.#m || !this.div)
      return;
    this.#m = new AbortController();
    const I = this._uiManager.combinedSignal(this.#m);
    this.div.addEventListener("focusin", this.focusin.bind(this), {
      signal: I
    }), this.div.addEventListener("focusout", this.focusout.bind(this), {
      signal: I
    });
  }
  rebuild() {
    this.#j();
  }
  rotate(I) {
  }
  resize() {
  }
  serializeDeleted() {
    return {
      id: this.annotationElementId,
      deleted: !0,
      pageIndex: this.pageIndex,
      popupRef: this._initialData?.popupRef || ""
    };
  }
  serialize(I = !1, g = null) {
    return {
      annotationType: this.mode,
      pageIndex: this.pageIndex,
      rect: this.getPDFRect(),
      rotation: this.rotation,
      structTreeParentId: this._structTreeParentId,
      popupRef: this._initialData?.popupRef || ""
    };
  }
  static async deserialize(I, g, C) {
    const A = new this.prototype.constructor({
      parent: g,
      id: g.getNextId(),
      uiManager: C,
      annotationElementId: I.annotationElementId,
      creationDate: I.creationDate,
      modificationDate: I.modificationDate
    });
    A.rotation = I.rotation, A.#I = I.accessibilityData, A._isCopy = I.isCopy || !1;
    const [i, l] = A.pageDimensions, [s, d, c, G] = A.getRectInCurrentCoords(I.rect, l);
    return A.x = s / i, A.y = d / l, A.width = c / i, A.height = G / l, A;
  }
  get hasBeenModified() {
    return !!this.annotationElementId && (this.deleted || this.serialize() !== null);
  }
  remove() {
    if (this.#m?.abort(), this.#m = null, this.isEmpty() || this.commit(), this.parent ? this.parent.remove(this) : this._uiManager.removeEditor(this), this.#h && (clearTimeout(this.#h), this.#h = null), this.#J(), this.removeEditToolbar(), this.#n) {
      for (const I of this.#n.values())
        clearTimeout(I);
      this.#n = null;
    }
    this.parent = null, this.#R?.destroy(), this.#R = null;
  }
  get isResizable() {
    return !1;
  }
  makeResizable() {
    this.isResizable && (this.#p(), this.#c.classList.remove("hidden"));
  }
  get toolbarPosition() {
    return null;
  }
  get commentButtonPosition() {
    return this._uiManager.direction === "ltr" ? [1, 0] : [0, 0];
  }
  get commentButtonPositionInPage() {
    const {
      commentButtonPosition: [I, g]
    } = this, [C, A, i, l] = this.getPDFRect();
    return [F._round(C + (i - C) * I), F._round(A + (l - A) * (1 - g))];
  }
  get commentButtonColor() {
    return this._uiManager.makeCommentColor(this.getNonHCMColor(), this.opacity);
  }
  get commentPopupPosition() {
    return this.#C.commentPopupPositionInLayer;
  }
  set commentPopupPosition(I) {
    this.#C.commentPopupPositionInLayer = I;
  }
  hasDefaultPopupPosition() {
    return this.#C.hasDefaultPopupPosition();
  }
  get commentButtonWidth() {
    return this.#C.commentButtonWidth;
  }
  get elementBeforePopup() {
    return this.div;
  }
  setCommentButtonStates(I) {
    this.#C.setCommentButtonStates(I);
  }
  keydown(I) {
    if (!this.isResizable || I.target !== this.div || I.key !== "Enter")
      return;
    this._uiManager.setSelected(this), this.#o = {
      savedX: this.x,
      savedY: this.y,
      savedWidth: this.width,
      savedHeight: this.height
    };
    const g = this.#c.children;
    if (!this.#g) {
      this.#g = Array.from(g);
      const l = this.#P.bind(this), s = this.#k.bind(this), d = this._uiManager._signal;
      for (const c of this.#g) {
        const G = c.getAttribute("data-resizer-name");
        c.setAttribute("role", "spinbutton"), c.addEventListener("keydown", l, {
          signal: d
        }), c.addEventListener("blur", s, {
          signal: d
        }), c.addEventListener("focus", this.#v.bind(this, G), {
          signal: d
        }), c.setAttribute("data-l10n-id", F._l10nResizer[G]);
      }
    }
    const C = this.#g[0];
    let A = 0;
    for (const l of g) {
      if (l === C)
        break;
      A++;
    }
    const i = (360 - this.rotation + this.parentRotation) % 360 / 90 * (this.#g.length / 4);
    if (i !== A) {
      if (i < A)
        for (let s = 0; s < A - i; s++)
          this.#c.append(this.#c.firstChild);
      else if (i > A)
        for (let s = 0; s < i - A; s++)
          this.#c.firstChild.before(this.#c.lastChild);
      let l = 0;
      for (const s of g) {
        const c = this.#g[l++].getAttribute("data-resizer-name");
        s.setAttribute("data-l10n-id", F._l10nResizer[c]);
      }
    }
    this.#Q(0), this.#W = !0, this.#c.firstChild.focus({
      focusVisible: !0
    }), I.preventDefault(), I.stopImmediatePropagation();
  }
  #P(I) {
    F._resizerKeyboardManager.exec(this, I);
  }
  #k(I) {
    this.#W && I.relatedTarget?.parentNode !== this.#c && this.#J();
  }
  #v(I) {
    this.#t = this.#W ? I : "";
  }
  #Q(I) {
    if (this.#g)
      for (const g of this.#g)
        g.tabIndex = I;
  }
  _resizeWithKeyboard(I, g) {
    this.#W && this.#z(this.#t, {
      deltaX: I,
      deltaY: g,
      fromKeyboard: !0
    });
  }
  #J() {
    this.#W = !1, this.#Q(-1), this.#F();
  }
  _stopResizingWithKeyboard() {
    this.#J(), this.div.focus();
  }
  select() {
    if (this.isSelected && this._editToolbar) {
      this._editToolbar.show();
      return;
    }
    if (this.isSelected = !0, this.makeResizable(), this.div?.classList.add("selectedEditor"), !this._editToolbar) {
      this.addEditToolbar().then(() => {
        this.div?.classList.contains("selectedEditor") && this._editToolbar?.show();
      });
      return;
    }
    this._editToolbar?.show(), this.#A?.toggleAltTextBadge(!1);
  }
  focus() {
    this.div && !this.div.contains(document.activeElement) && setTimeout(() => this.div?.focus({
      preventScroll: !0
    }), 0);
  }
  unselect() {
    this.isSelected && (this.isSelected = !1, this.#c?.classList.add("hidden"), this.div?.classList.remove("selectedEditor"), this.div?.contains(document.activeElement) && this._uiManager.currentLayer.div.focus({
      preventScroll: !0
    }), this._editToolbar?.hide(), this.#A?.toggleAltTextBadge(!0), this.hasComment && this._uiManager.toggleComment(this, !1, !1));
  }
  updateParams(I, g) {
  }
  disableEditing() {
  }
  enableEditing() {
  }
  get canChangeContent() {
    return !1;
  }
  enterInEditMode() {
    this.canChangeContent && (this.enableEditMode(), this.div.focus());
  }
  dblclick(I) {
    I.target.nodeName !== "BUTTON" && (this.enterInEditMode(), this.parent.updateToolbar({
      mode: this.constructor._editorType,
      editId: this.id
    }));
  }
  getElementForAltText() {
    return this.div;
  }
  get contentDiv() {
    return this.div;
  }
  get isEditing() {
    return this.#e;
  }
  set isEditing(I) {
    this.#e = I, this.parent && (I ? (this.parent.setSelected(this), this.parent.setActiveEditor(this)) : this.parent.setActiveEditor(null));
  }
  static get MIN_SIZE() {
    return 16;
  }
  static canCreateNewEmptyEditor() {
    return !0;
  }
  get telemetryInitialData() {
    return {
      action: "added"
    };
  }
  get telemetryFinalData() {
    return null;
  }
  _reportTelemetry(I, g = !1) {
    if (g) {
      this.#n ||= /* @__PURE__ */ new Map();
      const {
        action: C
      } = I;
      let A = this.#n.get(C);
      A && clearTimeout(A), A = setTimeout(() => {
        this._reportTelemetry(I), this.#n.delete(C), this.#n.size === 0 && (this.#n = null);
      }, F._telemetryTimeout), this.#n.set(C, A);
      return;
    }
    I.type ||= this.editorType, this._uiManager._eventBus.dispatch("reporttelemetry", {
      source: this,
      details: {
        type: "editing",
        data: I
      }
    });
  }
  show(I = this._isVisible) {
    this.div.classList.toggle("hidden", !I), this._isVisible = I;
  }
  enable() {
    this.div && (this.div.tabIndex = 0), this.#l = !1;
  }
  disable() {
    this.div && (this.div.tabIndex = -1), this.#l = !0;
  }
  updateFakeAnnotationElement(I) {
    if (!this.#b && !this.deleted) {
      this.#b = I.addFakeAnnotation(this);
      return;
    }
    if (this.deleted) {
      this.#b.remove(), this.#b = null;
      return;
    }
    (this.hasEditedComment || this._hasBeenMoved || this._hasBeenResized) && this.#b.updateEdited({
      rect: this.getPDFRect(),
      popup: this.comment
    });
  }
  renderAnnotationElement(I) {
    if (this.deleted)
      return I.hide(), null;
    let g = I.container.querySelector(".annotationContent");
    if (!g)
      g = document.createElement("div"), g.classList.add("annotationContent", this.editorType), I.container.prepend(g);
    else if (g.nodeName === "CANVAS") {
      const C = g;
      g = document.createElement("div"), g.classList.add("annotationContent", this.editorType), C.before(g);
    }
    return g;
  }
  resetAnnotationElement(I) {
    const {
      firstChild: g
    } = I.container;
    g?.nodeName === "DIV" && g.classList.contains("annotationContent") && g.remove();
  }
}
class Ks extends F {
  constructor(I) {
    super(I), this.annotationElementId = I.annotationElementId, this.deleted = !0;
  }
  serialize() {
    return this.serializeDeleted();
  }
}
const gi = 3285377520, VI = 4294901760, KI = 65535;
class bl {
  constructor(I) {
    this.h1 = I ? I & 4294967295 : gi, this.h2 = I ? I & 4294967295 : gi;
  }
  update(I) {
    let g, C;
    if (typeof I == "string") {
      g = new Uint8Array(I.length * 2), C = 0;
      for (let a = 0, h = I.length; a < h; a++) {
        const t = I.charCodeAt(a);
        t <= 255 ? g[C++] = t : (g[C++] = t >>> 8, g[C++] = t & 255);
      }
    } else if (ArrayBuffer.isView(I))
      g = I.slice(), C = g.byteLength;
    else
      throw new Error("Invalid data format, must be a string or TypedArray.");
    const A = C >> 2, i = C - A * 4, l = new Uint32Array(g.buffer, 0, A);
    let s = 0, d = 0, c = this.h1, G = this.h2;
    const b = 3432918353, o = 461845907, m = b & KI, e = o & KI;
    for (let a = 0; a < A; a++)
      a & 1 ? (s = l[a], s = s * b & VI | s * m & KI, s = s << 15 | s >>> 17, s = s * o & VI | s * e & KI, c ^= s, c = c << 13 | c >>> 19, c = c * 5 + 3864292196) : (d = l[a], d = d * b & VI | d * m & KI, d = d << 15 | d >>> 17, d = d * o & VI | d * e & KI, G ^= d, G = G << 13 | G >>> 19, G = G * 5 + 3864292196);
    switch (s = 0, i) {
      case 3:
        s ^= g[A * 4 + 2] << 16;
      case 2:
        s ^= g[A * 4 + 1] << 8;
      case 1:
        s ^= g[A * 4], s = s * b & VI | s * m & KI, s = s << 15 | s >>> 17, s = s * o & VI | s * e & KI, A & 1 ? c ^= s : G ^= s;
    }
    this.h1 = c, this.h2 = G;
  }
  hexdigest() {
    let I = this.h1, g = this.h2;
    return I ^= g >>> 1, I = I * 3981806797 & VI | I * 36045 & KI, g = g * 4283543511 & VI | ((g << 16 | I >>> 16) * 2950163797 & VI) >>> 16, I ^= g >>> 1, I = I * 444984403 & VI | I * 60499 & KI, g = g * 3301882366 & VI | ((g << 16 | I >>> 16) * 3120437893 & VI) >>> 16, I ^= g >>> 1, (I >>> 0).toString(16).padStart(8, "0") + (g >>> 0).toString(16).padStart(8, "0");
  }
}
const bA = Object.freeze({
  map: null,
  hash: "",
  transfer: void 0
});
class KA {
  #I = !1;
  #g = null;
  #A = null;
  #C = /* @__PURE__ */ new Map();
  constructor() {
    this.onSetModified = null, this.onResetModified = null, this.onAnnotationEditor = null;
  }
  getValue(I, g) {
    const C = this.#C.get(I);
    return C === void 0 ? g : Object.assign(g, C);
  }
  getRawValue(I) {
    return this.#C.get(I);
  }
  remove(I) {
    const g = this.#C.get(I);
    if (g !== void 0 && (g instanceof F && this.#A.delete(g.annotationElementId), this.#C.delete(I), this.#C.size === 0 && this.resetModified(), typeof this.onAnnotationEditor == "function")) {
      for (const C of this.#C.values())
        if (C instanceof F)
          return;
      this.onAnnotationEditor(null);
    }
  }
  setValue(I, g) {
    const C = this.#C.get(I);
    let A = !1;
    if (C !== void 0)
      for (const [i, l] of Object.entries(g))
        C[i] !== l && (A = !0, C[i] = l);
    else
      A = !0, this.#C.set(I, g);
    A && this.#i(), g instanceof F && ((this.#A ||= /* @__PURE__ */ new Map()).set(g.annotationElementId, g), typeof this.onAnnotationEditor == "function" && this.onAnnotationEditor(g.constructor._type));
  }
  has(I) {
    return this.#C.has(I);
  }
  get size() {
    return this.#C.size;
  }
  #i() {
    this.#I || (this.#I = !0, typeof this.onSetModified == "function" && this.onSetModified());
  }
  resetModified() {
    this.#I && (this.#I = !1, typeof this.onResetModified == "function" && this.onResetModified());
  }
  get print() {
    return new ol(this);
  }
  get serializable() {
    if (this.#C.size === 0)
      return bA;
    const I = /* @__PURE__ */ new Map(), g = new bl(), C = [], A = /* @__PURE__ */ Object.create(null);
    let i = !1;
    for (const [l, s] of this.#C) {
      const d = s instanceof F ? s.serialize(!1, A) : s;
      d && (I.set(l, d), g.update(`${l}:${JSON.stringify(d)}`), i ||= !!d.bitmap);
    }
    if (i)
      for (const l of I.values())
        l.bitmap && C.push(l.bitmap);
    return I.size > 0 ? {
      map: I,
      hash: g.hexdigest(),
      transfer: C
    } : bA;
  }
  get editorStats() {
    let I = null;
    const g = /* @__PURE__ */ new Map();
    let C = 0, A = 0;
    for (const i of this.#C.values()) {
      if (!(i instanceof F)) {
        i.popup && (i.popup.deleted ? A += 1 : C += 1);
        continue;
      }
      i.isCommentDeleted ? A += 1 : i.hasEditedComment && (C += 1);
      const l = i.telemetryFinalData;
      if (!l)
        continue;
      const {
        type: s
      } = l;
      g.has(s) || g.set(s, Object.getPrototypeOf(i).constructor), I ||= /* @__PURE__ */ Object.create(null);
      const d = I[s] ||= /* @__PURE__ */ new Map();
      for (const [c, G] of Object.entries(l)) {
        if (c === "type")
          continue;
        let b = d.get(c);
        b || (b = /* @__PURE__ */ new Map(), d.set(c, b));
        const o = b.get(G) ?? 0;
        b.set(G, o + 1);
      }
    }
    if ((A > 0 || C > 0) && (I ||= /* @__PURE__ */ Object.create(null), I.comments = {
      deleted: A,
      edited: C
    }), !I)
      return null;
    for (const [i, l] of g)
      I[i] = l.computeTelemetryFinalData(I[i]);
    return I;
  }
  resetModifiedIds() {
    this.#g = null;
  }
  updateEditor(I, g) {
    const C = this.#A?.get(I);
    return C ? (C.updateFromAnnotationLayer(g), !0) : !1;
  }
  getEditor(I) {
    return this.#A?.get(I) || null;
  }
  get modifiedIds() {
    if (this.#g)
      return this.#g;
    const I = [];
    if (this.#A)
      for (const g of this.#A.values())
        g.serialize() && I.push(g.annotationElementId);
    return this.#g = {
      ids: new Set(I),
      hash: I.join(",")
    };
  }
  [Symbol.iterator]() {
    return this.#C.entries();
  }
}
class ol extends KA {
  #I;
  constructor(I) {
    super();
    const {
      map: g,
      hash: C,
      transfer: A
    } = I.serializable, i = structuredClone(g, A ? {
      transfer: A
    } : null);
    this.#I = {
      map: i,
      hash: C,
      transfer: A
    };
  }
  get print() {
    f("Should not call PrintAnnotationStorage.print");
  }
  get serializable() {
    return this.#I;
  }
  get modifiedIds() {
    return T(this, "modifiedIds", {
      ids: /* @__PURE__ */ new Set(),
      hash: ""
    });
  }
}
class Ss {
  #I = /* @__PURE__ */ new Set();
  constructor({
    ownerDocument: I = globalThis.document,
    styleElement: g = null
  }) {
    this._document = I, this.nativeFontFaces = /* @__PURE__ */ new Set(), this.styleElement = null, this.loadingRequests = [], this.loadTestFontId = 0;
  }
  addNativeFontFace(I) {
    this.nativeFontFaces.add(I), this._document.fonts.add(I);
  }
  removeNativeFontFace(I) {
    this.nativeFontFaces.delete(I), this._document.fonts.delete(I);
  }
  insertRule(I) {
    this.styleElement || (this.styleElement = this._document.createElement("style"), this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));
    const g = this.styleElement.sheet;
    g.insertRule(I, g.cssRules.length);
  }
  clear() {
    for (const I of this.nativeFontFaces)
      this._document.fonts.delete(I);
    this.nativeFontFaces.clear(), this.#I.clear(), this.styleElement && (this.styleElement.remove(), this.styleElement = null);
  }
  async loadSystemFont({
    systemFontInfo: I,
    disableFontFace: g,
    _inspectFont: C
  }) {
    if (!(!I || this.#I.has(I.loadedName))) {
      if (Q(!g, "loadSystemFont shouldn't be called when `disableFontFace` is set."), this.isFontLoadingAPISupported) {
        const {
          loadedName: A,
          src: i,
          style: l
        } = I, s = new FontFace(A, i, l);
        this.addNativeFontFace(s);
        try {
          await s.load(), this.#I.add(A), C?.(I);
        } catch {
          L(`Cannot load system font: ${I.baseFontName}, installing it could help to improve PDF rendering.`), this.removeNativeFontFace(s);
        }
        return;
      }
      f("Not implemented: loadSystemFont without the Font Loading API.");
    }
  }
  async bind(I) {
    if (I.attached || I.missingFile && !I.systemFontInfo)
      return;
    if (I.attached = !0, I.systemFontInfo) {
      await this.loadSystemFont(I);
      return;
    }
    if (this.isFontLoadingAPISupported) {
      const C = I.createNativeFontFace();
      if (C) {
        this.addNativeFontFace(C);
        try {
          await C.loaded;
        } catch (A) {
          throw L(`Failed to load font '${C.family}': '${A}'.`), I.disableFontFace = !0, A;
        }
      }
      return;
    }
    const g = I.createFontFaceRule();
    if (g) {
      if (this.insertRule(g), this.isSyncFontLoadingSupported)
        return;
      await new Promise((C) => {
        const A = this._queueLoadingCallback(C);
        this._prepareFontLoadEvent(I, A);
      });
    }
  }
  get isFontLoadingAPISupported() {
    const I = !!this._document?.fonts;
    return T(this, "isFontLoadingAPISupported", I);
  }
  get isSyncFontLoadingSupported() {
    return T(this, "isSyncFontLoadingSupported", aI || GI.platform.isFirefox);
  }
  _queueLoadingCallback(I) {
    function g() {
      for (Q(!A.done, "completeRequest() cannot be called twice."), A.done = !0; C.length > 0 && C[0].done; ) {
        const i = C.shift();
        setTimeout(i.callback, 0);
      }
    }
    const {
      loadingRequests: C
    } = this, A = {
      done: !1,
      complete: g,
      callback: I
    };
    return C.push(A), A;
  }
  get _loadTestFont() {
    const I = atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");
    return T(this, "_loadTestFont", I);
  }
  _prepareFontLoadEvent(I, g) {
    function C(w, n) {
      return w.charCodeAt(n) << 24 | w.charCodeAt(n + 1) << 16 | w.charCodeAt(n + 2) << 8 | w.charCodeAt(n + 3) & 255;
    }
    function A(w, n, V, N) {
      const R = w.substring(0, n), Y = w.substring(n + V);
      return R + N + Y;
    }
    let i, l;
    const s = this._document.createElement("canvas");
    s.width = 1, s.height = 1;
    const d = s.getContext("2d");
    let c = 0;
    function G(w, n) {
      if (++c > 30) {
        L("Load test font never loaded."), n();
        return;
      }
      if (d.font = "30px " + w, d.fillText(".", 0, 20), d.getImageData(0, 0, 1, 1).data[3] > 0) {
        n();
        return;
      }
      setTimeout(G.bind(null, w, n));
    }
    const b = `lt${Date.now()}${this.loadTestFontId++}`;
    let o = this._loadTestFont;
    o = A(o, 976, b.length, b);
    const e = 16, a = 1482184792;
    let h = C(o, e);
    for (i = 0, l = b.length - 3; i < l; i += 4)
      h = h - a + C(b, i) | 0;
    i < b.length && (h = h - a + C(b + "XXX", i) | 0), o = A(o, e, 4, ms(h));
    const t = `url(data:font/opentype;base64,${btoa(o)});`, W = `@font-face {font-family:"${b}";src:${t}}`;
    this.insertRule(W);
    const B = this._document.createElement("div");
    B.style.visibility = "hidden", B.style.width = B.style.height = "10px", B.style.position = "absolute", B.style.top = B.style.left = "0px";
    for (const w of [I.loadedName, b]) {
      const n = this._document.createElement("span");
      n.textContent = "Hi", n.style.fontFamily = w, B.append(n);
    }
    this._document.body.append(B), G(b, () => {
      B.remove(), g.complete();
    });
  }
}
class ps {
  #I;
  constructor(I, g = null, C, A) {
    this.compiledGlyphs = /* @__PURE__ */ Object.create(null), this.#I = I, this._inspectFont = g, C && Object.assign(this, C), A && (this.charProcOperatorList = A);
  }
  createNativeFontFace() {
    if (!this.data || this.disableFontFace)
      return null;
    let I;
    if (!this.cssFontInfo)
      I = new FontFace(this.loadedName, this.data, {});
    else {
      const g = {
        weight: this.cssFontInfo.fontWeight
      };
      this.cssFontInfo.italicAngle && (g.style = `oblique ${this.cssFontInfo.italicAngle}deg`), I = new FontFace(this.cssFontInfo.fontFamily, this.data, g);
    }
    return this._inspectFont?.(this), I;
  }
  createFontFaceRule() {
    if (!this.data || this.disableFontFace)
      return null;
    const I = `url(data:${this.mimetype};base64,${ll(this.data)});`;
    let g;
    if (!this.cssFontInfo)
      g = `@font-face {font-family:"${this.loadedName}";src:${I}}`;
    else {
      let C = `font-weight: ${this.cssFontInfo.fontWeight};`;
      this.cssFontInfo.italicAngle && (C += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`), g = `@font-face {font-family:"${this.cssFontInfo.fontFamily}";${C}src:${I}}`;
    }
    return this._inspectFont?.(this, I), g;
  }
  getPathGenerator(I, g) {
    if (this.compiledGlyphs[g] !== void 0)
      return this.compiledGlyphs[g];
    const C = this.loadedName + "_path_" + g;
    let A;
    try {
      A = I.get(C);
    } catch (l) {
      L(`getPathGenerator - ignoring character: "${l}".`);
    }
    const i = new Path2D(A || "");
    return this.fontExtraProperties || I.delete(C), this.compiledGlyphs[g] = i;
  }
  get black() {
    return this.#I.black;
  }
  get bold() {
    return this.#I.bold;
  }
  get disableFontFace() {
    return this.#I.disableFontFace ?? !1;
  }
  get fontExtraProperties() {
    return this.#I.fontExtraProperties ?? !1;
  }
  get isInvalidPDFjsFont() {
    return this.#I.isInvalidPDFjsFont;
  }
  get isType3Font() {
    return this.#I.isType3Font;
  }
  get italic() {
    return this.#I.italic;
  }
  get missingFile() {
    return this.#I.missingFile;
  }
  get remeasure() {
    return this.#I.remeasure;
  }
  get vertical() {
    return this.#I.vertical;
  }
  get ascent() {
    return this.#I.ascent;
  }
  get defaultWidth() {
    return this.#I.defaultWidth;
  }
  get descent() {
    return this.#I.descent;
  }
  get bbox() {
    return this.#I.bbox;
  }
  get fontMatrix() {
    return this.#I.fontMatrix;
  }
  get fallbackName() {
    return this.#I.fallbackName;
  }
  get loadedName() {
    return this.#I.loadedName;
  }
  get mimetype() {
    return this.#I.mimetype;
  }
  get name() {
    return this.#I.name;
  }
  get data() {
    return this.#I.data;
  }
  clearData() {
    this.#I.clearData();
  }
  get cssFontInfo() {
    return this.#I.cssFontInfo;
  }
  get systemFontInfo() {
    return this.#I.systemFontInfo;
  }
  get defaultVMetrics() {
    return this.#I.defaultVMetrics;
  }
}
function Fs(Z) {
  if (Z instanceof URL)
    return Z.href;
  if (typeof Z == "string") {
    if (aI)
      return Z;
    const I = URL.parse(Z, window.location);
    if (I)
      return I.href;
  }
  throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.");
}
function zs(Z) {
  if (aI && typeof Buffer < "u" && Z instanceof Buffer)
    throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");
  if (Z instanceof Uint8Array && Z.byteLength === Z.buffer.byteLength)
    return Z;
  if (typeof Z == "string")
    return qg(Z);
  if (Z instanceof ArrayBuffer || ArrayBuffer.isView(Z) || typeof Z == "object" && !isNaN(Z?.length))
    return new Uint8Array(Z);
  throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.");
}
function dC(Z) {
  if (typeof Z != "string")
    return null;
  if (Z.endsWith("/"))
    return Z;
  throw new Error(`Invalid factory url: "${Z}" must include trailing slash.`);
}
const oA = (Z) => typeof Z == "object" && Number.isInteger(Z?.num) && Z.num >= 0 && Number.isInteger(Z?.gen) && Z.gen >= 0, Js = (Z) => typeof Z == "object" && typeof Z?.name == "string", Ls = Bs.bind(null, oA, Js);
class ks {
  #I = /* @__PURE__ */ new Map();
  #g = Promise.resolve();
  postMessage(I, g) {
    const C = {
      data: structuredClone(I, g ? {
        transfer: g
      } : null)
    };
    this.#g.then(() => {
      for (const [A] of this.#I)
        A.call(this, C);
    });
  }
  addEventListener(I, g, C = null) {
    let A = null;
    if (C?.signal instanceof AbortSignal) {
      const {
        signal: i
      } = C;
      if (i.aborted) {
        L("LoopbackPort - cannot use an `aborted` signal.");
        return;
      }
      const l = () => this.removeEventListener(I, g);
      A = () => i.removeEventListener("abort", l), i.addEventListener("abort", l);
    }
    this.#I.set(g, A);
  }
  removeEventListener(I, g) {
    this.#I.get(g)?.(), this.#I.delete(g);
  }
  terminate() {
    for (const [, I] of this.#I)
      I?.();
    this.#I.clear();
  }
}
const ZC = {
  DATA: 1,
  ERROR: 2
}, AI = {
  CANCEL: 1,
  CANCEL_COMPLETE: 2,
  CLOSE: 3,
  ENQUEUE: 4,
  ERROR: 5,
  PULL: 6,
  PULL_COMPLETE: 7,
  START_COMPLETE: 8
};
function Ci() {
}
function BI(Z) {
  if (Z instanceof Ig || Z instanceof lA || Z instanceof EA || Z instanceof uC || Z instanceof xC)
    return Z;
  switch (Z instanceof Error || typeof Z == "object" && Z !== null || f('wrapReason: Expected "reason" to be a (possibly cloned) Error.'), Z.name) {
    case "AbortException":
      return new Ig(Z.message);
    case "InvalidPDFException":
      return new lA(Z.message);
    case "PasswordException":
      return new EA(Z.message, Z.code);
    case "ResponseException":
      return new uC(Z.message, Z.status, Z.missing);
    case "UnknownErrorException":
      return new xC(Z.message, Z.details);
  }
  return new xC(Z.message, Z.toString());
}
class kg {
  #I = new AbortController();
  constructor(I, g, C) {
    this.sourceName = I, this.targetName = g, this.comObj = C, this.callbackId = 1, this.streamId = 1, this.streamSinks = /* @__PURE__ */ Object.create(null), this.streamControllers = /* @__PURE__ */ Object.create(null), this.callbackCapabilities = /* @__PURE__ */ Object.create(null), this.actionHandler = /* @__PURE__ */ Object.create(null), C.addEventListener("message", this.#g.bind(this), {
      signal: this.#I.signal
    });
  }
  #g({
    data: I
  }) {
    if (I.targetName !== this.sourceName)
      return;
    if (I.stream) {
      this.#C(I);
      return;
    }
    if (I.callback) {
      const C = I.callbackId, A = this.callbackCapabilities[C];
      if (!A)
        throw new Error(`Cannot resolve callback ${C}`);
      if (delete this.callbackCapabilities[C], I.callback === ZC.DATA)
        A.resolve(I.data);
      else if (I.callback === ZC.ERROR)
        A.reject(BI(I.reason));
      else
        throw new Error("Unexpected callback case");
      return;
    }
    const g = this.actionHandler[I.action];
    if (!g)
      throw new Error(`Unknown action from worker: ${I.action}`);
    if (I.callbackId) {
      const C = this.sourceName, A = I.sourceName, i = this.comObj;
      Promise.try(g, I.data).then(function(l) {
        i.postMessage({
          sourceName: C,
          targetName: A,
          callback: ZC.DATA,
          callbackId: I.callbackId,
          data: l
        });
      }, function(l) {
        i.postMessage({
          sourceName: C,
          targetName: A,
          callback: ZC.ERROR,
          callbackId: I.callbackId,
          reason: BI(l)
        });
      });
      return;
    }
    if (I.streamId) {
      this.#A(I);
      return;
    }
    g(I.data);
  }
  on(I, g) {
    const C = this.actionHandler;
    if (C[I])
      throw new Error(`There is already an actionName called "${I}"`);
    C[I] = g;
  }
  send(I, g, C) {
    this.comObj.postMessage({
      sourceName: this.sourceName,
      targetName: this.targetName,
      action: I,
      data: g
    }, C);
  }
  sendWithPromise(I, g, C) {
    const A = this.callbackId++, i = Promise.withResolvers();
    this.callbackCapabilities[A] = i;
    try {
      this.comObj.postMessage({
        sourceName: this.sourceName,
        targetName: this.targetName,
        action: I,
        callbackId: A,
        data: g
      }, C);
    } catch (l) {
      i.reject(l);
    }
    return i.promise;
  }
  sendWithStream(I, g, C, A) {
    const i = this.streamId++, l = this.sourceName, s = this.targetName, d = this.comObj;
    return new ReadableStream({
      start: (c) => {
        const G = Promise.withResolvers();
        return this.streamControllers[i] = {
          controller: c,
          startCall: G,
          pullCall: null,
          cancelCall: null,
          isClosed: !1
        }, d.postMessage({
          sourceName: l,
          targetName: s,
          action: I,
          streamId: i,
          data: g,
          desiredSize: c.desiredSize
        }, A), G.promise;
      },
      pull: (c) => {
        const G = Promise.withResolvers();
        return this.streamControllers[i].pullCall = G, d.postMessage({
          sourceName: l,
          targetName: s,
          stream: AI.PULL,
          streamId: i,
          desiredSize: c.desiredSize
        }), G.promise;
      },
      cancel: (c) => {
        Q(c instanceof Error, "cancel must have a valid reason");
        const G = Promise.withResolvers();
        return this.streamControllers[i].cancelCall = G, this.streamControllers[i].isClosed = !0, d.postMessage({
          sourceName: l,
          targetName: s,
          stream: AI.CANCEL,
          streamId: i,
          reason: BI(c)
        }), G.promise;
      }
    }, C);
  }
  #A(I) {
    const g = I.streamId, C = this.sourceName, A = I.sourceName, i = this.comObj, l = this, s = this.actionHandler[I.action], d = {
      enqueue(c, G = 1, b) {
        if (this.isCancelled)
          return;
        const o = this.desiredSize;
        this.desiredSize -= G, o > 0 && this.desiredSize <= 0 && (this.sinkCapability = Promise.withResolvers(), this.ready = this.sinkCapability.promise), i.postMessage({
          sourceName: C,
          targetName: A,
          stream: AI.ENQUEUE,
          streamId: g,
          chunk: c
        }, b);
      },
      close() {
        this.isCancelled || (this.isCancelled = !0, i.postMessage({
          sourceName: C,
          targetName: A,
          stream: AI.CLOSE,
          streamId: g
        }), delete l.streamSinks[g]);
      },
      error(c) {
        Q(c instanceof Error, "error must have a valid reason"), !this.isCancelled && (this.isCancelled = !0, i.postMessage({
          sourceName: C,
          targetName: A,
          stream: AI.ERROR,
          streamId: g,
          reason: BI(c)
        }));
      },
      sinkCapability: Promise.withResolvers(),
      onPull: null,
      onCancel: null,
      isCancelled: !1,
      desiredSize: I.desiredSize,
      ready: null
    };
    d.sinkCapability.resolve(), d.ready = d.sinkCapability.promise, this.streamSinks[g] = d, Promise.try(s, I.data, d).then(function() {
      i.postMessage({
        sourceName: C,
        targetName: A,
        stream: AI.START_COMPLETE,
        streamId: g,
        success: !0
      });
    }, function(c) {
      i.postMessage({
        sourceName: C,
        targetName: A,
        stream: AI.START_COMPLETE,
        streamId: g,
        reason: BI(c)
      });
    });
  }
  #C(I) {
    const g = I.streamId, C = this.sourceName, A = I.sourceName, i = this.comObj, l = this.streamControllers[g], s = this.streamSinks[g];
    switch (I.stream) {
      case AI.START_COMPLETE:
        I.success ? l.startCall.resolve() : l.startCall.reject(BI(I.reason));
        break;
      case AI.PULL_COMPLETE:
        I.success ? l.pullCall.resolve() : l.pullCall.reject(BI(I.reason));
        break;
      case AI.PULL:
        if (!s) {
          i.postMessage({
            sourceName: C,
            targetName: A,
            stream: AI.PULL_COMPLETE,
            streamId: g,
            success: !0
          });
          break;
        }
        s.desiredSize <= 0 && I.desiredSize > 0 && s.sinkCapability.resolve(), s.desiredSize = I.desiredSize, Promise.try(s.onPull || Ci).then(function() {
          i.postMessage({
            sourceName: C,
            targetName: A,
            stream: AI.PULL_COMPLETE,
            streamId: g,
            success: !0
          });
        }, function(c) {
          i.postMessage({
            sourceName: C,
            targetName: A,
            stream: AI.PULL_COMPLETE,
            streamId: g,
            reason: BI(c)
          });
        });
        break;
      case AI.ENQUEUE:
        if (Q(l, "enqueue should have stream controller"), l.isClosed)
          break;
        l.controller.enqueue(I.chunk);
        break;
      case AI.CLOSE:
        if (Q(l, "close should have stream controller"), l.isClosed)
          break;
        l.isClosed = !0, l.controller.close(), this.#i(l, g);
        break;
      case AI.ERROR:
        Q(l, "error should have stream controller"), l.controller.error(BI(I.reason)), this.#i(l, g);
        break;
      case AI.CANCEL_COMPLETE:
        I.success ? l.cancelCall.resolve() : l.cancelCall.reject(BI(I.reason)), this.#i(l, g);
        break;
      case AI.CANCEL:
        if (!s)
          break;
        const d = BI(I.reason);
        Promise.try(s.onCancel || Ci, d).then(function() {
          i.postMessage({
            sourceName: C,
            targetName: A,
            stream: AI.CANCEL_COMPLETE,
            streamId: g,
            success: !0
          });
        }, function(c) {
          i.postMessage({
            sourceName: C,
            targetName: A,
            stream: AI.CANCEL_COMPLETE,
            streamId: g,
            reason: BI(c)
          });
        }), s.sinkCapability.reject(d), s.isCancelled = !0, delete this.streamSinks[g];
        break;
      default:
        throw new Error("Unexpected stream case");
    }
  }
  async #i(I, g) {
    await Promise.allSettled([I.startCall?.promise, I.pullCall?.promise, I.cancelCall?.promise]), delete this.streamControllers[g];
  }
  destroy() {
    this.#I?.abort(), this.#I = null;
  }
}
class ml {
  #I = !1;
  constructor({
    enableHWA: I = !1
  }) {
    this.#I = I;
  }
  create(I, g) {
    if (I <= 0 || g <= 0)
      throw new Error("Invalid canvas size");
    const C = this._createCanvas(I, g);
    return {
      canvas: C,
      context: C.getContext("2d", {
        willReadFrequently: !this.#I
      })
    };
  }
  reset(I, g, C) {
    if (!I.canvas)
      throw new Error("Canvas is not specified");
    if (g <= 0 || C <= 0)
      throw new Error("Invalid canvas size");
    I.canvas.width = g, I.canvas.height = C;
  }
  destroy(I) {
    if (!I.canvas)
      throw new Error("Canvas is not specified");
    I.canvas.width = 0, I.canvas.height = 0, I.canvas = null, I.context = null;
  }
  _createCanvas(I, g) {
    f("Abstract method `_createCanvas` called.");
  }
}
class rs extends ml {
  constructor({
    ownerDocument: I = globalThis.document,
    enableHWA: g = !1
  }) {
    super({
      enableHWA: g
    }), this._document = I;
  }
  _createCanvas(I, g) {
    const C = this._document.createElement("canvas");
    return C.width = I, C.height = g, C;
  }
}
class al {
  constructor({
    baseUrl: I = null,
    isCompressed: g = !0
  }) {
    this.baseUrl = I, this.isCompressed = g;
  }
  async fetch({
    name: I
  }) {
    if (!this.baseUrl)
      throw new Error("Ensure that the `cMapUrl` and `cMapPacked` API parameters are provided.");
    if (!I)
      throw new Error("CMap name must be specified.");
    const g = this.baseUrl + I + (this.isCompressed ? ".bcmap" : "");
    return this._fetch(g).then((C) => ({
      cMapData: C,
      isCompressed: this.isCompressed
    })).catch((C) => {
      throw new Error(`Unable to load ${this.isCompressed ? "binary " : ""}CMap at: ${g}`);
    });
  }
  async _fetch(I) {
    f("Abstract method `_fetch` called.");
  }
}
class Ai extends al {
  async _fetch(I) {
    const g = await $g(I, this.isCompressed ? "arraybuffer" : "text");
    return g instanceof ArrayBuffer ? new Uint8Array(g) : qg(g);
  }
}
class el {
  addFilter(I) {
    return "none";
  }
  addHCMFilter(I, g) {
    return "none";
  }
  addAlphaFilter(I) {
    return "none";
  }
  addLuminosityFilter(I) {
    return "none";
  }
  addHighlightHCMFilter(I, g, C, A, i) {
    return "none";
  }
  destroy(I = !1) {
  }
}
class Ts extends el {
  #I;
  #g;
  #A;
  #C;
  #i;
  #l;
  #s = 0;
  constructor({
    docId: I,
    ownerDocument: g = globalThis.document
  }) {
    super(), this.#C = I, this.#i = g;
  }
  get #d() {
    return this.#g ||= /* @__PURE__ */ new Map();
  }
  get #c() {
    return this.#l ||= /* @__PURE__ */ new Map();
  }
  get #Z() {
    if (!this.#A) {
      const I = this.#i.createElement("div"), {
        style: g
      } = I;
      g.visibility = "hidden", g.contain = "strict", g.width = g.height = 0, g.position = "absolute", g.top = g.left = 0, g.zIndex = -1;
      const C = this.#i.createElementNS(rI, "svg");
      C.setAttribute("width", 0), C.setAttribute("height", 0), this.#A = this.#i.createElementNS(rI, "defs"), I.append(C), C.append(this.#A), this.#i.body.append(I);
    }
    return this.#A;
  }
  #o(I) {
    if (I.length === 1) {
      const d = I[0], c = new Array(256);
      for (let b = 0; b < 256; b++)
        c[b] = d[b] / 255;
      const G = c.join(",");
      return [G, G, G];
    }
    const [g, C, A] = I, i = new Array(256), l = new Array(256), s = new Array(256);
    for (let d = 0; d < 256; d++)
      i[d] = g[d] / 255, l[d] = C[d] / 255, s[d] = A[d] / 255;
    return [i.join(","), l.join(","), s.join(",")];
  }
  #b(I) {
    if (this.#I === void 0) {
      this.#I = "";
      const g = this.#i.URL;
      g !== this.#i.baseURI && (FC(g) ? L('#createUrl: ignore "data:"-URL for performance reasons.') : this.#I = Cl(g, ""));
    }
    return `url(${this.#I}#${I})`;
  }
  addFilter(I) {
    if (!I)
      return "none";
    let g = this.#d.get(I);
    if (g)
      return g;
    const [C, A, i] = this.#o(I), l = I.length === 1 ? C : `${C}${A}${i}`;
    if (g = this.#d.get(l), g)
      return this.#d.set(I, g), g;
    const s = `g_${this.#C}_transfer_map_${this.#s++}`, d = this.#b(s);
    this.#d.set(I, d), this.#d.set(l, d);
    const c = this.#a(s);
    return this.#e(C, A, i, c), d;
  }
  addHCMFilter(I, g) {
    const C = `${I}-${g}`, A = "base";
    let i = this.#c.get(A);
    if (i?.key === C || (i ? (i.filter?.remove(), i.key = C, i.url = "none", i.filter = null) : (i = {
      key: C,
      url: "none",
      filter: null
    }, this.#c.set(A, i)), !I || !g))
      return i.url;
    const l = this.#W(I);
    I = M.makeHexColor(...l);
    const s = this.#W(g);
    if (g = M.makeHexColor(...s), this.#Z.style.color = "", I === "#000000" && g === "#ffffff" || I === g)
      return i.url;
    const d = new Array(256);
    for (let m = 0; m <= 255; m++) {
      const e = m / 255;
      d[m] = e <= 0.03928 ? e / 12.92 : ((e + 0.055) / 1.055) ** 2.4;
    }
    const c = d.join(","), G = `g_${this.#C}_hcm_filter`, b = i.filter = this.#a(G);
    this.#e(c, c, c, b), this.#t(b);
    const o = (m, e) => {
      const a = l[m] / 255, h = s[m] / 255, t = new Array(e + 1);
      for (let W = 0; W <= e; W++)
        t[W] = a + W / e * (h - a);
      return t.join(",");
    };
    return this.#e(o(0, 5), o(1, 5), o(2, 5), b), i.url = this.#b(G), i.url;
  }
  addAlphaFilter(I) {
    let g = this.#d.get(I);
    if (g)
      return g;
    const [C] = this.#o([I]), A = `alpha_${C}`;
    if (g = this.#d.get(A), g)
      return this.#d.set(I, g), g;
    const i = `g_${this.#C}_alpha_map_${this.#s++}`, l = this.#b(i);
    this.#d.set(I, l), this.#d.set(A, l);
    const s = this.#a(i);
    return this.#B(C, s), l;
  }
  addLuminosityFilter(I) {
    let g = this.#d.get(I || "luminosity");
    if (g)
      return g;
    let C, A;
    if (I ? ([C] = this.#o([I]), A = `luminosity_${C}`) : A = "luminosity", g = this.#d.get(A), g)
      return this.#d.set(I, g), g;
    const i = `g_${this.#C}_luminosity_map_${this.#s++}`, l = this.#b(i);
    this.#d.set(I, l), this.#d.set(A, l);
    const s = this.#a(i);
    return this.#m(s), I && this.#B(C, s), l;
  }
  addHighlightHCMFilter(I, g, C, A, i) {
    const l = `${g}-${C}-${A}-${i}`;
    let s = this.#c.get(I);
    if (s?.key === l || (s ? (s.filter?.remove(), s.key = l, s.url = "none", s.filter = null) : (s = {
      key: l,
      url: "none",
      filter: null
    }, this.#c.set(I, s)), !g || !C))
      return s.url;
    const [d, c] = [g, C].map(this.#W.bind(this));
    let G = Math.round(0.2126 * d[0] + 0.7152 * d[1] + 0.0722 * d[2]), b = Math.round(0.2126 * c[0] + 0.7152 * c[1] + 0.0722 * c[2]), [o, m] = [A, i].map(this.#W.bind(this));
    b < G && ([G, b, o, m] = [b, G, m, o]), this.#Z.style.color = "";
    const e = (t, W, B) => {
      const w = new Array(256), n = (b - G) / B, V = t / 255, N = (W - t) / (255 * B);
      let R = 0;
      for (let Y = 0; Y <= B; Y++) {
        const y = Math.round(G + Y * n), X = V + Y * N;
        for (let K = R; K <= y; K++)
          w[K] = X;
        R = y + 1;
      }
      for (let Y = R; Y < 256; Y++)
        w[Y] = w[R - 1];
      return w.join(",");
    }, a = `g_${this.#C}_hcm_${I}_filter`, h = s.filter = this.#a(a);
    return this.#t(h), this.#e(e(o[0], m[0], 5), e(o[1], m[1], 5), e(o[2], m[2], 5), h), s.url = this.#b(a), s.url;
  }
  destroy(I = !1) {
    I && this.#l?.size || (this.#A?.parentNode.parentNode.remove(), this.#A = null, this.#g?.clear(), this.#g = null, this.#l?.clear(), this.#l = null, this.#s = 0);
  }
  #m(I) {
    const g = this.#i.createElementNS(rI, "feColorMatrix");
    g.setAttribute("type", "matrix"), g.setAttribute("values", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0.59 0.11 0 0"), I.append(g);
  }
  #t(I) {
    const g = this.#i.createElementNS(rI, "feColorMatrix");
    g.setAttribute("type", "matrix"), g.setAttribute("values", "0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"), I.append(g);
  }
  #a(I) {
    const g = this.#i.createElementNS(rI, "filter");
    return g.setAttribute("color-interpolation-filters", "sRGB"), g.setAttribute("id", I), this.#Z.append(g), g;
  }
  #G(I, g, C) {
    const A = this.#i.createElementNS(rI, g);
    A.setAttribute("type", "discrete"), A.setAttribute("tableValues", C), I.append(A);
  }
  #e(I, g, C, A) {
    const i = this.#i.createElementNS(rI, "feComponentTransfer");
    A.append(i), this.#G(i, "feFuncR", I), this.#G(i, "feFuncG", g), this.#G(i, "feFuncB", C);
  }
  #B(I, g) {
    const C = this.#i.createElementNS(rI, "feComponentTransfer");
    g.append(C), this.#G(C, "feFuncA", I);
  }
  #W(I) {
    return this.#Z.style.color = I, gC(getComputedStyle(this.#Z).getPropertyValue("color"));
  }
}
class tl {
  constructor({
    baseUrl: I = null
  }) {
    this.baseUrl = I;
  }
  async fetch({
    filename: I
  }) {
    if (!this.baseUrl)
      throw new Error("Ensure that the `standardFontDataUrl` API parameter is provided.");
    if (!I)
      throw new Error("Font filename must be specified.");
    const g = `${this.baseUrl}${I}`;
    return this._fetch(g).catch((C) => {
      throw new Error(`Unable to load font data at: ${g}`);
    });
  }
  async _fetch(I) {
    f("Abstract method `_fetch` called.");
  }
}
class ii extends tl {
  async _fetch(I) {
    const g = await $g(I, "arraybuffer");
    return new Uint8Array(g);
  }
}
class hl {
  constructor({
    baseUrl: I = null
  }) {
    this.baseUrl = I;
  }
  async fetch({
    filename: I
  }) {
    if (!this.baseUrl)
      throw new Error("Ensure that the `wasmUrl` API parameter is provided.");
    if (!I)
      throw new Error("Wasm filename must be specified.");
    const g = `${this.baseUrl}${I}`;
    return this._fetch(g).catch((C) => {
      throw new Error(`Unable to load wasm data at: ${g}`);
    });
  }
  async _fetch(I) {
    f("Abstract method `_fetch` called.");
  }
}
class li extends hl {
  async _fetch(I) {
    const g = await $g(I, "arraybuffer");
    return new Uint8Array(g);
  }
}
aI && L("Please use the `legacy` build in Node.js environments.");
async function SA(Z) {
  const g = await process.getBuiltinModule("fs").promises.readFile(Z);
  return new Uint8Array(g);
}
class js extends el {
}
class Qs extends ml {
  _createCanvas(I, g) {
    return process.getBuiltinModule("module").createRequire(import.meta.url)("@napi-rs/canvas").createCanvas(I, g);
  }
}
class xs extends al {
  async _fetch(I) {
    return SA(I);
  }
}
class Os extends tl {
  async _fetch(I) {
    return SA(I);
  }
}
class Us extends hl {
  async _fetch(I) {
    return SA(I);
  }
}
const ag = "__forcedDependency", {
  floor: si,
  ceil: di
} = Math;
function cC(Z, I, g, C, A, i) {
  Z[I * 4 + 0] = Math.min(Z[I * 4 + 0], g), Z[I * 4 + 1] = Math.min(Z[I * 4 + 1], C), Z[I * 4 + 2] = Math.max(Z[I * 4 + 2], A), Z[I * 4 + 3] = Math.max(Z[I * 4 + 3], i);
}
const mA = new Uint32Array(new Uint8Array([255, 255, 0, 0]).buffer)[0];
class vs {
  #I;
  #g;
  constructor(I, g) {
    this.#I = I, this.#g = g;
  }
  get length() {
    return this.#I.length;
  }
  isEmpty(I) {
    return this.#I[I] === mA;
  }
  minX(I) {
    return this.#g[I * 4 + 0] / 256;
  }
  minY(I) {
    return this.#g[I * 4 + 1] / 256;
  }
  maxX(I) {
    return (this.#g[I * 4 + 2] + 1) / 256;
  }
  maxY(I) {
    return (this.#g[I * 4 + 3] + 1) / 256;
  }
}
const GC = (Z, I) => {
  if (!Z)
    return;
  let g = Z.get(I);
  return g || (g = {
    dependencies: /* @__PURE__ */ new Set(),
    isRenderingOperation: !1
  }, Z.set(I, g)), g;
};
class Es {
  #I = {
    __proto__: null
  };
  #g = {
    __proto__: null,
    transform: [],
    moveText: [],
    sameLineText: [],
    [ag]: []
  };
  #A = /* @__PURE__ */ new Map();
  #C = [];
  #i = [];
  #l = [[1, 0, 0, 1, 0, 0]];
  #s = [-1 / 0, -1 / 0, 1 / 0, 1 / 0];
  #d = new Float64Array([1 / 0, 1 / 0, -1 / 0, -1 / 0]);
  #c = -1;
  #Z = /* @__PURE__ */ new Set();
  #o = /* @__PURE__ */ new Map();
  #b = /* @__PURE__ */ new Map();
  #m;
  #t;
  #a;
  #G;
  #e;
  constructor(I, g, C = !1) {
    this.#m = I.width, this.#t = I.height, this.#B(g), C && (this.#e = /* @__PURE__ */ new Map());
  }
  growOperationsCount(I) {
    I >= this.#G.length && this.#B(I, this.#G);
  }
  #B(I, g) {
    const C = new ArrayBuffer(I * 4);
    this.#a = new Uint8ClampedArray(C), this.#G = new Uint32Array(C), g && g.length > 0 ? (this.#G.set(g), this.#G.fill(mA, g.length)) : this.#G.fill(mA);
  }
  save(I) {
    return this.#I = {
      __proto__: this.#I
    }, this.#g = {
      __proto__: this.#g,
      transform: {
        __proto__: this.#g.transform
      },
      moveText: {
        __proto__: this.#g.moveText
      },
      sameLineText: {
        __proto__: this.#g.sameLineText
      },
      [ag]: {
        __proto__: this.#g[ag]
      }
    }, this.#s = {
      __proto__: this.#s
    }, this.#C.push(I), this;
  }
  restore(I) {
    const g = Object.getPrototypeOf(this.#I);
    if (g === null)
      return this;
    this.#I = g, this.#g = Object.getPrototypeOf(this.#g), this.#s = Object.getPrototypeOf(this.#s);
    const C = this.#C.pop();
    return C !== void 0 && (GC(this.#e, I)?.dependencies.add(C), this.#G[I] = this.#G[C]), this;
  }
  recordOpenMarker(I) {
    return this.#C.push(I), this;
  }
  getOpenMarker() {
    return this.#C.length === 0 ? null : this.#C.at(-1);
  }
  recordCloseMarker(I) {
    const g = this.#C.pop();
    return g !== void 0 && (GC(this.#e, I)?.dependencies.add(g), this.#G[I] = this.#G[g]), this;
  }
  beginMarkedContent(I) {
    return this.#i.push(I), this;
  }
  endMarkedContent(I) {
    const g = this.#i.pop();
    return g !== void 0 && (GC(this.#e, I)?.dependencies.add(g), this.#G[I] = this.#G[g]), this;
  }
  pushBaseTransform(I) {
    return this.#l.push(M.multiplyByDOMMatrix(this.#l.at(-1), I.getTransform())), this;
  }
  popBaseTransform() {
    return this.#l.length > 1 && this.#l.pop(), this;
  }
  recordSimpleData(I, g) {
    return this.#I[I] = g, this;
  }
  recordIncrementalData(I, g) {
    return this.#g[I].push(g), this;
  }
  resetIncrementalData(I, g) {
    return this.#g[I].length = 0, this;
  }
  recordNamedData(I, g) {
    return this.#A.set(I, g), this;
  }
  recordSimpleDataFromNamed(I, g, C) {
    this.#I[I] = this.#A.get(g) ?? C;
  }
  recordFutureForcedDependency(I, g) {
    return this.recordIncrementalData(ag, g), this;
  }
  inheritSimpleDataAsFutureForcedDependencies(I) {
    for (const g of I)
      g in this.#I && this.recordFutureForcedDependency(g, this.#I[g]);
    return this;
  }
  inheritPendingDependenciesAsFutureForcedDependencies() {
    for (const I of this.#Z)
      this.recordFutureForcedDependency(ag, I);
    return this;
  }
  resetBBox(I) {
    return this.#c !== I && (this.#c = I, this.#d[0] = 1 / 0, this.#d[1] = 1 / 0, this.#d[2] = -1 / 0, this.#d[3] = -1 / 0), this;
  }
  recordClipBox(I, g, C, A, i, l) {
    const s = M.multiplyByDOMMatrix(this.#l.at(-1), g.getTransform()), d = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
    M.axialAlignedBoundingBox([C, i, A, l], s, d);
    const c = M.intersect(this.#s, d);
    return c ? (this.#s[0] = c[0], this.#s[1] = c[1], this.#s[2] = c[2], this.#s[3] = c[3]) : (this.#s[0] = this.#s[1] = 1 / 0, this.#s[2] = this.#s[3] = -1 / 0), this;
  }
  recordBBox(I, g, C, A, i, l) {
    const s = this.#s;
    if (s[0] === 1 / 0)
      return this;
    const d = M.multiplyByDOMMatrix(this.#l.at(-1), g.getTransform());
    if (s[0] === -1 / 0)
      return M.axialAlignedBoundingBox([C, i, A, l], d, this.#d), this;
    const c = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
    return M.axialAlignedBoundingBox([C, i, A, l], d, c), this.#d[0] = Math.min(this.#d[0], Math.max(c[0], s[0])), this.#d[1] = Math.min(this.#d[1], Math.max(c[1], s[1])), this.#d[2] = Math.max(this.#d[2], Math.min(c[2], s[2])), this.#d[3] = Math.max(this.#d[3], Math.min(c[3], s[3])), this;
  }
  recordCharacterBBox(I, g, C, A = 1, i = 0, l = 0, s) {
    const d = C.bbox;
    let c, G;
    if (d && (c = d[2] !== d[0] && d[3] !== d[1] && this.#b.get(C), c !== !1 && (G = [0, 0, 0, 0], M.axialAlignedBoundingBox(d, C.fontMatrix, G), (A !== 1 || i !== 0 || l !== 0) && M.scaleMinMax([A, 0, 0, -A, i, l], G), c)))
      return this.recordBBox(I, g, G[0], G[2], G[1], G[3]);
    if (!s)
      return this.recordFullPageBBox(I);
    const b = s();
    return d && G && c === void 0 && (c = G[0] <= i - b.actualBoundingBoxLeft && G[2] >= i + b.actualBoundingBoxRight && G[1] <= l - b.actualBoundingBoxAscent && G[3] >= l + b.actualBoundingBoxDescent, this.#b.set(C, c), c) ? this.recordBBox(I, g, G[0], G[2], G[1], G[3]) : this.recordBBox(I, g, i - b.actualBoundingBoxLeft, i + b.actualBoundingBoxRight, l - b.actualBoundingBoxAscent, l + b.actualBoundingBoxDescent);
  }
  recordFullPageBBox(I) {
    return this.#d[0] = Math.max(0, this.#s[0]), this.#d[1] = Math.max(0, this.#s[1]), this.#d[2] = Math.min(this.#m, this.#s[2]), this.#d[3] = Math.min(this.#t, this.#s[3]), this;
  }
  getSimpleIndex(I) {
    return this.#I[I];
  }
  recordDependencies(I, g) {
    const C = this.#Z, A = this.#I, i = this.#g;
    for (const l of g)
      l in this.#I ? C.add(A[l]) : l in i && i[l].forEach(C.add, C);
    return this;
  }
  recordNamedDependency(I, g) {
    return this.#A.has(g) && this.#Z.add(this.#A.get(g)), this;
  }
  recordOperation(I, g = !1) {
    if (this.recordDependencies(I, [ag]), this.#e) {
      const C = GC(this.#e, I), {
        dependencies: A
      } = C;
      this.#Z.forEach(A.add, A), this.#C.forEach(A.add, A), this.#i.forEach(A.add, A), A.delete(I), C.isRenderingOperation = !0;
    }
    if (this.#c === I) {
      const C = si(this.#d[0] * 256 / this.#m), A = si(this.#d[1] * 256 / this.#t), i = di(this.#d[2] * 256 / this.#m), l = di(this.#d[3] * 256 / this.#t);
      cC(this.#a, I, C, A, i, l);
      for (const s of this.#Z)
        s !== I && cC(this.#a, s, C, A, i, l);
      for (const s of this.#C)
        s !== I && cC(this.#a, s, C, A, i, l);
      for (const s of this.#i)
        s !== I && cC(this.#a, s, C, A, i, l);
      g || (this.#Z.clear(), this.#c = -1);
    }
    return this;
  }
  recordShowTextOperation(I, g = !1) {
    const C = Array.from(this.#Z);
    this.recordOperation(I, g), this.recordIncrementalData("sameLineText", I);
    for (const A of C)
      this.recordIncrementalData("sameLineText", A);
    return this;
  }
  bboxToClipBoxDropOperation(I, g = !1) {
    return this.#c === I && (this.#c = -1, this.#s[0] = Math.max(this.#s[0], this.#d[0]), this.#s[1] = Math.max(this.#s[1], this.#d[1]), this.#s[2] = Math.min(this.#s[2], this.#d[2]), this.#s[3] = Math.min(this.#s[3], this.#d[3]), g || this.#Z.clear()), this;
  }
  _takePendingDependencies() {
    const I = this.#Z;
    return this.#Z = /* @__PURE__ */ new Set(), I;
  }
  _extractOperation(I) {
    const g = this.#o.get(I);
    return this.#o.delete(I), g;
  }
  _pushPendingDependencies(I) {
    for (const g of I)
      this.#Z.add(g);
  }
  take() {
    return this.#b.clear(), new vs(this.#G, this.#a);
  }
  takeDebugMetadata() {
    return this.#e;
  }
}
class RC {
  #I;
  #g;
  #A;
  #C = 0;
  #i = 0;
  constructor(I, g, C) {
    if (I instanceof RC && I.#A === !!C)
      return I;
    this.#I = I, this.#g = g, this.#A = !!C;
  }
  growOperationsCount() {
    throw new Error("Unreachable");
  }
  save(I) {
    return this.#i++, this.#I.save(this.#g), this;
  }
  restore(I) {
    return this.#i > 0 && (this.#I.restore(this.#g), this.#i--), this;
  }
  recordOpenMarker(I) {
    return this.#C++, this;
  }
  getOpenMarker() {
    return this.#C > 0 ? this.#g : this.#I.getOpenMarker();
  }
  recordCloseMarker(I) {
    return this.#C--, this;
  }
  beginMarkedContent(I) {
    return this;
  }
  endMarkedContent(I) {
    return this;
  }
  pushBaseTransform(I) {
    return this.#I.pushBaseTransform(I), this;
  }
  popBaseTransform() {
    return this.#I.popBaseTransform(), this;
  }
  recordSimpleData(I, g) {
    return this.#I.recordSimpleData(I, this.#g), this;
  }
  recordIncrementalData(I, g) {
    return this.#I.recordIncrementalData(I, this.#g), this;
  }
  resetIncrementalData(I, g) {
    return this.#I.resetIncrementalData(I, this.#g), this;
  }
  recordNamedData(I, g) {
    return this;
  }
  recordSimpleDataFromNamed(I, g, C) {
    return this.#I.recordSimpleDataFromNamed(I, g, this.#g), this;
  }
  recordFutureForcedDependency(I, g) {
    return this.#I.recordFutureForcedDependency(I, this.#g), this;
  }
  inheritSimpleDataAsFutureForcedDependencies(I) {
    return this.#I.inheritSimpleDataAsFutureForcedDependencies(I), this;
  }
  inheritPendingDependenciesAsFutureForcedDependencies() {
    return this.#I.inheritPendingDependenciesAsFutureForcedDependencies(), this;
  }
  resetBBox(I) {
    return this.#A || this.#I.resetBBox(this.#g), this;
  }
  recordClipBox(I, g, C, A, i, l) {
    return this.#A || this.#I.recordClipBox(this.#g, g, C, A, i, l), this;
  }
  recordBBox(I, g, C, A, i, l) {
    return this.#A || this.#I.recordBBox(this.#g, g, C, A, i, l), this;
  }
  recordCharacterBBox(I, g, C, A, i, l, s) {
    return this.#A || this.#I.recordCharacterBBox(this.#g, g, C, A, i, l, s), this;
  }
  recordFullPageBBox(I) {
    return this.#A || this.#I.recordFullPageBBox(this.#g), this;
  }
  getSimpleIndex(I) {
    return this.#I.getSimpleIndex(I);
  }
  recordDependencies(I, g) {
    return this.#I.recordDependencies(this.#g, g), this;
  }
  recordNamedDependency(I, g) {
    return this.#I.recordNamedDependency(this.#g, g), this;
  }
  recordOperation(I) {
    return this.#I.recordOperation(this.#g, !0), this;
  }
  recordShowTextOperation(I) {
    return this.#I.recordShowTextOperation(this.#g, !0), this;
  }
  bboxToClipBoxDropOperation(I) {
    return this.#A || this.#I.bboxToClipBoxDropOperation(this.#g, !0), this;
  }
  take() {
    throw new Error("Unreachable");
  }
  takeDebugMetadata() {
    throw new Error("Unreachable");
  }
}
const NI = {
  stroke: ["path", "transform", "filter", "strokeColor", "strokeAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "dash"],
  fill: ["path", "transform", "filter", "fillColor", "fillAlpha", "globalCompositeOperation", "SMask"],
  imageXObject: ["transform", "SMask", "filter", "fillAlpha", "strokeAlpha", "globalCompositeOperation"],
  rawFillPath: ["filter", "fillColor", "fillAlpha"],
  showText: ["transform", "leading", "charSpacing", "wordSpacing", "hScale", "textRise", "moveText", "textMatrix", "font", "fontObj", "filter", "fillColor", "textRenderingMode", "SMask", "fillAlpha", "strokeAlpha", "globalCompositeOperation", "sameLineText"],
  transform: ["transform"],
  transformAndFill: ["transform", "fillColor"]
}, cI = {
  FILL: "Fill",
  STROKE: "Stroke",
  SHADING: "Shading"
};
function aA(Z, I) {
  if (!I)
    return;
  const g = I[2] - I[0], C = I[3] - I[1], A = new Path2D();
  A.rect(I[0], I[1], g, C), Z.clip(A);
}
class pA {
  isModifyingCurrentTransform() {
    return !1;
  }
  getPattern() {
    f("Abstract method `getPattern` called.");
  }
}
class Ps extends pA {
  constructor(I) {
    super(), this._type = I[1], this._bbox = I[2], this._colorStops = I[3], this._p0 = I[4], this._p1 = I[5], this._r0 = I[6], this._r1 = I[7], this.matrix = null;
  }
  _createGradient(I) {
    let g;
    this._type === "axial" ? g = I.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]) : this._type === "radial" && (g = I.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1));
    for (const C of this._colorStops)
      g.addColorStop(C[0], C[1]);
    return g;
  }
  getPattern(I, g, C, A) {
    let i;
    if (A === cI.STROKE || A === cI.FILL) {
      const l = g.current.getClippedPathBoundingBox(A, q(I)) || [0, 0, 0, 0], s = Math.ceil(l[2] - l[0]) || 1, d = Math.ceil(l[3] - l[1]) || 1, c = g.cachedCanvases.getCanvas("pattern", s, d), G = c.context;
      G.clearRect(0, 0, G.canvas.width, G.canvas.height), G.beginPath(), G.rect(0, 0, G.canvas.width, G.canvas.height), G.translate(-l[0], -l[1]), C = M.transform(C, [1, 0, 0, 1, l[0], l[1]]), G.transform(...g.baseTransform), this.matrix && G.transform(...this.matrix), aA(G, this._bbox), G.fillStyle = this._createGradient(G), G.fill(), i = I.createPattern(c.canvas, "no-repeat");
      const b = new DOMMatrix(C);
      i.setTransform(b);
    } else
      aA(I, this._bbox), i = this._createGradient(I);
    return i;
  }
}
function vC(Z, I, g, C, A, i, l, s) {
  const d = I.coords, c = I.colors, G = Z.data, b = Z.width * 4;
  let o;
  d[g + 1] > d[C + 1] && (o = g, g = C, C = o, o = i, i = l, l = o), d[C + 1] > d[A + 1] && (o = C, C = A, A = o, o = l, l = s, s = o), d[g + 1] > d[C + 1] && (o = g, g = C, C = o, o = i, i = l, l = o);
  const m = (d[g] + I.offsetX) * I.scaleX, e = (d[g + 1] + I.offsetY) * I.scaleY, a = (d[C] + I.offsetX) * I.scaleX, h = (d[C + 1] + I.offsetY) * I.scaleY, t = (d[A] + I.offsetX) * I.scaleX, W = (d[A + 1] + I.offsetY) * I.scaleY;
  if (e >= W)
    return;
  const B = c[i], w = c[i + 1], n = c[i + 2], V = c[l], N = c[l + 1], R = c[l + 2], Y = c[s], y = c[s + 1], X = c[s + 2], K = Math.round(e), S = Math.round(W);
  let p, r, D, z, U, mI, kI, UI;
  for (let sI = K; sI <= S; sI++) {
    if (sI < h) {
      const CI = sI < e ? 0 : (e - sI) / (e - h);
      p = m - (m - a) * CI, r = B - (B - V) * CI, D = w - (w - N) * CI, z = n - (n - R) * CI;
    } else {
      let CI;
      sI > W ? CI = 1 : h === W ? CI = 0 : CI = (h - sI) / (h - W), p = a - (a - t) * CI, r = V - (V - Y) * CI, D = N - (N - y) * CI, z = R - (R - X) * CI;
    }
    let _;
    sI < e ? _ = 0 : sI > W ? _ = 1 : _ = (e - sI) / (e - W), U = m - (m - t) * _, mI = B - (B - Y) * _, kI = w - (w - y) * _, UI = n - (n - X) * _;
    const Cg = Math.round(Math.min(p, U)), vI = Math.round(Math.max(p, U));
    let EI = b * sI + Cg * 4;
    for (let CI = Cg; CI <= vI; CI++)
      _ = (p - CI) / (p - U), _ < 0 ? _ = 0 : _ > 1 && (_ = 1), G[EI++] = r - (r - mI) * _ | 0, G[EI++] = D - (D - kI) * _ | 0, G[EI++] = z - (z - UI) * _ | 0, G[EI++] = 255;
  }
}
function fs(Z, I, g) {
  const C = I.coords, A = I.colors;
  let i, l;
  switch (I.type) {
    case "lattice":
      const s = I.verticesPerRow, d = Math.floor(C.length / s) - 1, c = s - 1;
      for (i = 0; i < d; i++) {
        let G = i * s;
        for (let b = 0; b < c; b++, G++)
          vC(Z, g, C[G], C[G + 1], C[G + s], A[G], A[G + 1], A[G + s]), vC(Z, g, C[G + s + 1], C[G + 1], C[G + s], A[G + s + 1], A[G + 1], A[G + s]);
      }
      break;
    case "triangles":
      for (i = 0, l = C.length; i < l; i += 3)
        vC(Z, g, C[i], C[i + 1], C[i + 2], A[i], A[i + 1], A[i + 2]);
      break;
    default:
      throw new Error("illegal figure");
  }
}
class _s extends pA {
  constructor(I) {
    super(), this._coords = I[2], this._colors = I[3], this._figures = I[4], this._bounds = I[5], this._bbox = I[6], this._background = I[7], this.matrix = null;
  }
  _createMeshCanvas(I, g, C) {
    const s = Math.floor(this._bounds[0]), d = Math.floor(this._bounds[1]), c = Math.ceil(this._bounds[2]) - s, G = Math.ceil(this._bounds[3]) - d, b = Math.min(Math.ceil(Math.abs(c * I[0] * 1.1)), 3e3), o = Math.min(Math.ceil(Math.abs(G * I[1] * 1.1)), 3e3), m = c / b, e = G / o, a = {
      coords: this._coords,
      colors: this._colors,
      offsetX: -s,
      offsetY: -d,
      scaleX: 1 / m,
      scaleY: 1 / e
    }, h = b + 4, t = o + 4, W = C.getCanvas("mesh", h, t), B = W.context, w = B.createImageData(b, o);
    if (g) {
      const V = w.data;
      for (let N = 0, R = V.length; N < R; N += 4)
        V[N] = g[0], V[N + 1] = g[1], V[N + 2] = g[2], V[N + 3] = 255;
    }
    for (const V of this._figures)
      fs(w, V, a);
    return B.putImageData(w, 2, 2), {
      canvas: W.canvas,
      offsetX: s - 2 * m,
      offsetY: d - 2 * e,
      scaleX: m,
      scaleY: e
    };
  }
  isModifyingCurrentTransform() {
    return !0;
  }
  getPattern(I, g, C, A) {
    aA(I, this._bbox);
    const i = new Float32Array(2);
    if (A === cI.SHADING)
      M.singularValueDecompose2dScale(q(I), i);
    else if (this.matrix) {
      M.singularValueDecompose2dScale(this.matrix, i);
      const [s, d] = i;
      M.singularValueDecompose2dScale(g.baseTransform, i), i[0] *= s, i[1] *= d;
    } else
      M.singularValueDecompose2dScale(g.baseTransform, i);
    const l = this._createMeshCanvas(i, A === cI.SHADING ? null : this._background, g.cachedCanvases);
    return A !== cI.SHADING && (I.setTransform(...g.baseTransform), this.matrix && I.transform(...this.matrix)), I.translate(l.offsetX, l.offsetY), I.scale(l.scaleX, l.scaleY), I.createPattern(l.canvas, "no-repeat");
  }
}
class qs extends pA {
  getPattern() {
    return "hotpink";
  }
}
function $s(Z) {
  switch (Z[0]) {
    case "RadialAxial":
      return new Ps(Z);
    case "Mesh":
      return new _s(Z);
    case "Dummy":
      return new qs();
  }
  throw new Error(`Unknown IR type: ${Z[0]}`);
}
const Zi = {
  COLORED: 1,
  UNCOLORED: 2
};
class FA {
  static MAX_PATTERN_SIZE = 3e3;
  constructor(I, g, C, A) {
    this.color = I[1], this.operatorList = I[2], this.matrix = I[3], this.bbox = I[4], this.xstep = I[5], this.ystep = I[6], this.paintType = I[7], this.tilingType = I[8], this.ctx = g, this.canvasGraphicsFactory = C, this.baseTransform = A;
  }
  createPatternCanvas(I, g) {
    const {
      bbox: C,
      operatorList: A,
      paintType: i,
      tilingType: l,
      color: s,
      canvasGraphicsFactory: d
    } = this;
    let {
      xstep: c,
      ystep: G
    } = this;
    c = Math.abs(c), G = Math.abs(G), pC("TilingType: " + l);
    const b = C[0], o = C[1], m = C[2], e = C[3], a = m - b, h = e - o, t = new Float32Array(2);
    M.singularValueDecompose2dScale(this.matrix, t);
    const [W, B] = t;
    M.singularValueDecompose2dScale(this.baseTransform, t);
    const w = W * t[0], n = B * t[1];
    let V = a, N = h, R = !1, Y = !1;
    const y = Math.ceil(c * w), X = Math.ceil(G * n), K = Math.ceil(a * w), S = Math.ceil(h * n);
    y >= K ? V = c : R = !0, X >= S ? N = G : Y = !0;
    const p = this.getSizeAndScale(V, this.ctx.canvas.width, w), r = this.getSizeAndScale(N, this.ctx.canvas.height, n), D = I.cachedCanvases.getCanvas("pattern", p.size, r.size), z = D.context, U = d.createCanvasGraphics(z, g);
    if (U.groupLevel = I.groupLevel, this.setFillAndStrokeStyleToContext(U, i, s), z.translate(-p.scale * b, -r.scale * o), U.transform(0, p.scale, 0, 0, r.scale, 0, 0), z.save(), U.dependencyTracker?.save(), this.clipBbox(U, b, o, m, e), U.baseTransform = q(U.ctx), U.executeOperatorList(A), U.endDrawing(), U.dependencyTracker?.restore(), z.restore(), R || Y) {
      const mI = D.canvas;
      R && (V = c), Y && (N = G);
      const kI = this.getSizeAndScale(V, this.ctx.canvas.width, w), UI = this.getSizeAndScale(N, this.ctx.canvas.height, n), sI = kI.size, _ = UI.size, Cg = I.cachedCanvases.getCanvas("pattern-workaround", sI, _), vI = Cg.context, EI = R ? Math.floor(a / c) : 0, CI = Y ? Math.floor(h / G) : 0;
      for (let Dg = 0; Dg <= EI; Dg++)
        for (let Kg = 0; Kg <= CI; Kg++)
          vI.drawImage(mI, sI * Dg, _ * Kg, sI, _, 0, 0, sI, _);
      return {
        canvas: Cg.canvas,
        scaleX: kI.scale,
        scaleY: UI.scale,
        offsetX: b,
        offsetY: o
      };
    }
    return {
      canvas: D.canvas,
      scaleX: p.scale,
      scaleY: r.scale,
      offsetX: b,
      offsetY: o
    };
  }
  getSizeAndScale(I, g, C) {
    const A = Math.max(FA.MAX_PATTERN_SIZE, g);
    let i = Math.ceil(I * C);
    return i >= A ? i = A : C = i / I, {
      scale: C,
      size: i
    };
  }
  clipBbox(I, g, C, A, i) {
    const l = A - g, s = i - C;
    I.ctx.rect(g, C, l, s), M.axialAlignedBoundingBox([g, C, A, i], q(I.ctx), I.current.minMax), I.clip(), I.endPath();
  }
  setFillAndStrokeStyleToContext(I, g, C) {
    const A = I.ctx, i = I.current;
    switch (g) {
      case Zi.COLORED:
        const {
          fillStyle: l,
          strokeStyle: s
        } = this.ctx;
        A.fillStyle = i.fillColor = l, A.strokeStyle = i.strokeColor = s;
        break;
      case Zi.UNCOLORED:
        A.fillStyle = A.strokeStyle = C, i.fillColor = i.strokeColor = C;
        break;
      default:
        throw new os(`Unsupported paint type: ${g}`);
    }
  }
  isModifyingCurrentTransform() {
    return !1;
  }
  getPattern(I, g, C, A, i) {
    let l = C;
    A !== cI.SHADING && (l = M.transform(l, g.baseTransform), this.matrix && (l = M.transform(l, this.matrix)));
    const s = this.createPatternCanvas(g, i);
    let d = new DOMMatrix(l);
    d = d.translate(s.offsetX, s.offsetY), d = d.scale(1 / s.scaleX, 1 / s.scaleY);
    const c = I.createPattern(s.canvas, "repeat");
    return c.setTransform(d), c;
  }
}
function Id({
  src: Z,
  srcPos: I = 0,
  dest: g,
  width: C,
  height: A,
  nonBlackColor: i = 4294967295,
  inverseDecode: l = !1
}) {
  const s = GI.isLittleEndian ? 4278190080 : 255, [d, c] = l ? [i, s] : [s, i], G = C >> 3, b = C & 7, o = Z.length;
  g = new Uint32Array(g.buffer);
  let m = 0;
  for (let e = 0; e < A; e++) {
    for (const h = I + G; I < h; I++) {
      const t = I < o ? Z[I] : 255;
      g[m++] = t & 128 ? c : d, g[m++] = t & 64 ? c : d, g[m++] = t & 32 ? c : d, g[m++] = t & 16 ? c : d, g[m++] = t & 8 ? c : d, g[m++] = t & 4 ? c : d, g[m++] = t & 2 ? c : d, g[m++] = t & 1 ? c : d;
    }
    if (b === 0)
      continue;
    const a = I < o ? Z[I++] : 255;
    for (let h = 0; h < b; h++)
      g[m++] = a & 1 << 7 - h ? c : d;
  }
  return {
    srcPos: I,
    destPos: m
  };
}
const ci = 16, Gi = 100, gd = 15, bi = 10, wI = 16, EC = new DOMMatrix(), YI = new Float32Array(2), Wg = new Float32Array([1 / 0, 1 / 0, -1 / 0, -1 / 0]);
function Cd(Z, I) {
  if (Z._removeMirroring)
    throw new Error("Context is already forwarding operations.");
  Z.__originalSave = Z.save, Z.__originalRestore = Z.restore, Z.__originalRotate = Z.rotate, Z.__originalScale = Z.scale, Z.__originalTranslate = Z.translate, Z.__originalTransform = Z.transform, Z.__originalSetTransform = Z.setTransform, Z.__originalResetTransform = Z.resetTransform, Z.__originalClip = Z.clip, Z.__originalMoveTo = Z.moveTo, Z.__originalLineTo = Z.lineTo, Z.__originalBezierCurveTo = Z.bezierCurveTo, Z.__originalRect = Z.rect, Z.__originalClosePath = Z.closePath, Z.__originalBeginPath = Z.beginPath, Z._removeMirroring = () => {
    Z.save = Z.__originalSave, Z.restore = Z.__originalRestore, Z.rotate = Z.__originalRotate, Z.scale = Z.__originalScale, Z.translate = Z.__originalTranslate, Z.transform = Z.__originalTransform, Z.setTransform = Z.__originalSetTransform, Z.resetTransform = Z.__originalResetTransform, Z.clip = Z.__originalClip, Z.moveTo = Z.__originalMoveTo, Z.lineTo = Z.__originalLineTo, Z.bezierCurveTo = Z.__originalBezierCurveTo, Z.rect = Z.__originalRect, Z.closePath = Z.__originalClosePath, Z.beginPath = Z.__originalBeginPath, delete Z._removeMirroring;
  }, Z.save = function() {
    I.save(), this.__originalSave();
  }, Z.restore = function() {
    I.restore(), this.__originalRestore();
  }, Z.translate = function(g, C) {
    I.translate(g, C), this.__originalTranslate(g, C);
  }, Z.scale = function(g, C) {
    I.scale(g, C), this.__originalScale(g, C);
  }, Z.transform = function(g, C, A, i, l, s) {
    I.transform(g, C, A, i, l, s), this.__originalTransform(g, C, A, i, l, s);
  }, Z.setTransform = function(g, C, A, i, l, s) {
    I.setTransform(g, C, A, i, l, s), this.__originalSetTransform(g, C, A, i, l, s);
  }, Z.resetTransform = function() {
    I.resetTransform(), this.__originalResetTransform();
  }, Z.rotate = function(g) {
    I.rotate(g), this.__originalRotate(g);
  }, Z.clip = function(g) {
    I.clip(g), this.__originalClip(g);
  }, Z.moveTo = function(g, C) {
    I.moveTo(g, C), this.__originalMoveTo(g, C);
  }, Z.lineTo = function(g, C) {
    I.lineTo(g, C), this.__originalLineTo(g, C);
  }, Z.bezierCurveTo = function(g, C, A, i, l, s) {
    I.bezierCurveTo(g, C, A, i, l, s), this.__originalBezierCurveTo(g, C, A, i, l, s);
  }, Z.rect = function(g, C, A, i) {
    I.rect(g, C, A, i), this.__originalRect(g, C, A, i);
  }, Z.closePath = function() {
    I.closePath(), this.__originalClosePath();
  }, Z.beginPath = function() {
    I.beginPath(), this.__originalBeginPath();
  };
}
class Ad {
  constructor(I) {
    this.canvasFactory = I, this.cache = /* @__PURE__ */ Object.create(null);
  }
  getCanvas(I, g, C) {
    let A;
    return this.cache[I] !== void 0 ? (A = this.cache[I], this.canvasFactory.reset(A, g, C)) : (A = this.canvasFactory.create(g, C), this.cache[I] = A), A;
  }
  delete(I) {
    delete this.cache[I];
  }
  clear() {
    for (const I in this.cache) {
      const g = this.cache[I];
      this.canvasFactory.destroy(g), delete this.cache[I];
    }
  }
}
function bC(Z, I, g, C, A, i, l, s, d, c) {
  const [G, b, o, m, e, a] = q(Z);
  if (b === 0 && o === 0) {
    const W = l * G + e, B = Math.round(W), w = s * m + a, n = Math.round(w), V = (l + d) * G + e, N = Math.abs(Math.round(V) - B) || 1, R = (s + c) * m + a, Y = Math.abs(Math.round(R) - n) || 1;
    return Z.setTransform(Math.sign(G), 0, 0, Math.sign(m), B, n), Z.drawImage(I, g, C, A, i, 0, 0, N, Y), Z.setTransform(G, b, o, m, e, a), [N, Y];
  }
  if (G === 0 && m === 0) {
    const W = s * o + e, B = Math.round(W), w = l * b + a, n = Math.round(w), V = (s + c) * o + e, N = Math.abs(Math.round(V) - B) || 1, R = (l + d) * b + a, Y = Math.abs(Math.round(R) - n) || 1;
    return Z.setTransform(0, Math.sign(b), Math.sign(o), 0, B, n), Z.drawImage(I, g, C, A, i, 0, 0, Y, N), Z.setTransform(G, b, o, m, e, a), [Y, N];
  }
  Z.drawImage(I, g, C, A, i, l, s, d, c);
  const h = Math.hypot(G, b), t = Math.hypot(o, m);
  return [h * d, t * c];
}
class oi {
  alphaIsShape = !1;
  fontSize = 0;
  fontSizeScale = 1;
  textMatrix = null;
  textMatrixScale = 1;
  fontMatrix = iA;
  leading = 0;
  x = 0;
  y = 0;
  lineX = 0;
  lineY = 0;
  charSpacing = 0;
  wordSpacing = 0;
  textHScale = 1;
  textRenderingMode = ZI.FILL;
  textRise = 0;
  fillColor = "#000000";
  strokeColor = "#000000";
  patternFill = !1;
  patternStroke = !1;
  fillAlpha = 1;
  strokeAlpha = 1;
  lineWidth = 1;
  activeSMask = null;
  transferMaps = "none";
  constructor(I, g, C) {
    C?.(this), this.clipBox = new Float32Array([0, 0, I, g]), this.minMax = Wg.slice();
  }
  clone() {
    const I = Object.create(this);
    return I.clipBox = this.clipBox.slice(), I.minMax = this.minMax.slice(), I;
  }
  getPathBoundingBox(I = cI.FILL, g = null) {
    const C = this.minMax.slice();
    if (I === cI.STROKE) {
      g || f("Stroke bounding box must include transform."), M.singularValueDecompose2dScale(g, YI);
      const A = YI[0] * this.lineWidth / 2, i = YI[1] * this.lineWidth / 2;
      C[0] -= A, C[1] -= i, C[2] += A, C[3] += i;
    }
    return C;
  }
  updateClipFromPath() {
    const I = M.intersect(this.clipBox, this.getPathBoundingBox());
    this.startNewPathAndClipBox(I || [0, 0, 0, 0]);
  }
  isEmptyClip() {
    return this.minMax[0] === 1 / 0;
  }
  startNewPathAndClipBox(I) {
    this.clipBox.set(I, 0), this.minMax.set(Wg, 0);
  }
  getClippedPathBoundingBox(I = cI.FILL, g = null) {
    return M.intersect(this.clipBox, this.getPathBoundingBox(I, g));
  }
}
function mi(Z, I) {
  if (I instanceof ImageData) {
    Z.putImageData(I, 0, 0);
    return;
  }
  const g = I.height, C = I.width, A = g % wI, i = (g - A) / wI, l = A === 0 ? i : i + 1, s = Z.createImageData(C, wI);
  let d = 0, c;
  const G = I.data, b = s.data;
  let o, m, e, a;
  if (I.kind === wC.GRAYSCALE_1BPP) {
    const h = G.byteLength, t = new Uint32Array(b.buffer, 0, b.byteLength >> 2), W = t.length, B = C + 7 >> 3, w = 4294967295, n = GI.isLittleEndian ? 4278190080 : 255;
    for (o = 0; o < l; o++) {
      for (e = o < i ? wI : A, c = 0, m = 0; m < e; m++) {
        const V = h - d;
        let N = 0;
        const R = V > B ? C : V * 8 - 7, Y = R & -8;
        let y = 0, X = 0;
        for (; N < Y; N += 8)
          X = G[d++], t[c++] = X & 128 ? w : n, t[c++] = X & 64 ? w : n, t[c++] = X & 32 ? w : n, t[c++] = X & 16 ? w : n, t[c++] = X & 8 ? w : n, t[c++] = X & 4 ? w : n, t[c++] = X & 2 ? w : n, t[c++] = X & 1 ? w : n;
        for (; N < R; N++)
          y === 0 && (X = G[d++], y = 128), t[c++] = X & y ? w : n, y >>= 1;
      }
      for (; c < W; )
        t[c++] = 0;
      Z.putImageData(s, 0, o * wI);
    }
  } else if (I.kind === wC.RGBA_32BPP) {
    for (m = 0, a = C * wI * 4, o = 0; o < i; o++)
      b.set(G.subarray(d, d + a)), d += a, Z.putImageData(s, 0, m), m += wI;
    o < l && (a = C * A * 4, b.set(G.subarray(d, d + a)), Z.putImageData(s, 0, m));
  } else if (I.kind === wC.RGB_24BPP)
    for (e = wI, a = C * e, o = 0; o < l; o++) {
      for (o >= i && (e = A, a = C * e), c = 0, m = a; m--; )
        b[c++] = G[d++], b[c++] = G[d++], b[c++] = G[d++], b[c++] = 255;
      Z.putImageData(s, 0, o * wI);
    }
  else
    throw new Error(`bad image kind: ${I.kind}`);
}
function ai(Z, I) {
  if (I.bitmap) {
    Z.drawImage(I.bitmap, 0, 0);
    return;
  }
  const g = I.height, C = I.width, A = g % wI, i = (g - A) / wI, l = A === 0 ? i : i + 1, s = Z.createImageData(C, wI);
  let d = 0;
  const c = I.data, G = s.data;
  for (let b = 0; b < l; b++) {
    const o = b < i ? wI : A;
    ({
      srcPos: d
    } = Id({
      src: c,
      srcPos: d,
      dest: G,
      width: C,
      height: o,
      nonBlackColor: 0
    })), Z.putImageData(s, 0, b * wI);
  }
}
function Sg(Z, I) {
  const g = ["strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font", "filter"];
  for (const C of g)
    Z[C] !== void 0 && (I[C] = Z[C]);
  Z.setLineDash !== void 0 && (I.setLineDash(Z.getLineDash()), I.lineDashOffset = Z.lineDashOffset);
}
function oC(Z) {
  Z.strokeStyle = Z.fillStyle = "#000000", Z.fillRule = "nonzero", Z.globalAlpha = 1, Z.lineWidth = 1, Z.lineCap = "butt", Z.lineJoin = "miter", Z.miterLimit = 10, Z.globalCompositeOperation = "source-over", Z.font = "10px sans-serif", Z.setLineDash !== void 0 && (Z.setLineDash([]), Z.lineDashOffset = 0);
  const {
    filter: I
  } = Z;
  I !== "none" && I !== "" && (Z.filter = "none");
}
function ei(Z, I) {
  if (I)
    return !0;
  M.singularValueDecompose2dScale(Z, YI);
  const g = Math.fround(Gg.pixelRatio * Hg.PDF_TO_CSS_UNITS);
  return YI[0] <= g && YI[1] <= g;
}
const id = ["butt", "round", "square"], ld = ["miter", "round", "bevel"], sd = {}, ti = {};
class ng {
  constructor(I, g, C, A, i, {
    optionalContentConfig: l,
    markedContentStack: s = null
  }, d, c, G) {
    this.ctx = I, this.current = new oi(this.ctx.canvas.width, this.ctx.canvas.height), this.stateStack = [], this.pendingClip = null, this.pendingEOFill = !1, this.res = null, this.xobjs = null, this.commonObjs = g, this.objs = C, this.canvasFactory = A, this.filterFactory = i, this.groupStack = [], this.baseTransform = null, this.baseTransformStack = [], this.groupLevel = 0, this.smaskStack = [], this.smaskCounter = 0, this.tempSMask = null, this.suspendedCtx = null, this.contentVisible = !0, this.markedContentStack = s || [], this.optionalContentConfig = l, this.cachedCanvases = new Ad(this.canvasFactory), this.cachedPatterns = /* @__PURE__ */ new Map(), this.annotationCanvasMap = d, this.viewportScale = 1, this.outputScaleX = 1, this.outputScaleY = 1, this.pageColors = c, this._cachedScaleForStroking = [-1, 0], this._cachedGetSinglePixelWidth = null, this._cachedBitmapsMap = /* @__PURE__ */ new Map(), this.dependencyTracker = G ?? null;
  }
  getObject(I, g, C = null) {
    return typeof g == "string" ? (this.dependencyTracker?.recordNamedDependency(I, g), g.startsWith("g_") ? this.commonObjs.get(g) : this.objs.get(g)) : C;
  }
  beginDrawing({
    transform: I,
    viewport: g,
    transparency: C = !1,
    background: A = null
  }) {
    const i = this.ctx.canvas.width, l = this.ctx.canvas.height, s = this.ctx.fillStyle;
    if (this.ctx.fillStyle = A || "#ffffff", this.ctx.fillRect(0, 0, i, l), this.ctx.fillStyle = s, C) {
      const d = this.cachedCanvases.getCanvas("transparent", i, l);
      this.compositeCtx = this.ctx, this.transparentCanvas = d.canvas, this.ctx = d.context, this.ctx.save(), this.ctx.transform(...q(this.compositeCtx));
    }
    this.ctx.save(), oC(this.ctx), I && (this.ctx.transform(...I), this.outputScaleX = I[0], this.outputScaleY = I[0]), this.ctx.transform(...g.transform), this.viewportScale = g.scale, this.baseTransform = q(this.ctx);
  }
  executeOperatorList(I, g, C, A, i) {
    const l = I.argsArray, s = I.fnArray;
    let d = g || 0;
    const c = l.length;
    if (c === d)
      return d;
    const G = c - d > bi && typeof C == "function", b = G ? Date.now() + gd : 0;
    let o = 0;
    const m = this.commonObjs, e = this.objs;
    let a, h;
    for (; ; ) {
      if (A !== void 0 && d === A.nextBreakPoint)
        return A.breakIt(d, C), d;
      if (!i || i(d))
        if (a = s[d], h = l[d] ?? null, a !== Ug.dependency)
          h === null ? this[a](d) : this[a](d, ...h);
        else
          for (const t of h) {
            this.dependencyTracker?.recordNamedData(t, d);
            const W = t.startsWith("g_") ? m : e;
            if (!W.has(t))
              return W.get(t, C), d;
          }
      if (d++, d === c)
        return d;
      if (G && ++o > bi) {
        if (Date.now() > b)
          return C(), d;
        o = 0;
      }
    }
  }
  #I() {
    for (; this.stateStack.length || this.inSMaskMode; )
      this.restore();
    this.current.activeSMask = null, this.ctx.restore(), this.transparentCanvas && (this.ctx = this.compositeCtx, this.ctx.save(), this.ctx.setTransform(1, 0, 0, 1, 0, 0), this.ctx.drawImage(this.transparentCanvas, 0, 0), this.ctx.restore(), this.transparentCanvas = null);
  }
  endDrawing() {
    this.#I(), this.cachedCanvases.clear(), this.cachedPatterns.clear();
    for (const I of this._cachedBitmapsMap.values()) {
      for (const g of I.values())
        typeof HTMLCanvasElement < "u" && g instanceof HTMLCanvasElement && (g.width = g.height = 0);
      I.clear();
    }
    this._cachedBitmapsMap.clear(), this.#g();
  }
  #g() {
    if (this.pageColors) {
      const I = this.filterFactory.addHCMFilter(this.pageColors.foreground, this.pageColors.background);
      if (I !== "none") {
        const g = this.ctx.filter;
        this.ctx.filter = I, this.ctx.drawImage(this.ctx.canvas, 0, 0), this.ctx.filter = g;
      }
    }
  }
  _scaleImage(I, g) {
    const C = I.width ?? I.displayWidth, A = I.height ?? I.displayHeight;
    let i = Math.max(Math.hypot(g[0], g[1]), 1), l = Math.max(Math.hypot(g[2], g[3]), 1), s = C, d = A, c = "prescale1", G, b;
    for (; i > 2 && s > 1 || l > 2 && d > 1; ) {
      let o = s, m = d;
      i > 2 && s > 1 && (o = s >= 16384 ? Math.floor(s / 2) - 1 || 1 : Math.ceil(s / 2), i /= s / o), l > 2 && d > 1 && (m = d >= 16384 ? Math.floor(d / 2) - 1 || 1 : Math.ceil(d) / 2, l /= d / m), G = this.cachedCanvases.getCanvas(c, o, m), b = G.context, b.clearRect(0, 0, o, m), b.drawImage(I, 0, 0, s, d, 0, 0, o, m), I = G.canvas, s = o, d = m, c = c === "prescale1" ? "prescale2" : "prescale1";
    }
    return {
      img: I,
      paintWidth: s,
      paintHeight: d
    };
  }
  _createMaskCanvas(I, g) {
    const C = this.ctx, {
      width: A,
      height: i
    } = g, l = this.current.fillColor, s = this.current.patternFill, d = q(C);
    let c, G, b, o;
    if ((g.bitmap || g.data) && g.count > 1) {
      const y = g.bitmap || g.data.buffer;
      G = JSON.stringify(s ? d : [d.slice(0, 4), l]), c = this._cachedBitmapsMap.get(y), c || (c = /* @__PURE__ */ new Map(), this._cachedBitmapsMap.set(y, c));
      const X = c.get(G);
      if (X && !s) {
        const K = Math.round(Math.min(d[0], d[2]) + d[4]), S = Math.round(Math.min(d[1], d[3]) + d[5]);
        return this.dependencyTracker?.recordDependencies(I, NI.transformAndFill), {
          canvas: X,
          offsetX: K,
          offsetY: S
        };
      }
      b = X;
    }
    b || (o = this.cachedCanvases.getCanvas("maskCanvas", A, i), ai(o.context, g));
    let m = M.transform(d, [1 / A, 0, 0, -1 / i, 0, 0]);
    m = M.transform(m, [1, 0, 0, 1, 0, -i]);
    const e = Wg.slice();
    M.axialAlignedBoundingBox([0, 0, A, i], m, e);
    const [a, h, t, W] = e, B = Math.round(t - a) || 1, w = Math.round(W - h) || 1, n = this.cachedCanvases.getCanvas("fillCanvas", B, w), V = n.context, N = a, R = h;
    V.translate(-N, -R), V.transform(...m), b || (b = this._scaleImage(o.canvas, DI(V)), b = b.img, c && s && c.set(G, b)), V.imageSmoothingEnabled = ei(q(V), g.interpolate), bC(V, b, 0, 0, b.width, b.height, 0, 0, A, i), V.globalCompositeOperation = "source-in";
    const Y = M.transform(DI(V), [1, 0, 0, 1, -N, -R]);
    return V.fillStyle = s ? l.getPattern(C, this, Y, cI.FILL, I) : l, V.fillRect(0, 0, A, i), c && !s && (this.cachedCanvases.delete("fillCanvas"), c.set(G, n.canvas)), this.dependencyTracker?.recordDependencies(I, NI.transformAndFill), {
      canvas: n.canvas,
      offsetX: Math.round(N),
      offsetY: Math.round(R)
    };
  }
  setLineWidth(I, g) {
    this.dependencyTracker?.recordSimpleData("lineWidth", I), g !== this.current.lineWidth && (this._cachedScaleForStroking[0] = -1), this.current.lineWidth = g, this.ctx.lineWidth = g;
  }
  setLineCap(I, g) {
    this.dependencyTracker?.recordSimpleData("lineCap", I), this.ctx.lineCap = id[g];
  }
  setLineJoin(I, g) {
    this.dependencyTracker?.recordSimpleData("lineJoin", I), this.ctx.lineJoin = ld[g];
  }
  setMiterLimit(I, g) {
    this.dependencyTracker?.recordSimpleData("miterLimit", I), this.ctx.miterLimit = g;
  }
  setDash(I, g, C) {
    this.dependencyTracker?.recordSimpleData("dash", I);
    const A = this.ctx;
    A.setLineDash !== void 0 && (A.setLineDash(g), A.lineDashOffset = C);
  }
  setRenderingIntent(I, g) {
  }
  setFlatness(I, g) {
  }
  setGState(I, g) {
    for (const [C, A] of g)
      switch (C) {
        case "LW":
          this.setLineWidth(I, A);
          break;
        case "LC":
          this.setLineCap(I, A);
          break;
        case "LJ":
          this.setLineJoin(I, A);
          break;
        case "ML":
          this.setMiterLimit(I, A);
          break;
        case "D":
          this.setDash(I, A[0], A[1]);
          break;
        case "RI":
          this.setRenderingIntent(I, A);
          break;
        case "FL":
          this.setFlatness(I, A);
          break;
        case "Font":
          this.setFont(I, A[0], A[1]);
          break;
        case "CA":
          this.dependencyTracker?.recordSimpleData("strokeAlpha", I), this.current.strokeAlpha = A;
          break;
        case "ca":
          this.dependencyTracker?.recordSimpleData("fillAlpha", I), this.ctx.globalAlpha = this.current.fillAlpha = A;
          break;
        case "BM":
          this.dependencyTracker?.recordSimpleData("globalCompositeOperation", I), this.ctx.globalCompositeOperation = A;
          break;
        case "SMask":
          this.dependencyTracker?.recordSimpleData("SMask", I), this.current.activeSMask = A ? this.tempSMask : null, this.tempSMask = null, this.checkSMaskState();
          break;
        case "TR":
          this.dependencyTracker?.recordSimpleData("filter", I), this.ctx.filter = this.current.transferMaps = this.filterFactory.addFilter(A);
          break;
      }
  }
  get inSMaskMode() {
    return !!this.suspendedCtx;
  }
  checkSMaskState() {
    const I = this.inSMaskMode;
    this.current.activeSMask && !I ? this.beginSMaskMode() : !this.current.activeSMask && I && this.endSMaskMode();
  }
  beginSMaskMode(I) {
    if (this.inSMaskMode)
      throw new Error("beginSMaskMode called while already in smask mode");
    const g = this.ctx.canvas.width, C = this.ctx.canvas.height, A = "smaskGroupAt" + this.groupLevel, i = this.cachedCanvases.getCanvas(A, g, C);
    this.suspendedCtx = this.ctx;
    const l = this.ctx = i.context;
    l.setTransform(this.suspendedCtx.getTransform()), Sg(this.suspendedCtx, l), Cd(l, this.suspendedCtx), this.setGState(I, [["BM", "source-over"]]);
  }
  endSMaskMode() {
    if (!this.inSMaskMode)
      throw new Error("endSMaskMode called while not in smask mode");
    this.ctx._removeMirroring(), Sg(this.ctx, this.suspendedCtx), this.ctx = this.suspendedCtx, this.suspendedCtx = null;
  }
  compose(I) {
    if (!this.current.activeSMask)
      return;
    I ? (I[0] = Math.floor(I[0]), I[1] = Math.floor(I[1]), I[2] = Math.ceil(I[2]), I[3] = Math.ceil(I[3])) : I = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];
    const g = this.current.activeSMask, C = this.suspendedCtx;
    this.composeSMask(C, g, this.ctx, I), this.ctx.save(), this.ctx.setTransform(1, 0, 0, 1, 0, 0), this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height), this.ctx.restore();
  }
  composeSMask(I, g, C, A) {
    const i = A[0], l = A[1], s = A[2] - i, d = A[3] - l;
    s === 0 || d === 0 || (this.genericComposeSMask(g.context, C, s, d, g.subtype, g.backdrop, g.transferMap, i, l, g.offsetX, g.offsetY), I.save(), I.globalAlpha = 1, I.globalCompositeOperation = "source-over", I.setTransform(1, 0, 0, 1, 0, 0), I.drawImage(C.canvas, 0, 0), I.restore());
  }
  genericComposeSMask(I, g, C, A, i, l, s, d, c, G, b) {
    let o = I.canvas, m = d - G, e = c - b;
    if (l)
      if (m < 0 || e < 0 || m + C > o.width || e + A > o.height) {
        const h = this.cachedCanvases.getCanvas("maskExtension", C, A), t = h.context;
        t.drawImage(o, -m, -e), t.globalCompositeOperation = "destination-atop", t.fillStyle = l, t.fillRect(0, 0, C, A), t.globalCompositeOperation = "source-over", o = h.canvas, m = e = 0;
      } else {
        I.save(), I.globalAlpha = 1, I.setTransform(1, 0, 0, 1, 0, 0);
        const h = new Path2D();
        h.rect(m, e, C, A), I.clip(h), I.globalCompositeOperation = "destination-atop", I.fillStyle = l, I.fillRect(m, e, C, A), I.restore();
      }
    g.save(), g.globalAlpha = 1, g.setTransform(1, 0, 0, 1, 0, 0), i === "Alpha" && s ? g.filter = this.filterFactory.addAlphaFilter(s) : i === "Luminosity" && (g.filter = this.filterFactory.addLuminosityFilter(s));
    const a = new Path2D();
    a.rect(d, c, C, A), g.clip(a), g.globalCompositeOperation = "destination-in", g.drawImage(o, m, e, C, A, d, c, C, A), g.restore();
  }
  save(I) {
    this.inSMaskMode && Sg(this.ctx, this.suspendedCtx), this.ctx.save();
    const g = this.current;
    this.stateStack.push(g), this.current = g.clone(), this.dependencyTracker?.save(I);
  }
  restore(I) {
    if (this.dependencyTracker?.restore(I), this.stateStack.length === 0) {
      this.inSMaskMode && this.endSMaskMode();
      return;
    }
    this.current = this.stateStack.pop(), this.ctx.restore(), this.inSMaskMode && Sg(this.suspendedCtx, this.ctx), this.checkSMaskState(), this.pendingClip = null, this._cachedScaleForStroking[0] = -1, this._cachedGetSinglePixelWidth = null;
  }
  transform(I, g, C, A, i, l, s) {
    this.dependencyTracker?.recordIncrementalData("transform", I), this.ctx.transform(g, C, A, i, l, s), this._cachedScaleForStroking[0] = -1, this._cachedGetSinglePixelWidth = null;
  }
  constructPath(I, g, C, A) {
    let [i] = C;
    if (!A) {
      i ||= C[0] = new Path2D(), this[g](I, i);
      return;
    }
    if (this.dependencyTracker !== null) {
      const l = g === Ug.stroke ? this.current.lineWidth / 2 : 0;
      this.dependencyTracker.resetBBox(I).recordBBox(I, this.ctx, A[0] - l, A[2] + l, A[1] - l, A[3] + l).recordDependencies(I, ["transform"]);
    }
    if (!(i instanceof Path2D)) {
      const l = C[0] = new Path2D();
      for (let s = 0, d = i.length; s < d; )
        switch (i[s++]) {
          case lC.moveTo:
            l.moveTo(i[s++], i[s++]);
            break;
          case lC.lineTo:
            l.lineTo(i[s++], i[s++]);
            break;
          case lC.curveTo:
            l.bezierCurveTo(i[s++], i[s++], i[s++], i[s++], i[s++], i[s++]);
            break;
          case lC.closePath:
            l.closePath();
            break;
          default:
            L(`Unrecognized drawing path operator: ${i[s - 1]}`);
            break;
        }
      i = l;
    }
    M.axialAlignedBoundingBox(A, q(this.ctx), this.current.minMax), this[g](I, i), this._pathStartIdx = I;
  }
  closePath(I) {
    this.ctx.closePath();
  }
  stroke(I, g, C = !0) {
    const A = this.ctx, i = this.current.strokeColor;
    if (A.globalAlpha = this.current.strokeAlpha, this.contentVisible)
      if (typeof i == "object" && i?.getPattern) {
        const l = i.isModifyingCurrentTransform() ? A.getTransform() : null;
        if (A.save(), A.strokeStyle = i.getPattern(A, this, DI(A), cI.STROKE, I), l) {
          const s = new Path2D();
          s.addPath(g, A.getTransform().invertSelf().multiplySelf(l)), g = s;
        }
        this.rescaleAndStroke(g, !1), A.restore();
      } else
        this.rescaleAndStroke(g, !0);
    this.dependencyTracker?.recordDependencies(I, NI.stroke), C && this.consumePath(I, g, this.current.getClippedPathBoundingBox(cI.STROKE, q(this.ctx))), A.globalAlpha = this.current.fillAlpha;
  }
  closeStroke(I, g) {
    this.stroke(I, g);
  }
  fill(I, g, C = !0) {
    const A = this.ctx, i = this.current.fillColor, l = this.current.patternFill;
    let s = !1;
    if (l) {
      const c = i.isModifyingCurrentTransform() ? A.getTransform() : null;
      if (this.dependencyTracker?.save(I), A.save(), A.fillStyle = i.getPattern(A, this, DI(A), cI.FILL, I), c) {
        const G = new Path2D();
        G.addPath(g, A.getTransform().invertSelf().multiplySelf(c)), g = G;
      }
      s = !0;
    }
    const d = this.current.getClippedPathBoundingBox();
    this.contentVisible && d !== null && (this.pendingEOFill ? (A.fill(g, "evenodd"), this.pendingEOFill = !1) : A.fill(g)), this.dependencyTracker?.recordDependencies(I, NI.fill), s && (A.restore(), this.dependencyTracker?.restore(I)), C && this.consumePath(I, g, d);
  }
  eoFill(I, g) {
    this.pendingEOFill = !0, this.fill(I, g);
  }
  fillStroke(I, g) {
    this.fill(I, g, !1), this.stroke(I, g, !1), this.consumePath(I, g);
  }
  eoFillStroke(I, g) {
    this.pendingEOFill = !0, this.fillStroke(I, g);
  }
  closeFillStroke(I, g) {
    this.fillStroke(I, g);
  }
  closeEOFillStroke(I, g) {
    this.pendingEOFill = !0, this.fillStroke(I, g);
  }
  endPath(I, g) {
    this.consumePath(I, g);
  }
  rawFillPath(I, g) {
    this.ctx.fill(g), this.dependencyTracker?.recordDependencies(I, NI.rawFillPath).recordOperation(I);
  }
  clip(I) {
    this.dependencyTracker?.recordFutureForcedDependency("clipMode", I), this.pendingClip = sd;
  }
  eoClip(I) {
    this.dependencyTracker?.recordFutureForcedDependency("clipMode", I), this.pendingClip = ti;
  }
  beginText(I) {
    this.current.textMatrix = null, this.current.textMatrixScale = 1, this.current.x = this.current.lineX = 0, this.current.y = this.current.lineY = 0, this.dependencyTracker?.recordOpenMarker(I).resetIncrementalData("sameLineText").resetIncrementalData("moveText", I);
  }
  endText(I) {
    const g = this.pendingTextPaths, C = this.ctx;
    if (this.dependencyTracker) {
      const {
        dependencyTracker: A
      } = this;
      g !== void 0 && A.recordFutureForcedDependency("textClip", A.getOpenMarker()).recordFutureForcedDependency("textClip", I), A.recordCloseMarker(I);
    }
    if (g !== void 0) {
      const A = new Path2D(), i = C.getTransform().invertSelf();
      for (const {
        transform: l,
        x: s,
        y: d,
        fontSize: c,
        path: G
      } of g)
        G && A.addPath(G, new DOMMatrix(l).preMultiplySelf(i).translate(s, d).scale(c, -c));
      C.clip(A);
    }
    delete this.pendingTextPaths;
  }
  setCharSpacing(I, g) {
    this.dependencyTracker?.recordSimpleData("charSpacing", I), this.current.charSpacing = g;
  }
  setWordSpacing(I, g) {
    this.dependencyTracker?.recordSimpleData("wordSpacing", I), this.current.wordSpacing = g;
  }
  setHScale(I, g) {
    this.dependencyTracker?.recordSimpleData("hScale", I), this.current.textHScale = g / 100;
  }
  setLeading(I, g) {
    this.dependencyTracker?.recordSimpleData("leading", I), this.current.leading = -g;
  }
  setFont(I, g, C) {
    this.dependencyTracker?.recordSimpleData("font", I).recordSimpleDataFromNamed("fontObj", g, I);
    const A = this.commonObjs.get(g), i = this.current;
    if (!A)
      throw new Error(`Can't find font for ${g}`);
    if (i.fontMatrix = A.fontMatrix || iA, (i.fontMatrix[0] === 0 || i.fontMatrix[3] === 0) && L("Invalid font matrix for font " + g), C < 0 ? (C = -C, i.fontDirection = -1) : i.fontDirection = 1, this.current.font = A, this.current.fontSize = C, A.isType3Font)
      return;
    const l = A.loadedName || "sans-serif", s = A.systemFontInfo?.css || `"${l}", ${A.fallbackName}`;
    let d = "normal";
    A.black ? d = "900" : A.bold && (d = "bold");
    const c = A.italic ? "italic" : "normal";
    let G = C;
    C < ci ? G = ci : C > Gi && (G = Gi), this.current.fontSizeScale = C / G, this.ctx.font = `${c} ${d} ${G}px ${s}`;
  }
  setTextRenderingMode(I, g) {
    this.dependencyTracker?.recordSimpleData("textRenderingMode", I), this.current.textRenderingMode = g;
  }
  setTextRise(I, g) {
    this.dependencyTracker?.recordSimpleData("textRise", I), this.current.textRise = g;
  }
  moveText(I, g, C) {
    this.dependencyTracker?.resetIncrementalData("sameLineText").recordIncrementalData("moveText", I), this.current.x = this.current.lineX += g, this.current.y = this.current.lineY += C;
  }
  setLeadingMoveText(I, g, C) {
    this.setLeading(I, -C), this.moveText(I, g, C);
  }
  setTextMatrix(I, g) {
    this.dependencyTracker?.recordSimpleData("textMatrix", I);
    const {
      current: C
    } = this;
    C.textMatrix = g, C.textMatrixScale = Math.hypot(g[0], g[1]), C.x = C.lineX = 0, C.y = C.lineY = 0;
  }
  nextLine(I) {
    this.moveText(I, 0, this.current.leading), this.dependencyTracker?.recordIncrementalData("moveText", this.dependencyTracker.getSimpleIndex("leading") ?? I);
  }
  #A(I, g, C) {
    const A = new Path2D();
    return A.addPath(I, new DOMMatrix(C).invertSelf().multiplySelf(g)), A;
  }
  paintChar(I, g, C, A, i, l) {
    const s = this.ctx, d = this.current, c = d.font, G = d.textRenderingMode, b = d.fontSize / d.fontSizeScale, o = G & ZI.FILL_STROKE_MASK, m = !!(G & ZI.ADD_TO_PATH_FLAG), e = d.patternFill && !c.missingFile, a = d.patternStroke && !c.missingFile;
    let h;
    if ((c.disableFontFace || m || e || a) && !c.missingFile && (h = c.getPathGenerator(this.commonObjs, g)), h && (c.disableFontFace || e || a)) {
      s.save(), s.translate(C, A), s.scale(b, -b), this.dependencyTracker?.recordCharacterBBox(I, s, c);
      let t;
      if (o === ZI.FILL || o === ZI.FILL_STROKE)
        if (i) {
          t = s.getTransform(), s.setTransform(...i);
          const W = this.#A(h, t, i);
          s.fill(W);
        } else
          s.fill(h);
      if (o === ZI.STROKE || o === ZI.FILL_STROKE)
        if (l) {
          t ||= s.getTransform(), s.setTransform(...l);
          const {
            a: W,
            b: B,
            c: w,
            d: n
          } = t, V = M.inverseTransform(l), N = M.transform([W, B, w, n, 0, 0], V);
          M.singularValueDecompose2dScale(N, YI), s.lineWidth *= Math.max(YI[0], YI[1]) / b, s.stroke(this.#A(h, t, l));
        } else
          s.lineWidth /= b, s.stroke(h);
      s.restore();
    } else
      (o === ZI.FILL || o === ZI.FILL_STROKE) && (s.fillText(g, C, A), this.dependencyTracker?.recordCharacterBBox(I, s, c, b, C, A, () => s.measureText(g))), (o === ZI.STROKE || o === ZI.FILL_STROKE) && (this.dependencyTracker && this.dependencyTracker?.recordCharacterBBox(I, s, c, b, C, A, () => s.measureText(g)).recordDependencies(I, NI.stroke), s.strokeText(g, C, A));
    m && ((this.pendingTextPaths ||= []).push({
      transform: q(s),
      x: C,
      y: A,
      fontSize: b,
      path: h
    }), this.dependencyTracker?.recordCharacterBBox(I, s, c, b, C, A));
  }
  get isFontSubpixelAAEnabled() {
    const {
      context: I
    } = this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled", 10, 10);
    I.scale(1.5, 1), I.fillText("I", 0, 10);
    const g = I.getImageData(0, 0, 10, 10).data;
    let C = !1;
    for (let A = 3; A < g.length; A += 4)
      if (g[A] > 0 && g[A] < 255) {
        C = !0;
        break;
      }
    return T(this, "isFontSubpixelAAEnabled", C);
  }
  showText(I, g) {
    this.dependencyTracker && (this.dependencyTracker.recordDependencies(I, NI.showText).resetBBox(I), this.current.textRenderingMode & ZI.ADD_TO_PATH_FLAG && this.dependencyTracker.recordFutureForcedDependency("textClip", I).inheritPendingDependenciesAsFutureForcedDependencies());
    const C = this.current, A = C.font;
    if (A.isType3Font) {
      this.showType3Text(I, g), this.dependencyTracker?.recordShowTextOperation(I);
      return;
    }
    const i = C.fontSize;
    if (i === 0) {
      this.dependencyTracker?.recordOperation(I);
      return;
    }
    const l = this.ctx, s = C.fontSizeScale, d = C.charSpacing, c = C.wordSpacing, G = C.fontDirection, b = C.textHScale * G, o = g.length, m = A.vertical, e = m ? 1 : -1, a = A.defaultVMetrics, h = i * C.fontMatrix[0], t = C.textRenderingMode === ZI.FILL && !A.disableFontFace && !C.patternFill;
    l.save(), C.textMatrix && l.transform(...C.textMatrix), l.translate(C.x, C.y + C.textRise), G > 0 ? l.scale(b, -1) : l.scale(b, 1);
    let W, B;
    if (C.patternFill) {
      l.save();
      const R = C.fillColor.getPattern(l, this, DI(l), cI.FILL, I);
      W = q(l), l.restore(), l.fillStyle = R;
    }
    if (C.patternStroke) {
      l.save();
      const R = C.strokeColor.getPattern(l, this, DI(l), cI.STROKE, I);
      B = q(l), l.restore(), l.strokeStyle = R;
    }
    let w = C.lineWidth;
    const n = C.textMatrixScale;
    if (n === 0 || w === 0) {
      const R = C.textRenderingMode & ZI.FILL_STROKE_MASK;
      (R === ZI.STROKE || R === ZI.FILL_STROKE) && (w = this.getSinglePixelWidth());
    } else
      w /= n;
    if (s !== 1 && (l.scale(s, s), w /= s), l.lineWidth = w, A.isInvalidPDFjsFont) {
      const R = [];
      let Y = 0;
      for (const X of g)
        R.push(X.unicode), Y += X.width;
      const y = R.join("");
      if (l.fillText(y, 0, 0), this.dependencyTracker !== null) {
        const X = l.measureText(y);
        this.dependencyTracker.recordBBox(I, this.ctx, -X.actualBoundingBoxLeft, X.actualBoundingBoxRight, -X.actualBoundingBoxAscent, X.actualBoundingBoxDescent).recordShowTextOperation(I);
      }
      C.x += Y * h * b, l.restore(), this.compose();
      return;
    }
    let V = 0, N;
    for (N = 0; N < o; ++N) {
      const R = g[N];
      if (typeof R == "number") {
        V += e * R * i / 1e3;
        continue;
      }
      let Y = !1;
      const y = (R.isSpace ? c : 0) + d, X = R.fontChar, K = R.accent;
      let S, p, r = R.width;
      if (m) {
        const U = R.vmetric || a, mI = -(R.vmetric ? U[1] : r * 0.5) * h, kI = U[2] * h;
        r = U ? -U[0] : r, S = mI / s, p = (V + kI) / s;
      } else
        S = V / s, p = 0;
      let D;
      if (A.remeasure && r > 0) {
        D = l.measureText(X);
        const U = D.width * 1e3 / i * s;
        if (r < U && this.isFontSubpixelAAEnabled) {
          const mI = r / U;
          Y = !0, l.save(), l.scale(mI, 1), S /= mI;
        } else r !== U && (S += (r - U) / 2e3 * i / s);
      }
      if (this.contentVisible && (R.isInFont || A.missingFile)) {
        if (t && !K)
          l.fillText(X, S, p), this.dependencyTracker?.recordCharacterBBox(I, l, D ? {
            bbox: null
          } : A, i / s, S, p, () => D ?? l.measureText(X));
        else if (this.paintChar(I, X, S, p, W, B), K) {
          const U = S + i * K.offset.x / s, mI = p - i * K.offset.y / s;
          this.paintChar(I, K.fontChar, U, mI, W, B);
        }
      }
      const z = m ? r * h - y * G : r * h + y * G;
      V += z, Y && l.restore();
    }
    m ? C.y -= V : C.x += V * b, l.restore(), this.compose(), this.dependencyTracker?.recordShowTextOperation(I);
  }
  showType3Text(I, g) {
    const C = this.ctx, A = this.current, i = A.font, l = A.fontSize, s = A.fontDirection, d = i.vertical ? 1 : -1, c = A.charSpacing, G = A.wordSpacing, b = A.textHScale * s, o = A.fontMatrix || iA, m = g.length, e = A.textRenderingMode === ZI.INVISIBLE;
    let a, h, t, W;
    if (e || l === 0)
      return;
    this._cachedScaleForStroking[0] = -1, this._cachedGetSinglePixelWidth = null, C.save(), A.textMatrix && C.transform(...A.textMatrix), C.translate(A.x, A.y + A.textRise), C.scale(b, s);
    const B = this.dependencyTracker;
    for (this.dependencyTracker = B ? new RC(B, I) : null, a = 0; a < m; ++a) {
      if (h = g[a], typeof h == "number") {
        W = d * h * l / 1e3, this.ctx.translate(W, 0), A.x += W * b;
        continue;
      }
      const w = (h.isSpace ? G : 0) + c, n = i.charProcOperatorList[h.operatorListId];
      n ? this.contentVisible && (this.save(), C.scale(l, l), C.transform(...o), this.executeOperatorList(n), this.restore()) : L(`Type3 character "${h.operatorListId}" is not available.`);
      const V = [h.width, 0];
      M.applyTransform(V, o), t = V[0] * l + w, C.translate(t, 0), A.x += t * b;
    }
    C.restore(), B && (this.dependencyTracker = B);
  }
  setCharWidth(I, g, C) {
  }
  setCharWidthAndBounds(I, g, C, A, i, l, s) {
    const d = new Path2D();
    d.rect(A, i, l - A, s - i), this.ctx.clip(d), this.dependencyTracker?.recordBBox(I, this.ctx, A, l, i, s).recordClipBox(I, this.ctx, A, l, i, s), this.endPath(I);
  }
  getColorN_Pattern(I, g) {
    let C;
    if (g[0] === "TilingPattern") {
      const A = this.baseTransform || q(this.ctx), i = {
        createCanvasGraphics: (l, s) => new ng(l, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {
          optionalContentConfig: this.optionalContentConfig,
          markedContentStack: this.markedContentStack
        }, void 0, void 0, this.dependencyTracker ? new RC(this.dependencyTracker, s, !0) : null)
      };
      C = new FA(g, this.ctx, i, A);
    } else
      C = this._getPattern(I, g[1], g[2]);
    return C;
  }
  setStrokeColorN(I, ...g) {
    this.dependencyTracker?.recordSimpleData("strokeColor", I), this.current.strokeColor = this.getColorN_Pattern(I, g), this.current.patternStroke = !0;
  }
  setFillColorN(I, ...g) {
    this.dependencyTracker?.recordSimpleData("fillColor", I), this.current.fillColor = this.getColorN_Pattern(I, g), this.current.patternFill = !0;
  }
  setStrokeRGBColor(I, g) {
    this.dependencyTracker?.recordSimpleData("strokeColor", I), this.ctx.strokeStyle = this.current.strokeColor = g, this.current.patternStroke = !1;
  }
  setStrokeTransparent(I) {
    this.dependencyTracker?.recordSimpleData("strokeColor", I), this.ctx.strokeStyle = this.current.strokeColor = "transparent", this.current.patternStroke = !1;
  }
  setFillRGBColor(I, g) {
    this.dependencyTracker?.recordSimpleData("fillColor", I), this.ctx.fillStyle = this.current.fillColor = g, this.current.patternFill = !1;
  }
  setFillTransparent(I) {
    this.dependencyTracker?.recordSimpleData("fillColor", I), this.ctx.fillStyle = this.current.fillColor = "transparent", this.current.patternFill = !1;
  }
  _getPattern(I, g, C = null) {
    let A;
    return this.cachedPatterns.has(g) ? A = this.cachedPatterns.get(g) : (A = $s(this.getObject(I, g)), this.cachedPatterns.set(g, A)), C && (A.matrix = C), A;
  }
  shadingFill(I, g) {
    if (!this.contentVisible)
      return;
    const C = this.ctx;
    this.save(I);
    const A = this._getPattern(I, g);
    C.fillStyle = A.getPattern(C, this, DI(C), cI.SHADING, I);
    const i = DI(C);
    if (i) {
      const {
        width: l,
        height: s
      } = C.canvas, d = Wg.slice();
      M.axialAlignedBoundingBox([0, 0, l, s], i, d);
      const [c, G, b, o] = d;
      this.ctx.fillRect(c, G, b - c, o - G);
    } else
      this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
    this.dependencyTracker?.resetBBox(I).recordFullPageBBox(I).recordDependencies(I, NI.transform).recordDependencies(I, NI.fill).recordOperation(I), this.compose(this.current.getClippedPathBoundingBox()), this.restore(I);
  }
  beginInlineImage() {
    f("Should not call beginInlineImage");
  }
  beginImageData() {
    f("Should not call beginImageData");
  }
  paintFormXObjectBegin(I, g, C) {
    if (this.contentVisible && (this.save(I), this.baseTransformStack.push(this.baseTransform), g && this.transform(I, ...g), this.baseTransform = q(this.ctx), C)) {
      M.axialAlignedBoundingBox(C, this.baseTransform, this.current.minMax);
      const [A, i, l, s] = C, d = new Path2D();
      d.rect(A, i, l - A, s - i), this.ctx.clip(d), this.dependencyTracker?.recordClipBox(I, this.ctx, A, l, i, s), this.endPath(I);
    }
  }
  paintFormXObjectEnd(I) {
    this.contentVisible && (this.restore(I), this.baseTransform = this.baseTransformStack.pop());
  }
  beginGroup(I, g) {
    if (!this.contentVisible)
      return;
    this.save(I), this.inSMaskMode && (this.endSMaskMode(), this.current.activeSMask = null);
    const C = this.ctx;
    g.isolated || pC("TODO: Support non-isolated groups."), g.knockout && L("Knockout groups not supported.");
    const A = q(C);
    if (g.matrix && C.transform(...g.matrix), !g.bbox)
      throw new Error("Bounding box is required.");
    let i = Wg.slice();
    M.axialAlignedBoundingBox(g.bbox, q(C), i);
    const l = [0, 0, C.canvas.width, C.canvas.height];
    i = M.intersect(i, l) || [0, 0, 0, 0];
    const s = Math.floor(i[0]), d = Math.floor(i[1]), c = Math.max(Math.ceil(i[2]) - s, 1), G = Math.max(Math.ceil(i[3]) - d, 1);
    this.current.startNewPathAndClipBox([0, 0, c, G]);
    let b = "groupAt" + this.groupLevel;
    g.smask && (b += "_smask_" + this.smaskCounter++ % 2);
    const o = this.cachedCanvases.getCanvas(b, c, G), m = o.context;
    m.translate(-s, -d), m.transform(...A);
    let e = new Path2D();
    const [a, h, t, W] = g.bbox;
    if (e.rect(a, h, t - a, W - h), g.matrix) {
      const B = new Path2D();
      B.addPath(e, new DOMMatrix(g.matrix)), e = B;
    }
    m.clip(e), g.smask && this.smaskStack.push({
      canvas: o.canvas,
      context: m,
      offsetX: s,
      offsetY: d,
      subtype: g.smask.subtype,
      backdrop: g.smask.backdrop,
      transferMap: g.smask.transferMap || null,
      startTransformInverse: null
    }), (!g.smask || this.dependencyTracker) && (C.setTransform(1, 0, 0, 1, 0, 0), C.translate(s, d), C.save()), Sg(C, m), this.ctx = m, this.dependencyTracker?.inheritSimpleDataAsFutureForcedDependencies(["fillAlpha", "strokeAlpha", "globalCompositeOperation"]).pushBaseTransform(C), this.setGState(I, [["BM", "source-over"], ["ca", 1], ["CA", 1]]), this.groupStack.push(C), this.groupLevel++;
  }
  endGroup(I, g) {
    if (!this.contentVisible)
      return;
    this.groupLevel--;
    const C = this.ctx, A = this.groupStack.pop();
    if (this.ctx = A, this.ctx.imageSmoothingEnabled = !1, this.dependencyTracker?.popBaseTransform(), g.smask)
      this.tempSMask = this.smaskStack.pop(), this.restore(I), this.dependencyTracker && this.ctx.restore();
    else {
      this.ctx.restore();
      const i = q(this.ctx);
      this.restore(I), this.ctx.save(), this.ctx.setTransform(...i);
      const l = Wg.slice();
      M.axialAlignedBoundingBox([0, 0, C.canvas.width, C.canvas.height], i, l), this.ctx.drawImage(C.canvas, 0, 0), this.ctx.restore(), this.compose(l);
    }
  }
  beginAnnotation(I, g, C, A, i, l) {
    if (this.#I(), oC(this.ctx), this.ctx.save(), this.save(I), this.baseTransform && this.ctx.setTransform(...this.baseTransform), C) {
      const s = C[2] - C[0], d = C[3] - C[1];
      if (l && this.annotationCanvasMap) {
        A = A.slice(), A[4] -= C[0], A[5] -= C[1], C = C.slice(), C[0] = C[1] = 0, C[2] = s, C[3] = d, M.singularValueDecompose2dScale(q(this.ctx), YI);
        const {
          viewportScale: c
        } = this, G = Math.ceil(s * this.outputScaleX * c), b = Math.ceil(d * this.outputScaleY * c);
        this.annotationCanvas = this.canvasFactory.create(G, b);
        const {
          canvas: o,
          context: m
        } = this.annotationCanvas;
        this.annotationCanvasMap.set(g, o), this.annotationCanvas.savedCtx = this.ctx, this.ctx = m, this.ctx.save(), this.ctx.setTransform(YI[0], 0, 0, -YI[1], 0, d * YI[1]), oC(this.ctx);
      } else {
        oC(this.ctx), this.endPath(I);
        const c = new Path2D();
        c.rect(C[0], C[1], s, d), this.ctx.clip(c);
      }
    }
    this.current = new oi(this.ctx.canvas.width, this.ctx.canvas.height), this.transform(I, ...A), this.transform(I, ...i);
  }
  endAnnotation(I) {
    this.annotationCanvas && (this.ctx.restore(), this.#g(), this.ctx = this.annotationCanvas.savedCtx, delete this.annotationCanvas.savedCtx, delete this.annotationCanvas);
  }
  paintImageMaskXObject(I, g) {
    if (!this.contentVisible)
      return;
    const C = g.count;
    g = this.getObject(I, g.data, g), g.count = C;
    const A = this.ctx, i = this._createMaskCanvas(I, g), l = i.canvas;
    A.save(), A.setTransform(1, 0, 0, 1, 0, 0), A.drawImage(l, i.offsetX, i.offsetY), this.dependencyTracker?.resetBBox(I).recordBBox(I, this.ctx, i.offsetX, i.offsetX + l.width, i.offsetY, i.offsetY + l.height).recordOperation(I), A.restore(), this.compose();
  }
  paintImageMaskXObjectRepeat(I, g, C, A = 0, i = 0, l, s) {
    if (!this.contentVisible)
      return;
    g = this.getObject(I, g.data, g);
    const d = this.ctx;
    d.save();
    const c = q(d);
    d.transform(C, A, i, l, 0, 0);
    const G = this._createMaskCanvas(I, g);
    d.setTransform(1, 0, 0, 1, G.offsetX - c[4], G.offsetY - c[5]), this.dependencyTracker?.resetBBox(I);
    for (let b = 0, o = s.length; b < o; b += 2) {
      const m = M.transform(c, [C, A, i, l, s[b], s[b + 1]]);
      d.drawImage(G.canvas, m[4], m[5]), this.dependencyTracker?.recordBBox(I, this.ctx, m[4], m[4] + G.canvas.width, m[5], m[5] + G.canvas.height);
    }
    d.restore(), this.compose(), this.dependencyTracker?.recordOperation(I);
  }
  paintImageMaskXObjectGroup(I, g) {
    if (!this.contentVisible)
      return;
    const C = this.ctx, A = this.current.fillColor, i = this.current.patternFill;
    this.dependencyTracker?.resetBBox(I).recordDependencies(I, NI.transformAndFill);
    for (const l of g) {
      const {
        data: s,
        width: d,
        height: c,
        transform: G
      } = l, b = this.cachedCanvases.getCanvas("maskCanvas", d, c), o = b.context;
      o.save();
      const m = this.getObject(I, s, l);
      ai(o, m), o.globalCompositeOperation = "source-in", o.fillStyle = i ? A.getPattern(o, this, DI(C), cI.FILL, I) : A, o.fillRect(0, 0, d, c), o.restore(), C.save(), C.transform(...G), C.scale(1, -1), bC(C, b.canvas, 0, 0, d, c, 0, -1, 1, 1), this.dependencyTracker?.recordBBox(I, C, 0, d, 0, c), C.restore();
    }
    this.compose(), this.dependencyTracker?.recordOperation(I);
  }
  paintImageXObject(I, g) {
    if (!this.contentVisible)
      return;
    const C = this.getObject(I, g);
    if (!C) {
      L("Dependent image isn't ready yet");
      return;
    }
    this.paintInlineImageXObject(I, C);
  }
  paintImageXObjectRepeat(I, g, C, A, i) {
    if (!this.contentVisible)
      return;
    const l = this.getObject(I, g);
    if (!l) {
      L("Dependent image isn't ready yet");
      return;
    }
    const s = l.width, d = l.height, c = [];
    for (let G = 0, b = i.length; G < b; G += 2)
      c.push({
        transform: [C, 0, 0, A, i[G], i[G + 1]],
        x: 0,
        y: 0,
        w: s,
        h: d
      });
    this.paintInlineImageXObjectGroup(I, l, c);
  }
  applyTransferMapsToCanvas(I) {
    return this.current.transferMaps !== "none" && (I.filter = this.current.transferMaps, I.drawImage(I.canvas, 0, 0), I.filter = "none"), I.canvas;
  }
  applyTransferMapsToBitmap(I) {
    if (this.current.transferMaps === "none")
      return I.bitmap;
    const {
      bitmap: g,
      width: C,
      height: A
    } = I, i = this.cachedCanvases.getCanvas("inlineImage", C, A), l = i.context;
    return l.filter = this.current.transferMaps, l.drawImage(g, 0, 0), l.filter = "none", i.canvas;
  }
  paintInlineImageXObject(I, g) {
    if (!this.contentVisible)
      return;
    const C = g.width, A = g.height, i = this.ctx;
    this.save(I);
    const {
      filter: l
    } = i;
    l !== "none" && l !== "" && (i.filter = "none"), i.scale(1 / C, -1 / A);
    let s;
    if (g.bitmap)
      s = this.applyTransferMapsToBitmap(g);
    else if (typeof HTMLElement == "function" && g instanceof HTMLElement || !g.data)
      s = g;
    else {
      const G = this.cachedCanvases.getCanvas("inlineImage", C, A).context;
      mi(G, g), s = this.applyTransferMapsToCanvas(G);
    }
    const d = this._scaleImage(s, DI(i));
    i.imageSmoothingEnabled = ei(q(i), g.interpolate), this.dependencyTracker?.resetBBox(I).recordBBox(I, i, 0, C, -A, 0).recordDependencies(I, NI.imageXObject).recordOperation(I), bC(i, d.img, 0, 0, d.paintWidth, d.paintHeight, 0, -A, C, A), this.compose(), this.restore(I);
  }
  paintInlineImageXObjectGroup(I, g, C) {
    if (!this.contentVisible)
      return;
    const A = this.ctx;
    let i;
    if (g.bitmap)
      i = g.bitmap;
    else {
      const l = g.width, s = g.height, c = this.cachedCanvases.getCanvas("inlineImage", l, s).context;
      mi(c, g), i = this.applyTransferMapsToCanvas(c);
    }
    this.dependencyTracker?.resetBBox(I);
    for (const l of C)
      A.save(), A.transform(...l.transform), A.scale(1, -1), bC(A, i, l.x, l.y, l.w, l.h, 0, -1, 1, 1), this.dependencyTracker?.recordBBox(I, A, 0, 1, -1, 0), A.restore();
    this.dependencyTracker?.recordOperation(I), this.compose();
  }
  paintSolidColorImageMask(I) {
    this.contentVisible && (this.dependencyTracker?.resetBBox(I).recordBBox(I, this.ctx, 0, 1, 0, 1).recordDependencies(I, NI.fill).recordOperation(I), this.ctx.fillRect(0, 0, 1, 1), this.compose());
  }
  markPoint(I, g) {
  }
  markPointProps(I, g, C) {
  }
  beginMarkedContent(I, g) {
    this.dependencyTracker?.beginMarkedContent(I), this.markedContentStack.push({
      visible: !0
    });
  }
  beginMarkedContentProps(I, g, C) {
    this.dependencyTracker?.beginMarkedContent(I), g === "OC" ? this.markedContentStack.push({
      visible: this.optionalContentConfig.isVisible(C)
    }) : this.markedContentStack.push({
      visible: !0
    }), this.contentVisible = this.isContentVisible();
  }
  endMarkedContent(I) {
    this.dependencyTracker?.endMarkedContent(I), this.markedContentStack.pop(), this.contentVisible = this.isContentVisible();
  }
  beginCompat(I) {
  }
  endCompat(I) {
  }
  consumePath(I, g, C) {
    const A = this.current.isEmptyClip();
    this.pendingClip && this.current.updateClipFromPath(), this.pendingClip || this.compose(C);
    const i = this.ctx;
    this.pendingClip ? (A || (this.pendingClip === ti ? i.clip(g, "evenodd") : i.clip(g)), this.pendingClip = null, this.dependencyTracker?.bboxToClipBoxDropOperation(I).recordFutureForcedDependency("clipPath", I)) : this.dependencyTracker?.recordOperation(I), this.current.startNewPathAndClipBox(this.current.clipBox);
  }
  getSinglePixelWidth() {
    if (!this._cachedGetSinglePixelWidth) {
      const I = q(this.ctx);
      if (I[1] === 0 && I[2] === 0)
        this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(I[0]), Math.abs(I[3]));
      else {
        const g = Math.abs(I[0] * I[3] - I[2] * I[1]), C = Math.hypot(I[0], I[2]), A = Math.hypot(I[1], I[3]);
        this._cachedGetSinglePixelWidth = Math.max(C, A) / g;
      }
    }
    return this._cachedGetSinglePixelWidth;
  }
  getScaleForStroking() {
    if (this._cachedScaleForStroking[0] === -1) {
      const {
        lineWidth: I
      } = this.current, {
        a: g,
        b: C,
        c: A,
        d: i
      } = this.ctx.getTransform();
      let l, s;
      if (C === 0 && A === 0) {
        const d = Math.abs(g), c = Math.abs(i);
        if (d === c)
          if (I === 0)
            l = s = 1 / d;
          else {
            const G = d * I;
            l = s = G < 1 ? 1 / G : 1;
          }
        else if (I === 0)
          l = 1 / d, s = 1 / c;
        else {
          const G = d * I, b = c * I;
          l = G < 1 ? 1 / G : 1, s = b < 1 ? 1 / b : 1;
        }
      } else {
        const d = Math.abs(g * i - C * A), c = Math.hypot(g, C), G = Math.hypot(A, i);
        if (I === 0)
          l = G / d, s = c / d;
        else {
          const b = I * d;
          l = G > b ? G / b : 1, s = c > b ? c / b : 1;
        }
      }
      this._cachedScaleForStroking[0] = l, this._cachedScaleForStroking[1] = s;
    }
    return this._cachedScaleForStroking;
  }
  rescaleAndStroke(I, g) {
    const {
      ctx: C,
      current: {
        lineWidth: A
      }
    } = this, [i, l] = this.getScaleForStroking();
    if (i === l) {
      C.lineWidth = (A || 1) * i, C.stroke(I);
      return;
    }
    const s = C.getLineDash();
    g && C.save(), C.scale(i, l), EC.a = 1 / i, EC.d = 1 / l;
    const d = new Path2D();
    if (d.addPath(I, EC), s.length > 0) {
      const c = Math.max(i, l);
      C.setLineDash(s.map((G) => G / c)), C.lineDashOffset /= c;
    }
    C.lineWidth = A || 1, C.stroke(d), g && C.restore();
  }
  isContentVisible() {
    for (let I = this.markedContentStack.length - 1; I >= 0; I--)
      if (!this.markedContentStack[I].visible)
        return !1;
    return !0;
  }
}
for (const Z in Ug)
  ng.prototype[Z] !== void 0 && (ng.prototype[Ug[Z]] = ng.prototype[Z]);
class Yg {
  #I;
  #g;
  #A;
  static strings = ["fontFamily", "fontWeight", "italicAngle"];
  static write(I) {
    const g = new TextEncoder(), C = {};
    let A = 0;
    for (const c of Yg.strings) {
      const G = g.encode(I[c]);
      C[c] = G, A += 4 + G.length;
    }
    const i = new ArrayBuffer(A), l = new Uint8Array(i), s = new DataView(i);
    let d = 0;
    for (const c of Yg.strings) {
      const G = C[c], b = G.length;
      s.setUint32(d, b), l.set(G, d + 4), d += 4 + b;
    }
    return Q(d === i.byteLength, "CssFontInfo.write: Buffer overflow"), i;
  }
  constructor(I) {
    this.#I = I, this.#g = new DataView(this.#I), this.#A = new TextDecoder();
  }
  #C(I) {
    Q(I < Yg.strings.length, "Invalid string index");
    let g = 0;
    for (let A = 0; A < I; A++)
      g += this.#g.getUint32(g) + 4;
    const C = this.#g.getUint32(g);
    return this.#A.decode(new Uint8Array(this.#I, g + 4, C));
  }
  get fontFamily() {
    return this.#C(0);
  }
  get fontWeight() {
    return this.#C(1);
  }
  get italicAngle() {
    return this.#C(2);
  }
}
class Vg {
  #I;
  #g;
  #A;
  static strings = ["css", "loadedName", "baseFontName", "src"];
  static write(I) {
    const g = new TextEncoder(), C = {};
    let A = 0;
    for (const o of Vg.strings) {
      const m = g.encode(I[o]);
      C[o] = m, A += 4 + m.length;
    }
    A += 4;
    let i, l, s = 1 + A;
    I.style && (i = g.encode(I.style.style), l = g.encode(I.style.weight), s += 4 + i.length + 4 + l.length);
    const d = new ArrayBuffer(s), c = new Uint8Array(d), G = new DataView(d);
    let b = 0;
    G.setUint8(b++, I.guessFallback ? 1 : 0), G.setUint32(b, 0), b += 4, A = 0;
    for (const o of Vg.strings) {
      const m = C[o], e = m.length;
      A += 4 + e, G.setUint32(b, e), c.set(m, b + 4), b += 4 + e;
    }
    return G.setUint32(b - A - 4, A), I.style && (G.setUint32(b, i.length), c.set(i, b + 4), b += 4 + i.length, G.setUint32(b, l.length), c.set(l, b + 4), b += 4 + l.length), Q(b <= d.byteLength, "SubstitionInfo.write: Buffer overflow"), d.transferToFixedLength(b);
  }
  constructor(I) {
    this.#I = I, this.#g = new DataView(this.#I), this.#A = new TextDecoder();
  }
  get guessFallback() {
    return this.#g.getUint8(0) !== 0;
  }
  #C(I) {
    Q(I < Vg.strings.length, "Invalid string index");
    let g = 5;
    for (let A = 0; A < I; A++)
      g += this.#g.getUint32(g) + 4;
    const C = this.#g.getUint32(g);
    return this.#A.decode(new Uint8Array(this.#I, g + 4, C));
  }
  get css() {
    return this.#C(0);
  }
  get loadedName() {
    return this.#C(1);
  }
  get baseFontName() {
    return this.#C(2);
  }
  get src() {
    return this.#C(3);
  }
  get style() {
    let I = 1;
    I += 4 + this.#g.getUint32(I);
    const g = this.#g.getUint32(I), C = this.#A.decode(new Uint8Array(this.#I, I + 4, g));
    I += 4 + g;
    const A = this.#g.getUint32(I), i = this.#A.decode(new Uint8Array(this.#I, I + 4, A));
    return {
      style: C,
      weight: i
    };
  }
}
class E {
  static bools = ["black", "bold", "disableFontFace", "fontExtraProperties", "isInvalidPDFjsFont", "isType3Font", "italic", "missingFile", "remeasure", "vertical"];
  static numbers = ["ascent", "defaultWidth", "descent"];
  static strings = ["fallbackName", "loadedName", "mimetype", "name"];
  static #I = Math.ceil(this.bools.length * 2 / 8);
  static #g = this.#I + this.numbers.length * 8;
  static #A = this.#g + 1 + 8;
  static #C = this.#A + 1 + 48;
  static #i = this.#C + 1 + 6;
  #l;
  #s;
  #d;
  constructor({
    data: I,
    extra: g
  }) {
    this.#l = I, this.#s = new TextDecoder(), this.#d = new DataView(this.#l), g && Object.assign(this, g);
  }
  #c(I) {
    Q(I < E.bools.length, "Invalid boolean index");
    const g = Math.floor(I / 4), C = I * 2 % 8, A = this.#d.getUint8(g) >> C & 3;
    return A === 0 ? void 0 : A === 2;
  }
  get black() {
    return this.#c(0);
  }
  get bold() {
    return this.#c(1);
  }
  get disableFontFace() {
    return this.#c(2);
  }
  get fontExtraProperties() {
    return this.#c(3);
  }
  get isInvalidPDFjsFont() {
    return this.#c(4);
  }
  get isType3Font() {
    return this.#c(5);
  }
  get italic() {
    return this.#c(6);
  }
  get missingFile() {
    return this.#c(7);
  }
  get remeasure() {
    return this.#c(8);
  }
  get vertical() {
    return this.#c(9);
  }
  #Z(I) {
    return Q(I < E.numbers.length, "Invalid number index"), this.#d.getFloat64(E.#I + I * 8);
  }
  get ascent() {
    return this.#Z(0);
  }
  get defaultWidth() {
    return this.#Z(1);
  }
  get descent() {
    return this.#Z(2);
  }
  get bbox() {
    let I = E.#g;
    if (this.#d.getUint8(I) === 0)
      return;
    I += 1;
    const C = [];
    for (let A = 0; A < 4; A++)
      C.push(this.#d.getInt16(I, !0)), I += 2;
    return C;
  }
  get fontMatrix() {
    let I = E.#A;
    if (this.#d.getUint8(I) === 0)
      return;
    I += 1;
    const C = [];
    for (let A = 0; A < 6; A++)
      C.push(this.#d.getFloat64(I, !0)), I += 8;
    return C;
  }
  get defaultVMetrics() {
    let I = E.#C;
    if (this.#d.getUint8(I) === 0)
      return;
    I += 1;
    const C = [];
    for (let A = 0; A < 3; A++)
      C.push(this.#d.getInt16(I, !0)), I += 2;
    return C;
  }
  #o(I) {
    Q(I < E.strings.length, "Invalid string index");
    let g = E.#i + 4;
    for (let i = 0; i < I; i++)
      g += this.#d.getUint32(g) + 4;
    const C = this.#d.getUint32(g), A = new Uint8Array(C);
    return A.set(new Uint8Array(this.#l, g + 4, C)), this.#s.decode(A);
  }
  get fallbackName() {
    return this.#o(0);
  }
  get loadedName() {
    return this.#o(1);
  }
  get mimetype() {
    return this.#o(2);
  }
  get name() {
    return this.#o(3);
  }
  get data() {
    let I = E.#i;
    const g = this.#d.getUint32(I);
    I += 4 + g;
    const C = this.#d.getUint32(I);
    I += 4 + C;
    const A = this.#d.getUint32(I);
    I += 4 + A;
    const i = this.#d.getUint32(I);
    if (i !== 0)
      return new Uint8Array(this.#l, I + 4, i);
  }
  clearData() {
    let I = E.#i;
    const g = this.#d.getUint32(I);
    I += 4 + g;
    const C = this.#d.getUint32(I);
    I += 4 + C;
    const A = this.#d.getUint32(I);
    I += 4 + A;
    const i = this.#d.getUint32(I);
    new Uint8Array(this.#l, I + 4, i).fill(0), this.#d.setUint32(I, 0);
  }
  get cssFontInfo() {
    let I = E.#i;
    const g = this.#d.getUint32(I);
    I += 4 + g;
    const C = this.#d.getUint32(I);
    I += 4 + C;
    const A = this.#d.getUint32(I);
    if (A === 0)
      return null;
    const i = new Uint8Array(A);
    return i.set(new Uint8Array(this.#l, I + 4, A)), new Yg(i.buffer);
  }
  get systemFontInfo() {
    let I = E.#i;
    const g = this.#d.getUint32(I);
    I += 4 + g;
    const C = this.#d.getUint32(I);
    if (C === 0)
      return null;
    const A = new Uint8Array(C);
    return A.set(new Uint8Array(this.#l, I + 4, C)), new Vg(A.buffer);
  }
  static write(I) {
    const g = I.systemFontInfo ? Vg.write(I.systemFontInfo) : null, C = I.cssFontInfo ? Yg.write(I.cssFontInfo) : null, A = new TextEncoder(), i = {};
    let l = 0;
    for (const a of E.strings)
      i[a] = A.encode(I[a]), l += 4 + i[a].length;
    const s = E.#i + 4 + l + 4 + (g ? g.byteLength : 0) + 4 + (C ? C.byteLength : 0) + 4 + (I.data ? I.data.length : 0), d = new ArrayBuffer(s), c = new Uint8Array(d), G = new DataView(d);
    let b = 0;
    const o = E.bools.length;
    let m = 0, e = 0;
    for (let a = 0; a < o; a++) {
      const h = I[E.bools[a]];
      m |= (h === void 0 ? 0 : h ? 2 : 1) << e, e += 2, (e === 8 || a === o - 1) && (G.setUint8(b++, m), m = 0, e = 0);
    }
    Q(b === E.#I, "FontInfo.write: Boolean properties offset mismatch");
    for (const a of E.numbers)
      G.setFloat64(b, I[a]), b += 8;
    if (Q(b === E.#g, "FontInfo.write: Number properties offset mismatch"), I.bbox) {
      G.setUint8(b++, 4);
      for (const a of I.bbox)
        G.setInt16(b, a, !0), b += 2;
    } else
      G.setUint8(b++, 0), b += 8;
    if (Q(b === E.#A, "FontInfo.write: BBox properties offset mismatch"), I.fontMatrix) {
      G.setUint8(b++, 6);
      for (const a of I.fontMatrix)
        G.setFloat64(b, a, !0), b += 8;
    } else
      G.setUint8(b++, 0), b += 48;
    if (Q(b === E.#C, "FontInfo.write: FontMatrix properties offset mismatch"), I.defaultVMetrics) {
      G.setUint8(b++, 1);
      for (const a of I.defaultVMetrics)
        G.setInt16(b, a, !0), b += 2;
    } else
      G.setUint8(b++, 0), b += 6;
    Q(b === E.#i, "FontInfo.write: DefaultVMetrics properties offset mismatch"), G.setUint32(E.#i, 0), b += 4;
    for (const a of E.strings) {
      const h = i[a], t = h.length;
      G.setUint32(b, t), c.set(h, b + 4), b += 4 + t;
    }
    if (G.setUint32(E.#i, b - E.#i - 4), !g)
      G.setUint32(b, 0), b += 4;
    else {
      const a = g.byteLength;
      G.setUint32(b, a), Q(b + 4 + a <= d.byteLength, "FontInfo.write: Buffer overflow at systemFontInfo"), c.set(new Uint8Array(g), b + 4), b += 4 + a;
    }
    if (!C)
      G.setUint32(b, 0), b += 4;
    else {
      const a = C.byteLength;
      G.setUint32(b, a), Q(b + 4 + a <= d.byteLength, "FontInfo.write: Buffer overflow at cssFontInfo"), c.set(new Uint8Array(C), b + 4), b += 4 + a;
    }
    return I.data === void 0 ? (G.setUint32(b, 0), b += 4) : (G.setUint32(b, I.data.length), c.set(I.data, b + 4), b += 4 + I.data.length), Q(b <= d.byteLength, "FontInfo.write: Buffer overflow"), d.transferToFixedLength(b);
  }
}
let Ng = class {
  static #I = null;
  static #g = "";
  static get workerPort() {
    return this.#I;
  }
  static set workerPort(I) {
    if (!(typeof Worker < "u" && I instanceof Worker) && I !== null)
      throw new Error("Invalid `workerPort` type.");
    this.#I = I;
  }
  static get workerSrc() {
    return this.#g;
  }
  static set workerSrc(I) {
    if (typeof I != "string")
      throw new Error("Invalid `workerSrc` type.");
    this.#g = I;
  }
};
class dd {
  #I;
  #g;
  constructor({
    parsedData: I,
    rawData: g
  }) {
    this.#I = I, this.#g = g;
  }
  getRaw() {
    return this.#g;
  }
  get(I) {
    return this.#I.get(I) ?? null;
  }
  [Symbol.iterator]() {
    return this.#I.entries();
  }
}
const hg = Symbol("INTERNAL");
class Zd {
  #I = !1;
  #g = !1;
  #A = !1;
  #C = !0;
  constructor(I, {
    name: g,
    intent: C,
    usage: A,
    rbGroups: i
  }) {
    this.#I = !!(I & nI.DISPLAY), this.#g = !!(I & nI.PRINT), this.name = g, this.intent = C, this.usage = A, this.rbGroups = i;
  }
  get visible() {
    if (this.#A)
      return this.#C;
    if (!this.#C)
      return !1;
    const {
      print: I,
      view: g
    } = this.usage;
    return this.#I ? g?.viewState !== "OFF" : this.#g ? I?.printState !== "OFF" : !0;
  }
  _setVisible(I, g, C = !1) {
    I !== hg && f("Internal method `_setVisible` called."), this.#A = C, this.#C = g;
  }
}
class cd {
  #I = null;
  #g = /* @__PURE__ */ new Map();
  #A = null;
  #C = null;
  constructor(I, g = nI.DISPLAY) {
    if (this.renderingIntent = g, this.name = null, this.creator = null, I !== null) {
      this.name = I.name, this.creator = I.creator, this.#C = I.order;
      for (const C of I.groups)
        this.#g.set(C.id, new Zd(g, C));
      if (I.baseState === "OFF")
        for (const C of this.#g.values())
          C._setVisible(hg, !1);
      for (const C of I.on)
        this.#g.get(C)._setVisible(hg, !0);
      for (const C of I.off)
        this.#g.get(C)._setVisible(hg, !1);
      this.#A = this.getHash();
    }
  }
  #i(I) {
    const g = I.length;
    if (g < 2)
      return !0;
    const C = I[0];
    for (let A = 1; A < g; A++) {
      const i = I[A];
      let l;
      if (Array.isArray(i))
        l = this.#i(i);
      else if (this.#g.has(i))
        l = this.#g.get(i).visible;
      else
        return L(`Optional content group not found: ${i}`), !0;
      switch (C) {
        case "And":
          if (!l)
            return !1;
          break;
        case "Or":
          if (l)
            return !0;
          break;
        case "Not":
          return !l;
        default:
          return !0;
      }
    }
    return C === "And";
  }
  isVisible(I) {
    if (this.#g.size === 0)
      return !0;
    if (!I)
      return pC("Optional content group not defined."), !0;
    if (I.type === "OCG")
      return this.#g.has(I.id) ? this.#g.get(I.id).visible : (L(`Optional content group not found: ${I.id}`), !0);
    if (I.type === "OCMD") {
      if (I.expression)
        return this.#i(I.expression);
      if (!I.policy || I.policy === "AnyOn") {
        for (const g of I.ids) {
          if (!this.#g.has(g))
            return L(`Optional content group not found: ${g}`), !0;
          if (this.#g.get(g).visible)
            return !0;
        }
        return !1;
      } else if (I.policy === "AllOn") {
        for (const g of I.ids) {
          if (!this.#g.has(g))
            return L(`Optional content group not found: ${g}`), !0;
          if (!this.#g.get(g).visible)
            return !1;
        }
        return !0;
      } else if (I.policy === "AnyOff") {
        for (const g of I.ids) {
          if (!this.#g.has(g))
            return L(`Optional content group not found: ${g}`), !0;
          if (!this.#g.get(g).visible)
            return !0;
        }
        return !1;
      } else if (I.policy === "AllOff") {
        for (const g of I.ids) {
          if (!this.#g.has(g))
            return L(`Optional content group not found: ${g}`), !0;
          if (this.#g.get(g).visible)
            return !1;
        }
        return !0;
      }
      return L(`Unknown optional content policy ${I.policy}.`), !0;
    }
    return L(`Unknown group type ${I.type}.`), !0;
  }
  setVisibility(I, g = !0, C = !0) {
    const A = this.#g.get(I);
    if (!A) {
      L(`Optional content group not found: ${I}`);
      return;
    }
    if (C && g && A.rbGroups.length)
      for (const i of A.rbGroups)
        for (const l of i)
          l !== I && this.#g.get(l)?._setVisible(hg, !1, !0);
    A._setVisible(hg, !!g, !0), this.#I = null;
  }
  setOCGState({
    state: I,
    preserveRB: g
  }) {
    let C;
    for (const A of I) {
      switch (A) {
        case "ON":
        case "OFF":
        case "Toggle":
          C = A;
          continue;
      }
      const i = this.#g.get(A);
      if (i)
        switch (C) {
          case "ON":
            this.setVisibility(A, !0, g);
            break;
          case "OFF":
            this.setVisibility(A, !1, g);
            break;
          case "Toggle":
            this.setVisibility(A, !i.visible, g);
            break;
        }
    }
    this.#I = null;
  }
  get hasInitialVisibility() {
    return this.#A === null || this.getHash() === this.#A;
  }
  getOrder() {
    return this.#g.size ? this.#C ? this.#C.slice() : [...this.#g.keys()] : null;
  }
  getGroup(I) {
    return this.#g.get(I) || null;
  }
  getHash() {
    if (this.#I !== null)
      return this.#I;
    const I = new bl();
    for (const [g, C] of this.#g)
      I.update(`${g}:${C.visible}`);
    return this.#I = I.hexdigest();
  }
  [Symbol.iterator]() {
    return this.#g.entries();
  }
}
class Gd {
  constructor(I, {
    disableRange: g = !1,
    disableStream: C = !1
  }) {
    Q(I, 'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.');
    const {
      length: A,
      initialData: i,
      progressiveDone: l,
      contentDispositionFilename: s
    } = I;
    if (this._queuedChunks = [], this._progressiveDone = l, this._contentDispositionFilename = s, i?.length > 0) {
      const d = i instanceof Uint8Array && i.byteLength === i.buffer.byteLength ? i.buffer : new Uint8Array(i).buffer;
      this._queuedChunks.push(d);
    }
    this._pdfDataRangeTransport = I, this._isStreamingSupported = !C, this._isRangeSupported = !g, this._contentLength = A, this._fullRequestReader = null, this._rangeReaders = [], I.addRangeListener((d, c) => {
      this._onReceiveData({
        begin: d,
        chunk: c
      });
    }), I.addProgressListener((d, c) => {
      this._onProgress({
        loaded: d,
        total: c
      });
    }), I.addProgressiveReadListener((d) => {
      this._onReceiveData({
        chunk: d
      });
    }), I.addProgressiveDoneListener(() => {
      this._onProgressiveDone();
    }), I.transportReady();
  }
  _onReceiveData({
    begin: I,
    chunk: g
  }) {
    const C = g instanceof Uint8Array && g.byteLength === g.buffer.byteLength ? g.buffer : new Uint8Array(g).buffer;
    if (I === void 0)
      this._fullRequestReader ? this._fullRequestReader._enqueue(C) : this._queuedChunks.push(C);
    else {
      const A = this._rangeReaders.some(function(i) {
        return i._begin !== I ? !1 : (i._enqueue(C), !0);
      });
      Q(A, "_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.");
    }
  }
  get _progressiveDataLength() {
    return this._fullRequestReader?._loaded ?? 0;
  }
  _onProgress(I) {
    I.total === void 0 ? this._rangeReaders[0]?.onProgress?.({
      loaded: I.loaded
    }) : this._fullRequestReader?.onProgress?.({
      loaded: I.loaded,
      total: I.total
    });
  }
  _onProgressiveDone() {
    this._fullRequestReader?.progressiveDone(), this._progressiveDone = !0;
  }
  _removeRangeReader(I) {
    const g = this._rangeReaders.indexOf(I);
    g >= 0 && this._rangeReaders.splice(g, 1);
  }
  getFullReader() {
    Q(!this._fullRequestReader, "PDFDataTransportStream.getFullReader can only be called once.");
    const I = this._queuedChunks;
    return this._queuedChunks = null, new bd(this, I, this._progressiveDone, this._contentDispositionFilename);
  }
  getRangeReader(I, g) {
    if (g <= this._progressiveDataLength)
      return null;
    const C = new od(this, I, g);
    return this._pdfDataRangeTransport.requestDataRange(I, g), this._rangeReaders.push(C), C;
  }
  cancelAllRequests(I) {
    this._fullRequestReader?.cancel(I);
    for (const g of this._rangeReaders.slice(0))
      g.cancel(I);
    this._pdfDataRangeTransport.abort();
  }
}
class bd {
  constructor(I, g, C = !1, A = null) {
    this._stream = I, this._done = C || !1, this._filename = HA(A) ? A : null, this._queuedChunks = g || [], this._loaded = 0;
    for (const i of this._queuedChunks)
      this._loaded += i.byteLength;
    this._requests = [], this._headersReady = Promise.resolve(), I._fullRequestReader = this, this.onProgress = null;
  }
  _enqueue(I) {
    this._done || (this._requests.length > 0 ? this._requests.shift().resolve({
      value: I,
      done: !1
    }) : this._queuedChunks.push(I), this._loaded += I.byteLength);
  }
  get headersReady() {
    return this._headersReady;
  }
  get filename() {
    return this._filename;
  }
  get isRangeSupported() {
    return this._stream._isRangeSupported;
  }
  get isStreamingSupported() {
    return this._stream._isStreamingSupported;
  }
  get contentLength() {
    return this._stream._contentLength;
  }
  async read() {
    if (this._queuedChunks.length > 0)
      return {
        value: this._queuedChunks.shift(),
        done: !1
      };
    if (this._done)
      return {
        value: void 0,
        done: !0
      };
    const I = Promise.withResolvers();
    return this._requests.push(I), I.promise;
  }
  cancel(I) {
    this._done = !0;
    for (const g of this._requests)
      g.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0;
  }
  progressiveDone() {
    this._done || (this._done = !0);
  }
}
class od {
  constructor(I, g, C) {
    this._stream = I, this._begin = g, this._end = C, this._queuedChunk = null, this._requests = [], this._done = !1, this.onProgress = null;
  }
  _enqueue(I) {
    if (!this._done) {
      if (this._requests.length === 0)
        this._queuedChunk = I;
      else {
        this._requests.shift().resolve({
          value: I,
          done: !1
        });
        for (const C of this._requests)
          C.resolve({
            value: void 0,
            done: !0
          });
        this._requests.length = 0;
      }
      this._done = !0, this._stream._removeRangeReader(this);
    }
  }
  get isStreamingSupported() {
    return !1;
  }
  async read() {
    if (this._queuedChunk) {
      const g = this._queuedChunk;
      return this._queuedChunk = null, {
        value: g,
        done: !1
      };
    }
    if (this._done)
      return {
        value: void 0,
        done: !0
      };
    const I = Promise.withResolvers();
    return this._requests.push(I), I.promise;
  }
  cancel(I) {
    this._done = !0;
    for (const g of this._requests)
      g.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0, this._stream._removeRangeReader(this);
  }
}
function md(Z) {
  let I = !0, g = C("filename\\*", "i").exec(Z);
  if (g) {
    g = g[1];
    let G = s(g);
    return G = unescape(G), G = d(G), G = c(G), i(G);
  }
  if (g = l(Z), g) {
    const G = c(g);
    return i(G);
  }
  if (g = C("filename", "i").exec(Z), g) {
    g = g[1];
    let G = s(g);
    return G = c(G), i(G);
  }
  function C(G, b) {
    return new RegExp("(?:^|;)\\s*" + G + '\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)', b);
  }
  function A(G, b) {
    if (G) {
      if (!/^[\x00-\xFF]+$/.test(b))
        return b;
      try {
        const o = new TextDecoder(G, {
          fatal: !0
        }), m = qg(b);
        b = o.decode(m), I = !1;
      } catch {
      }
    }
    return b;
  }
  function i(G) {
    return I && /[\x80-\xff]/.test(G) && (G = A("utf-8", G), I && (G = A("iso-8859-1", G))), G;
  }
  function l(G) {
    const b = [];
    let o;
    const m = C("filename\\*((?!0\\d)\\d+)(\\*?)", "ig");
    for (; (o = m.exec(G)) !== null; ) {
      let [, a, h, t] = o;
      if (a = parseInt(a, 10), a in b) {
        if (a === 0)
          break;
        continue;
      }
      b[a] = [h, t];
    }
    const e = [];
    for (let a = 0; a < b.length && a in b; ++a) {
      let [h, t] = b[a];
      t = s(t), h && (t = unescape(t), a === 0 && (t = d(t))), e.push(t);
    }
    return e.join("");
  }
  function s(G) {
    if (G.startsWith('"')) {
      const b = G.slice(1).split('\\"');
      for (let o = 0; o < b.length; ++o) {
        const m = b[o].indexOf('"');
        m !== -1 && (b[o] = b[o].slice(0, m), b.length = o + 1), b[o] = b[o].replaceAll(/\\(.)/g, "$1");
      }
      G = b.join('"');
    }
    return G;
  }
  function d(G) {
    const b = G.indexOf("'");
    if (b === -1)
      return G;
    const o = G.slice(0, b), e = G.slice(b + 1).replace(/^[^']*'/, "");
    return A(o, e);
  }
  function c(G) {
    return !G.startsWith("=?") || /[\x00-\x19\x80-\xff]/.test(G) ? G : G.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g, function(b, o, m, e) {
      if (m === "q" || m === "Q")
        return e = e.replaceAll("_", " "), e = e.replaceAll(/=([0-9a-fA-F]{2})/g, function(a, h) {
          return String.fromCharCode(parseInt(h, 16));
        }), A(o, e);
      try {
        e = atob(e);
      } catch {
      }
      return A(o, e);
    });
  }
  return "";
}
function Bl(Z, I) {
  const g = new Headers();
  if (!Z || !I || typeof I != "object")
    return g;
  for (const C in I) {
    const A = I[C];
    A !== void 0 && g.append(C, A);
  }
  return g;
}
function zC(Z) {
  return URL.parse(Z)?.origin ?? null;
}
function Wl({
  responseHeaders: Z,
  isHttp: I,
  rangeChunkSize: g,
  disableRange: C
}) {
  const A = {
    allowRangeRequests: !1,
    suggestedLength: void 0
  }, i = parseInt(Z.get("Content-Length"), 10);
  return !Number.isInteger(i) || (A.suggestedLength = i, i <= 2 * g) || C || !I || Z.get("Accept-Ranges") !== "bytes" || (Z.get("Content-Encoding") || "identity") !== "identity" || (A.allowRangeRequests = !0), A;
}
function wl(Z) {
  const I = Z.get("Content-Disposition");
  if (I) {
    let g = md(I);
    if (g.includes("%"))
      try {
        g = decodeURIComponent(g);
      } catch {
      }
    if (HA(g))
      return g;
  }
  return null;
}
function AC(Z, I) {
  return new uC(`Unexpected server response (${Z}) while retrieving PDF "${I}".`, Z, Z === 404 || Z === 0 && I.startsWith("file:"));
}
function nl(Z) {
  return Z === 200 || Z === 206;
}
function Yl(Z, I, g) {
  return {
    method: "GET",
    headers: Z,
    signal: g.signal,
    mode: "cors",
    credentials: I ? "include" : "same-origin",
    redirect: "follow"
  };
}
function Vl(Z) {
  return Z instanceof Uint8Array ? Z.buffer : Z instanceof ArrayBuffer ? Z : (L(`getArrayBuffer - unexpected data format: ${Z}`), new Uint8Array(Z).buffer);
}
class ad {
  _responseOrigin = null;
  constructor(I) {
    this.source = I, this.isHttp = /^https?:/i.test(I.url), this.headers = Bl(this.isHttp, I.httpHeaders), this._fullRequestReader = null, this._rangeRequestReaders = [];
  }
  get _progressiveDataLength() {
    return this._fullRequestReader?._loaded ?? 0;
  }
  getFullReader() {
    return Q(!this._fullRequestReader, "PDFFetchStream.getFullReader can only be called once."), this._fullRequestReader = new ed(this), this._fullRequestReader;
  }
  getRangeReader(I, g) {
    if (g <= this._progressiveDataLength)
      return null;
    const C = new td(this, I, g);
    return this._rangeRequestReaders.push(C), C;
  }
  cancelAllRequests(I) {
    this._fullRequestReader?.cancel(I);
    for (const g of this._rangeRequestReaders.slice(0))
      g.cancel(I);
  }
}
class ed {
  constructor(I) {
    this._stream = I, this._reader = null, this._loaded = 0, this._filename = null;
    const g = I.source;
    this._withCredentials = g.withCredentials || !1, this._contentLength = g.length, this._headersCapability = Promise.withResolvers(), this._disableRange = g.disableRange || !1, this._rangeChunkSize = g.rangeChunkSize, !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0), this._abortController = new AbortController(), this._isStreamingSupported = !g.disableStream, this._isRangeSupported = !g.disableRange;
    const C = new Headers(I.headers), A = g.url;
    fetch(A, Yl(C, this._withCredentials, this._abortController)).then((i) => {
      if (I._responseOrigin = zC(i.url), !nl(i.status))
        throw AC(i.status, A);
      this._reader = i.body.getReader(), this._headersCapability.resolve();
      const l = i.headers, {
        allowRangeRequests: s,
        suggestedLength: d
      } = Wl({
        responseHeaders: l,
        isHttp: I.isHttp,
        rangeChunkSize: this._rangeChunkSize,
        disableRange: this._disableRange
      });
      this._isRangeSupported = s, this._contentLength = d || this._contentLength, this._filename = wl(l), !this._isStreamingSupported && this._isRangeSupported && this.cancel(new Ig("Streaming is disabled."));
    }).catch(this._headersCapability.reject), this.onProgress = null;
  }
  get headersReady() {
    return this._headersCapability.promise;
  }
  get filename() {
    return this._filename;
  }
  get contentLength() {
    return this._contentLength;
  }
  get isRangeSupported() {
    return this._isRangeSupported;
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  async read() {
    await this._headersCapability.promise;
    const {
      value: I,
      done: g
    } = await this._reader.read();
    return g ? {
      value: I,
      done: g
    } : (this._loaded += I.byteLength, this.onProgress?.({
      loaded: this._loaded,
      total: this._contentLength
    }), {
      value: Vl(I),
      done: !1
    });
  }
  cancel(I) {
    this._reader?.cancel(I), this._abortController.abort();
  }
}
class td {
  constructor(I, g, C) {
    this._stream = I, this._reader = null, this._loaded = 0;
    const A = I.source;
    this._withCredentials = A.withCredentials || !1, this._readCapability = Promise.withResolvers(), this._isStreamingSupported = !A.disableStream, this._abortController = new AbortController();
    const i = new Headers(I.headers);
    i.append("Range", `bytes=${g}-${C - 1}`);
    const l = A.url;
    fetch(l, Yl(i, this._withCredentials, this._abortController)).then((s) => {
      const d = zC(s.url);
      if (d !== I._responseOrigin)
        throw new Error(`Expected range response-origin "${d}" to match "${I._responseOrigin}".`);
      if (!nl(s.status))
        throw AC(s.status, l);
      this._readCapability.resolve(), this._reader = s.body.getReader();
    }).catch(this._readCapability.reject), this.onProgress = null;
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  async read() {
    await this._readCapability.promise;
    const {
      value: I,
      done: g
    } = await this._reader.read();
    return g ? {
      value: I,
      done: g
    } : (this._loaded += I.byteLength, this.onProgress?.({
      loaded: this._loaded
    }), {
      value: Vl(I),
      done: !1
    });
  }
  cancel(I) {
    this._reader?.cancel(I), this._abortController.abort();
  }
}
const PC = 200, fC = 206;
function hd(Z) {
  const I = Z.response;
  return typeof I != "string" ? I : qg(I).buffer;
}
class Bd {
  _responseOrigin = null;
  constructor({
    url: I,
    httpHeaders: g,
    withCredentials: C
  }) {
    this.url = I, this.isHttp = /^https?:/i.test(I), this.headers = Bl(this.isHttp, g), this.withCredentials = C || !1, this.currXhrId = 0, this.pendingRequests = /* @__PURE__ */ Object.create(null);
  }
  request(I) {
    const g = new XMLHttpRequest(), C = this.currXhrId++, A = this.pendingRequests[C] = {
      xhr: g
    };
    g.open("GET", this.url), g.withCredentials = this.withCredentials;
    for (const [i, l] of this.headers)
      g.setRequestHeader(i, l);
    return this.isHttp && "begin" in I && "end" in I ? (g.setRequestHeader("Range", `bytes=${I.begin}-${I.end - 1}`), A.expectedStatus = fC) : A.expectedStatus = PC, g.responseType = "arraybuffer", Q(I.onError, "Expected `onError` callback to be provided."), g.onerror = () => {
      I.onError(g.status);
    }, g.onreadystatechange = this.onStateChange.bind(this, C), g.onprogress = this.onProgress.bind(this, C), A.onHeadersReceived = I.onHeadersReceived, A.onDone = I.onDone, A.onError = I.onError, A.onProgress = I.onProgress, g.send(null), C;
  }
  onProgress(I, g) {
    const C = this.pendingRequests[I];
    C && C.onProgress?.(g);
  }
  onStateChange(I, g) {
    const C = this.pendingRequests[I];
    if (!C)
      return;
    const A = C.xhr;
    if (A.readyState >= 2 && C.onHeadersReceived && (C.onHeadersReceived(), delete C.onHeadersReceived), A.readyState !== 4 || !(I in this.pendingRequests))
      return;
    if (delete this.pendingRequests[I], A.status === 0 && this.isHttp) {
      C.onError(A.status);
      return;
    }
    const i = A.status || PC;
    if (!(i === PC && C.expectedStatus === fC) && i !== C.expectedStatus) {
      C.onError(A.status);
      return;
    }
    const s = hd(A);
    if (i === fC) {
      const d = A.getResponseHeader("Content-Range"), c = /bytes (\d+)-(\d+)\/(\d+)/.exec(d);
      c ? C.onDone({
        begin: parseInt(c[1], 10),
        chunk: s
      }) : (L('Missing or invalid "Content-Range" header.'), C.onError(0));
    } else s ? C.onDone({
      begin: 0,
      chunk: s
    }) : C.onError(A.status);
  }
  getRequestXhr(I) {
    return this.pendingRequests[I].xhr;
  }
  isPendingRequest(I) {
    return I in this.pendingRequests;
  }
  abortRequest(I) {
    const g = this.pendingRequests[I].xhr;
    delete this.pendingRequests[I], g.abort();
  }
}
class Wd {
  constructor(I) {
    this._source = I, this._manager = new Bd(I), this._rangeChunkSize = I.rangeChunkSize, this._fullRequestReader = null, this._rangeRequestReaders = [];
  }
  _onRangeRequestReaderClosed(I) {
    const g = this._rangeRequestReaders.indexOf(I);
    g >= 0 && this._rangeRequestReaders.splice(g, 1);
  }
  getFullReader() {
    return Q(!this._fullRequestReader, "PDFNetworkStream.getFullReader can only be called once."), this._fullRequestReader = new wd(this._manager, this._source), this._fullRequestReader;
  }
  getRangeReader(I, g) {
    const C = new nd(this._manager, I, g);
    return C.onClosed = this._onRangeRequestReaderClosed.bind(this), this._rangeRequestReaders.push(C), C;
  }
  cancelAllRequests(I) {
    this._fullRequestReader?.cancel(I);
    for (const g of this._rangeRequestReaders.slice(0))
      g.cancel(I);
  }
}
class wd {
  constructor(I, g) {
    this._manager = I, this._url = g.url, this._fullRequestId = I.request({
      onHeadersReceived: this._onHeadersReceived.bind(this),
      onDone: this._onDone.bind(this),
      onError: this._onError.bind(this),
      onProgress: this._onProgress.bind(this)
    }), this._headersCapability = Promise.withResolvers(), this._disableRange = g.disableRange || !1, this._contentLength = g.length, this._rangeChunkSize = g.rangeChunkSize, !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0), this._isStreamingSupported = !1, this._isRangeSupported = !1, this._cachedChunks = [], this._requests = [], this._done = !1, this._storedError = void 0, this._filename = null, this.onProgress = null;
  }
  _onHeadersReceived() {
    const I = this._fullRequestId, g = this._manager.getRequestXhr(I);
    this._manager._responseOrigin = zC(g.responseURL);
    const C = g.getAllResponseHeaders(), A = new Headers(C ? C.trimStart().replace(/[^\S ]+$/, "").split(/[\r\n]+/).map((s) => {
      const [d, ...c] = s.split(": ");
      return [d, c.join(": ")];
    }) : []), {
      allowRangeRequests: i,
      suggestedLength: l
    } = Wl({
      responseHeaders: A,
      isHttp: this._manager.isHttp,
      rangeChunkSize: this._rangeChunkSize,
      disableRange: this._disableRange
    });
    i && (this._isRangeSupported = !0), this._contentLength = l || this._contentLength, this._filename = wl(A), this._isRangeSupported && this._manager.abortRequest(I), this._headersCapability.resolve();
  }
  _onDone(I) {
    if (I && (this._requests.length > 0 ? this._requests.shift().resolve({
      value: I.chunk,
      done: !1
    }) : this._cachedChunks.push(I.chunk)), this._done = !0, !(this._cachedChunks.length > 0)) {
      for (const g of this._requests)
        g.resolve({
          value: void 0,
          done: !0
        });
      this._requests.length = 0;
    }
  }
  _onError(I) {
    this._storedError = AC(I, this._url), this._headersCapability.reject(this._storedError);
    for (const g of this._requests)
      g.reject(this._storedError);
    this._requests.length = 0, this._cachedChunks.length = 0;
  }
  _onProgress(I) {
    this.onProgress?.({
      loaded: I.loaded,
      total: I.lengthComputable ? I.total : this._contentLength
    });
  }
  get filename() {
    return this._filename;
  }
  get isRangeSupported() {
    return this._isRangeSupported;
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  get contentLength() {
    return this._contentLength;
  }
  get headersReady() {
    return this._headersCapability.promise;
  }
  async read() {
    if (await this._headersCapability.promise, this._storedError)
      throw this._storedError;
    if (this._cachedChunks.length > 0)
      return {
        value: this._cachedChunks.shift(),
        done: !1
      };
    if (this._done)
      return {
        value: void 0,
        done: !0
      };
    const I = Promise.withResolvers();
    return this._requests.push(I), I.promise;
  }
  cancel(I) {
    this._done = !0, this._headersCapability.reject(I);
    for (const g of this._requests)
      g.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0, this._manager.isPendingRequest(this._fullRequestId) && this._manager.abortRequest(this._fullRequestId), this._fullRequestReader = null;
  }
}
class nd {
  constructor(I, g, C) {
    this._manager = I, this._url = I.url, this._requestId = I.request({
      begin: g,
      end: C,
      onHeadersReceived: this._onHeadersReceived.bind(this),
      onDone: this._onDone.bind(this),
      onError: this._onError.bind(this),
      onProgress: this._onProgress.bind(this)
    }), this._requests = [], this._queuedChunk = null, this._done = !1, this._storedError = void 0, this.onProgress = null, this.onClosed = null;
  }
  _onHeadersReceived() {
    const I = zC(this._manager.getRequestXhr(this._requestId)?.responseURL);
    I !== this._manager._responseOrigin && (this._storedError = new Error(`Expected range response-origin "${I}" to match "${this._manager._responseOrigin}".`), this._onError(0));
  }
  _close() {
    this.onClosed?.(this);
  }
  _onDone(I) {
    const g = I.chunk;
    this._requests.length > 0 ? this._requests.shift().resolve({
      value: g,
      done: !1
    }) : this._queuedChunk = g, this._done = !0;
    for (const C of this._requests)
      C.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0, this._close();
  }
  _onError(I) {
    this._storedError ??= AC(I, this._url);
    for (const g of this._requests)
      g.reject(this._storedError);
    this._requests.length = 0, this._queuedChunk = null;
  }
  _onProgress(I) {
    this.isStreamingSupported || this.onProgress?.({
      loaded: I.loaded
    });
  }
  get isStreamingSupported() {
    return !1;
  }
  async read() {
    if (this._storedError)
      throw this._storedError;
    if (this._queuedChunk !== null) {
      const g = this._queuedChunk;
      return this._queuedChunk = null, {
        value: g,
        done: !1
      };
    }
    if (this._done)
      return {
        value: void 0,
        done: !0
      };
    const I = Promise.withResolvers();
    return this._requests.push(I), I.promise;
  }
  cancel(I) {
    this._done = !0;
    for (const g of this._requests)
      g.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0, this._manager.isPendingRequest(this._requestId) && this._manager.abortRequest(this._requestId), this._close();
  }
}
const Yd = /^[a-z][a-z0-9\-+.]+:/i;
function Vd(Z) {
  if (Yd.test(Z))
    return new URL(Z);
  const I = process.getBuiltinModule("url");
  return new URL(I.pathToFileURL(Z));
}
class Nd {
  constructor(I) {
    this.source = I, this.url = Vd(I.url), Q(this.url.protocol === "file:", "PDFNodeStream only supports file:// URLs."), this._fullRequestReader = null, this._rangeRequestReaders = [];
  }
  get _progressiveDataLength() {
    return this._fullRequestReader?._loaded ?? 0;
  }
  getFullReader() {
    return Q(!this._fullRequestReader, "PDFNodeStream.getFullReader can only be called once."), this._fullRequestReader = new ud(this), this._fullRequestReader;
  }
  getRangeReader(I, g) {
    if (g <= this._progressiveDataLength)
      return null;
    const C = new Rd(this, I, g);
    return this._rangeRequestReaders.push(C), C;
  }
  cancelAllRequests(I) {
    this._fullRequestReader?.cancel(I);
    for (const g of this._rangeRequestReaders.slice(0))
      g.cancel(I);
  }
}
class ud {
  constructor(I) {
    this._url = I.url, this._done = !1, this._storedError = null, this.onProgress = null;
    const g = I.source;
    this._contentLength = g.length, this._loaded = 0, this._filename = null, this._disableRange = g.disableRange || !1, this._rangeChunkSize = g.rangeChunkSize, !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0), this._isStreamingSupported = !g.disableStream, this._isRangeSupported = !g.disableRange, this._readableStream = null, this._readCapability = Promise.withResolvers(), this._headersCapability = Promise.withResolvers();
    const C = process.getBuiltinModule("fs");
    C.promises.lstat(this._url).then((A) => {
      this._contentLength = A.size, this._setReadableStream(C.createReadStream(this._url)), this._headersCapability.resolve();
    }, (A) => {
      A.code === "ENOENT" && (A = AC(0, this._url.href)), this._storedError = A, this._headersCapability.reject(A);
    });
  }
  get headersReady() {
    return this._headersCapability.promise;
  }
  get filename() {
    return this._filename;
  }
  get contentLength() {
    return this._contentLength;
  }
  get isRangeSupported() {
    return this._isRangeSupported;
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  async read() {
    if (await this._readCapability.promise, this._done)
      return {
        value: void 0,
        done: !0
      };
    if (this._storedError)
      throw this._storedError;
    const I = this._readableStream.read();
    return I === null ? (this._readCapability = Promise.withResolvers(), this.read()) : (this._loaded += I.length, this.onProgress?.({
      loaded: this._loaded,
      total: this._contentLength
    }), {
      value: new Uint8Array(I).buffer,
      done: !1
    });
  }
  cancel(I) {
    if (!this._readableStream) {
      this._error(I);
      return;
    }
    this._readableStream.destroy(I);
  }
  _error(I) {
    this._storedError = I, this._readCapability.resolve();
  }
  _setReadableStream(I) {
    this._readableStream = I, I.on("readable", () => {
      this._readCapability.resolve();
    }), I.on("end", () => {
      I.destroy(), this._done = !0, this._readCapability.resolve();
    }), I.on("error", (g) => {
      this._error(g);
    }), !this._isStreamingSupported && this._isRangeSupported && this._error(new Ig("streaming is disabled")), this._storedError && this._readableStream.destroy(this._storedError);
  }
}
class Rd {
  constructor(I, g, C) {
    this._url = I.url, this._done = !1, this._storedError = null, this.onProgress = null, this._loaded = 0, this._readableStream = null, this._readCapability = Promise.withResolvers();
    const A = I.source;
    this._isStreamingSupported = !A.disableStream;
    const i = process.getBuiltinModule("fs");
    this._setReadableStream(i.createReadStream(this._url, {
      start: g,
      end: C - 1
    }));
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  async read() {
    if (await this._readCapability.promise, this._done)
      return {
        value: void 0,
        done: !0
      };
    if (this._storedError)
      throw this._storedError;
    const I = this._readableStream.read();
    return I === null ? (this._readCapability = Promise.withResolvers(), this.read()) : (this._loaded += I.length, this.onProgress?.({
      loaded: this._loaded
    }), {
      value: new Uint8Array(I).buffer,
      done: !1
    });
  }
  cancel(I) {
    if (!this._readableStream) {
      this._error(I);
      return;
    }
    this._readableStream.destroy(I);
  }
  _error(I) {
    this._storedError = I, this._readCapability.resolve();
  }
  _setReadableStream(I) {
    this._readableStream = I, I.on("readable", () => {
      this._readCapability.resolve();
    }), I.on("end", () => {
      I.destroy(), this._done = !0, this._readCapability.resolve();
    }), I.on("error", (g) => {
      this._error(g);
    }), this._storedError && this._readableStream.destroy(this._storedError);
  }
}
const pg = Symbol("INITIAL_DATA");
class Nl {
  #I = /* @__PURE__ */ Object.create(null);
  #g(I) {
    return this.#I[I] ||= {
      ...Promise.withResolvers(),
      data: pg
    };
  }
  get(I, g = null) {
    if (g) {
      const A = this.#g(I);
      return A.promise.then(() => g(A.data)), null;
    }
    const C = this.#I[I];
    if (!C || C.data === pg)
      throw new Error(`Requesting object that isn't resolved yet ${I}.`);
    return C.data;
  }
  has(I) {
    const g = this.#I[I];
    return !!g && g.data !== pg;
  }
  delete(I) {
    const g = this.#I[I];
    return !g || g.data === pg ? !1 : (delete this.#I[I], !0);
  }
  resolve(I, g = null) {
    const C = this.#g(I);
    C.data = g, C.resolve();
  }
  clear() {
    for (const I in this.#I) {
      const {
        data: g
      } = this.#I[I];
      g?.bitmap?.close();
    }
    this.#I = /* @__PURE__ */ Object.create(null);
  }
  *[Symbol.iterator]() {
    for (const I in this.#I) {
      const {
        data: g
      } = this.#I[I];
      g !== pg && (yield [I, g]);
    }
  }
}
const yd = 1e5, hi = 30;
let yC = class uI {
  #I = Promise.withResolvers();
  #g = null;
  #A = !1;
  #C = !!globalThis.FontInspector?.enabled;
  #i = null;
  #l = null;
  #s = 0;
  #d = 0;
  #c = null;
  #Z = null;
  #o = 0;
  #b = 0;
  #m = /* @__PURE__ */ Object.create(null);
  #t = [];
  #a = null;
  #G = [];
  #e = /* @__PURE__ */ new WeakMap();
  #B = null;
  static #W = /* @__PURE__ */ new Map();
  static #h = /* @__PURE__ */ new Map();
  static #N = /* @__PURE__ */ new WeakMap();
  static #w = null;
  static #n = /* @__PURE__ */ new Set();
  constructor({
    textContentSource: I,
    container: g,
    viewport: C
  }) {
    if (I instanceof ReadableStream)
      this.#a = I;
    else if (typeof I == "object")
      this.#a = new ReadableStream({
        start(d) {
          d.enqueue(I), d.close();
        }
      });
    else
      throw new Error('No "textContentSource" parameter specified.');
    this.#g = this.#Z = g, this.#b = C.scale * Gg.pixelRatio, this.#o = C.rotation, this.#l = {
      div: null,
      properties: null,
      ctx: null
    };
    const {
      pageWidth: A,
      pageHeight: i,
      pageX: l,
      pageY: s
    } = C.rawDims;
    this.#B = [1, 0, 0, -1, -l, s + i], this.#d = A, this.#s = i, uI.#X(), cg(g, C), this.#I.promise.finally(() => {
      uI.#n.delete(this), this.#l = null, this.#m = null;
    }).catch(() => {
    });
  }
  static get fontFamilyMap() {
    const {
      isWindows: I,
      isFirefox: g
    } = GI.platform;
    return T(this, "fontFamilyMap", /* @__PURE__ */ new Map([["sans-serif", `${I && g ? "Calibri, " : ""}sans-serif`], ["monospace", `${I && g ? "Lucida Console, " : ""}monospace`]]));
  }
  render() {
    const I = () => {
      this.#c.read().then(({
        value: g,
        done: C
      }) => {
        if (C) {
          this.#I.resolve();
          return;
        }
        this.#i ??= g.lang, Object.assign(this.#m, g.styles), this.#R(g.items), I();
      }, this.#I.reject);
    };
    return this.#c = this.#a.getReader(), uI.#n.add(this), I(), this.#I.promise;
  }
  update({
    viewport: I,
    onBefore: g = null
  }) {
    const C = I.scale * Gg.pixelRatio, A = I.rotation;
    if (A !== this.#o && (g?.(), this.#o = A, cg(this.#Z, {
      rotation: A
    })), C !== this.#b) {
      g?.(), this.#b = C;
      const i = {
        div: null,
        properties: null,
        ctx: uI.#M(this.#i)
      };
      for (const l of this.#G)
        i.properties = this.#e.get(l), i.div = l, this.#u(i);
    }
  }
  cancel() {
    const I = new Ig("TextLayer task cancelled.");
    this.#c?.cancel(I).catch(() => {
    }), this.#c = null, this.#I.reject(I);
  }
  get textDivs() {
    return this.#G;
  }
  get textContentItemsStr() {
    return this.#t;
  }
  #R(I) {
    if (this.#A)
      return;
    this.#l.ctx ??= uI.#M(this.#i);
    const g = this.#G, C = this.#t;
    for (const A of I) {
      if (g.length > yd) {
        L("Ignoring additional textDivs for performance reasons."), this.#A = !0;
        return;
      }
      if (A.str === void 0) {
        if (A.type === "beginMarkedContentProps" || A.type === "beginMarkedContent") {
          const i = this.#g;
          this.#g = document.createElement("span"), this.#g.classList.add("markedContent"), A.id && this.#g.setAttribute("id", `${A.id}`), i.append(this.#g);
        } else A.type === "endMarkedContent" && (this.#g = this.#g.parentNode);
        continue;
      }
      C.push(A.str), this.#Y(A);
    }
  }
  #Y(I) {
    const g = document.createElement("span"), C = {
      angle: 0,
      canvasWidth: 0,
      hasText: I.str !== "",
      hasEOL: I.hasEOL,
      fontSize: 0
    };
    this.#G.push(g);
    const A = M.transform(this.#B, I.transform);
    let i = Math.atan2(A[1], A[0]);
    const l = this.#m[I.fontName];
    l.vertical && (i += Math.PI / 2);
    let s = this.#C && l.fontSubstitution || l.fontFamily;
    s = uI.fontFamilyMap.get(s) || s;
    const d = Math.hypot(A[2], A[3]), c = d * uI.#p(s, l, this.#i);
    let G, b;
    i === 0 ? (G = A[4], b = A[5] - c) : (G = A[4] + c * Math.sin(i), b = A[5] - c * Math.cos(i));
    const o = "calc(var(--total-scale-factor) *", m = g.style;
    this.#g === this.#Z ? (m.left = `${(100 * G / this.#d).toFixed(2)}%`, m.top = `${(100 * b / this.#s).toFixed(2)}%`) : (m.left = `${o}${G.toFixed(2)}px)`, m.top = `${o}${b.toFixed(2)}px)`), m.fontSize = `${o}${(uI.#w * d).toFixed(2)}px)`, m.fontFamily = s, C.fontSize = d, g.setAttribute("role", "presentation"), g.textContent = I.str, g.dir = I.dir, this.#C && (g.dataset.fontName = l.fontSubstitutionLoadedName || I.fontName), i !== 0 && (C.angle = i * (180 / Math.PI));
    let e = !1;
    if (I.str.length > 1)
      e = !0;
    else if (I.str !== " " && I.transform[0] !== I.transform[3]) {
      const a = Math.abs(I.transform[0]), h = Math.abs(I.transform[3]);
      a !== h && Math.max(a, h) / Math.min(a, h) > 1.5 && (e = !0);
    }
    if (e && (C.canvasWidth = l.vertical ? I.height : I.width), this.#e.set(g, C), this.#l.div = g, this.#l.properties = C, this.#u(this.#l), C.hasText && this.#g.append(g), C.hasEOL) {
      const a = document.createElement("br");
      a.setAttribute("role", "presentation"), this.#g.append(a);
    }
  }
  #u(I) {
    const {
      div: g,
      properties: C,
      ctx: A
    } = I, {
      style: i
    } = g;
    let l = "";
    if (uI.#w > 1 && (l = `scale(${1 / uI.#w})`), C.canvasWidth !== 0 && C.hasText) {
      const {
        fontFamily: s
      } = i, {
        canvasWidth: d,
        fontSize: c
      } = C;
      uI.#y(A, c * this.#b, s);
      const {
        width: G
      } = A.measureText(g.textContent);
      G > 0 && (l = `scaleX(${d * this.#b / G}) ${l}`);
    }
    C.angle !== 0 && (l = `rotate(${C.angle}deg) ${l}`), l.length > 0 && (i.transform = l);
  }
  static cleanup() {
    if (!(this.#n.size > 0)) {
      this.#W.clear();
      for (const {
        canvas: I
      } of this.#h.values())
        I.remove();
      this.#h.clear();
    }
  }
  static #M(I = null) {
    let g = this.#h.get(I ||= "");
    if (!g) {
      const C = document.createElement("canvas");
      C.className = "hiddenCanvasElement", C.lang = I, document.body.append(C), g = C.getContext("2d", {
        alpha: !1,
        willReadFrequently: !0
      }), this.#h.set(I, g), this.#N.set(g, {
        size: 0,
        family: ""
      });
    }
    return g;
  }
  static #y(I, g, C) {
    const A = this.#N.get(I);
    g === A.size && C === A.family || (I.font = `${g}px ${C}`, A.size = g, A.family = C);
  }
  static #X() {
    if (this.#w !== null)
      return;
    const I = document.createElement("div");
    I.style.opacity = 0, I.style.lineHeight = 1, I.style.fontSize = "1px", I.style.position = "absolute", I.textContent = "X", document.body.append(I), this.#w = I.getBoundingClientRect().height, I.remove();
  }
  static #p(I, g, C) {
    const A = this.#W.get(I);
    if (A)
      return A;
    const i = this.#M(C);
    i.canvas.width = i.canvas.height = hi, this.#y(i, hi, I);
    const l = i.measureText(""), s = l.fontBoundingBoxAscent, d = Math.abs(l.fontBoundingBoxDescent);
    i.canvas.width = i.canvas.height = 0;
    let c = 0.8;
    return s ? c = s / (s + d) : (GI.platform.isFirefox && L("Enable the `dom.textMetrics.fontBoundingBox.enabled` preference in `about:config` to improve TextLayer rendering."), g.ascent ? c = g.ascent : g.descent && (c = 1 + g.descent)), this.#W.set(I, c), c;
  }
};
const Xd = 100;
function ul(Z = {}) {
  typeof Z == "string" || Z instanceof URL ? Z = {
    url: Z
  } : (Z instanceof ArrayBuffer || ArrayBuffer.isView(Z)) && (Z = {
    data: Z
  });
  const I = new zA(), {
    docId: g
  } = I, C = Z.url ? Fs(Z.url) : null, A = Z.data ? zs(Z.data) : null, i = Z.httpHeaders || null, l = Z.withCredentials === !0, s = Z.password ?? null, d = Z.range instanceof Rl ? Z.range : null, c = Number.isInteger(Z.rangeChunkSize) && Z.rangeChunkSize > 0 ? Z.rangeChunkSize : 2 ** 16;
  let G = Z.worker instanceof eA ? Z.worker : null;
  const b = Z.verbosity, o = typeof Z.docBaseUrl == "string" && !FC(Z.docBaseUrl) ? Z.docBaseUrl : null, m = dC(Z.cMapUrl), e = Z.cMapPacked !== !1, a = Z.CMapReaderFactory || (aI ? xs : Ai), h = dC(Z.iccUrl), t = dC(Z.standardFontDataUrl), W = Z.StandardFontDataFactory || (aI ? Os : ii), B = dC(Z.wasmUrl), w = Z.WasmFactory || (aI ? Us : li), n = Z.stopAtErrors !== !0, V = Number.isInteger(Z.maxImageSize) && Z.maxImageSize > -1 ? Z.maxImageSize : -1, N = Z.isEvalSupported !== !1, R = typeof Z.isOffscreenCanvasSupported == "boolean" ? Z.isOffscreenCanvasSupported : !aI, Y = typeof Z.isImageDecoderSupported == "boolean" ? Z.isImageDecoderSupported : !aI && (GI.platform.isFirefox || !globalThis.chrome), y = Number.isInteger(Z.canvasMaxAreaInBytes) ? Z.canvasMaxAreaInBytes : -1, X = typeof Z.disableFontFace == "boolean" ? Z.disableFontFace : aI, K = Z.fontExtraProperties === !0, S = Z.enableXfa === !0, p = Z.ownerDocument || globalThis.document, r = Z.disableRange === !0, D = Z.disableStream === !0, z = Z.disableAutoFetch === !0, U = Z.pdfBug === !0, mI = Z.CanvasFactory || (aI ? Qs : rs), kI = Z.FilterFactory || (aI ? js : Ts), UI = Z.enableHWA === !0, sI = Z.useWasm !== !1, _ = d ? d.length : Z.length ?? NaN, Cg = typeof Z.useSystemFonts == "boolean" ? Z.useSystemFonts : !aI && !X, vI = typeof Z.useWorkerFetch == "boolean" ? Z.useWorkerFetch : !!(a === Ai && W === ii && w === li && m && t && B && Lg(m, document.baseURI) && Lg(t, document.baseURI) && Lg(B, document.baseURI)), EI = null;
  cs(b);
  const CI = {
    canvasFactory: new mI({
      ownerDocument: p,
      enableHWA: UI
    }),
    filterFactory: new kI({
      docId: g,
      ownerDocument: p
    }),
    cMapReaderFactory: vI ? null : new a({
      baseUrl: m,
      isCompressed: e
    }),
    standardFontDataFactory: vI ? null : new W({
      baseUrl: t
    }),
    wasmFactory: vI ? null : new w({
      baseUrl: B
    })
  };
  G || (G = eA.create({
    verbosity: b,
    port: Ng.workerPort
  }), I._worker = G);
  const Dg = {
    docId: g,
    apiVersion: "5.4.296",
    data: A,
    password: s,
    disableAutoFetch: z,
    rangeChunkSize: c,
    length: _,
    docBaseUrl: o,
    enableXfa: S,
    evaluatorOptions: {
      maxImageSize: V,
      disableFontFace: X,
      ignoreErrors: n,
      isEvalSupported: N,
      isOffscreenCanvasSupported: R,
      isImageDecoderSupported: Y,
      canvasMaxAreaInBytes: y,
      fontExtraProperties: K,
      useSystemFonts: Cg,
      useWasm: sI,
      useWorkerFetch: vI,
      cMapUrl: m,
      iccUrl: h,
      standardFontDataUrl: t,
      wasmUrl: B
    }
  }, Kg = {
    ownerDocument: p,
    pdfBug: U,
    styleElement: EI,
    loadingParams: {
      disableAutoFetch: z,
      enableXfa: S
    }
  };
  return G.promise.then(function() {
    if (I.destroyed)
      throw new Error("Loading aborted");
    if (G.destroyed)
      throw new Error("Worker was destroyed");
    const As = G.messageHandler.sendWithPromise("GetDocRequest", Dg, A ? [A.buffer] : null);
    let rC;
    if (d)
      rC = new Gd(d, {
        disableRange: r,
        disableStream: D
      });
    else if (!A) {
      if (!C)
        throw new Error("getDocument - no `url` parameter provided.");
      const TC = Lg(C) ? ad : aI ? Nd : Wd;
      rC = new TC({
        url: C,
        length: _,
        httpHeaders: i,
        withCredentials: l,
        rangeChunkSize: c,
        disableRange: r,
        disableStream: D
      });
    }
    return As.then((TC) => {
      if (I.destroyed)
        throw new Error("Loading aborted");
      if (G.destroyed)
        throw new Error("Worker was destroyed");
      const xA = new kg(g, TC, G.port), is = new Dd(xA, I, rC, Kg, CI, UI);
      I._transport = is, xA.send("Ready", null);
    });
  }).catch(I._capability.reject), I;
}
class zA {
  static #I = 0;
  _capability = Promise.withResolvers();
  _transport = null;
  _worker = null;
  docId = `d${zA.#I++}`;
  destroyed = !1;
  onPassword = null;
  onProgress = null;
  get promise() {
    return this._capability.promise;
  }
  async destroy() {
    this.destroyed = !0;
    try {
      this._worker?.port && (this._worker._pendingDestroy = !0), await this._transport?.destroy();
    } catch (I) {
      throw this._worker?.port && delete this._worker._pendingDestroy, I;
    }
    this._transport = null, this._worker?.destroy(), this._worker = null;
  }
  async getData() {
    return this._transport.getData();
  }
}
let Rl = class {
  #I = Promise.withResolvers();
  #g = [];
  #A = [];
  #C = [];
  #i = [];
  constructor(I, g, C = !1, A = null) {
    this.length = I, this.initialData = g, this.progressiveDone = C, this.contentDispositionFilename = A;
  }
  addRangeListener(I) {
    this.#i.push(I);
  }
  addProgressListener(I) {
    this.#C.push(I);
  }
  addProgressiveReadListener(I) {
    this.#A.push(I);
  }
  addProgressiveDoneListener(I) {
    this.#g.push(I);
  }
  onDataRange(I, g) {
    for (const C of this.#i)
      C(I, g);
  }
  onDataProgress(I, g) {
    this.#I.promise.then(() => {
      for (const C of this.#C)
        C(I, g);
    });
  }
  onDataProgressiveRead(I) {
    this.#I.promise.then(() => {
      for (const g of this.#A)
        g(I);
    });
  }
  onDataProgressiveDone() {
    this.#I.promise.then(() => {
      for (const I of this.#g)
        I();
    });
  }
  transportReady() {
    this.#I.resolve();
  }
  requestDataRange(I, g) {
    f("Abstract method PDFDataRangeTransport.requestDataRange");
  }
  abort() {
  }
};
class Hd {
  constructor(I, g) {
    this._pdfInfo = I, this._transport = g;
  }
  get annotationStorage() {
    return this._transport.annotationStorage;
  }
  get canvasFactory() {
    return this._transport.canvasFactory;
  }
  get filterFactory() {
    return this._transport.filterFactory;
  }
  get numPages() {
    return this._pdfInfo.numPages;
  }
  get fingerprints() {
    return this._pdfInfo.fingerprints;
  }
  get isPureXfa() {
    return T(this, "isPureXfa", !!this._transport._htmlForXfa);
  }
  get allXfaHtml() {
    return this._transport._htmlForXfa;
  }
  getPage(I) {
    return this._transport.getPage(I);
  }
  getPageIndex(I) {
    return this._transport.getPageIndex(I);
  }
  getDestinations() {
    return this._transport.getDestinations();
  }
  getDestination(I) {
    return this._transport.getDestination(I);
  }
  getPageLabels() {
    return this._transport.getPageLabels();
  }
  getPageLayout() {
    return this._transport.getPageLayout();
  }
  getPageMode() {
    return this._transport.getPageMode();
  }
  getViewerPreferences() {
    return this._transport.getViewerPreferences();
  }
  getOpenAction() {
    return this._transport.getOpenAction();
  }
  getAttachments() {
    return this._transport.getAttachments();
  }
  getAnnotationsByType(I, g) {
    return this._transport.getAnnotationsByType(I, g);
  }
  getJSActions() {
    return this._transport.getDocJSActions();
  }
  getOutline() {
    return this._transport.getOutline();
  }
  getOptionalContentConfig({
    intent: I = "display"
  } = {}) {
    const {
      renderingIntent: g
    } = this._transport.getRenderingIntent(I);
    return this._transport.getOptionalContentConfig(g);
  }
  getPermissions() {
    return this._transport.getPermissions();
  }
  getMetadata() {
    return this._transport.getMetadata();
  }
  getMarkInfo() {
    return this._transport.getMarkInfo();
  }
  getData() {
    return this._transport.getData();
  }
  saveDocument() {
    return this._transport.saveDocument();
  }
  getDownloadInfo() {
    return this._transport.downloadInfoCapability.promise;
  }
  cleanup(I = !1) {
    return this._transport.startCleanup(I || this.isPureXfa);
  }
  destroy() {
    return this.loadingTask.destroy();
  }
  cachedPageNumber(I) {
    return this._transport.cachedPageNumber(I);
  }
  get loadingParams() {
    return this._transport.loadingParams;
  }
  get loadingTask() {
    return this._transport.loadingTask;
  }
  getFieldObjects() {
    return this._transport.getFieldObjects();
  }
  hasJSActions() {
    return this._transport.hasJSActions();
  }
  getCalculationOrderIds() {
    return this._transport.getCalculationOrderIds();
  }
}
class Md {
  #I = !1;
  constructor(I, g, C, A = !1) {
    this._pageIndex = I, this._pageInfo = g, this._transport = C, this._stats = A ? new fA() : null, this._pdfBug = A, this.commonObjs = C.commonObjs, this.objs = new Nl(), this._intentStates = /* @__PURE__ */ new Map(), this.destroyed = !1, this.recordedBBoxes = null;
  }
  get pageNumber() {
    return this._pageIndex + 1;
  }
  get rotate() {
    return this._pageInfo.rotate;
  }
  get ref() {
    return this._pageInfo.ref;
  }
  get userUnit() {
    return this._pageInfo.userUnit;
  }
  get view() {
    return this._pageInfo.view;
  }
  getViewport({
    scale: I,
    rotation: g = this.rotate,
    offsetX: C = 0,
    offsetY: A = 0,
    dontFlip: i = !1
  } = {}) {
    return new IC({
      viewBox: this.view,
      userUnit: this.userUnit,
      scale: I,
      rotation: g,
      offsetX: C,
      offsetY: A,
      dontFlip: i
    });
  }
  getAnnotations({
    intent: I = "display"
  } = {}) {
    const {
      renderingIntent: g
    } = this._transport.getRenderingIntent(I);
    return this._transport.getAnnotations(this._pageIndex, g);
  }
  getJSActions() {
    return this._transport.getPageJSActions(this._pageIndex);
  }
  get filterFactory() {
    return this._transport.filterFactory;
  }
  get isPureXfa() {
    return T(this, "isPureXfa", !!this._transport._htmlForXfa);
  }
  async getXfa() {
    return this._transport._htmlForXfa?.children[this._pageIndex] || null;
  }
  render({
    canvasContext: I,
    canvas: g = I.canvas,
    viewport: C,
    intent: A = "display",
    annotationMode: i = _I.ENABLE,
    transform: l = null,
    background: s = null,
    optionalContentConfigPromise: d = null,
    annotationCanvasMap: c = null,
    pageColors: G = null,
    printAnnotationStorage: b = null,
    isEditing: o = !1,
    recordOperations: m = !1,
    operationsFilter: e = null
  }) {
    this._stats?.time("Overall");
    const a = this._transport.getRenderingIntent(A, i, b, o), {
      renderingIntent: h,
      cacheKey: t
    } = a;
    this.#I = !1, d ||= this._transport.getOptionalContentConfig(h);
    let W = this._intentStates.get(t);
    W || (W = /* @__PURE__ */ Object.create(null), this._intentStates.set(t, W)), W.streamReaderCancelTimeout && (clearTimeout(W.streamReaderCancelTimeout), W.streamReaderCancelTimeout = null);
    const B = !!(h & nI.PRINT);
    W.displayReadyCapability || (W.displayReadyCapability = Promise.withResolvers(), W.operatorList = {
      fnArray: [],
      argsArray: [],
      lastChunk: !1,
      separateAnnots: null
    }, this._stats?.time("Page Request"), this._pumpOperatorList(a));
    const w = !!(this._pdfBug && globalThis.StepperManager?.enabled), n = !this.recordedBBoxes && (m || w), V = (Y) => {
      if (W.renderTasks.delete(N), n) {
        const y = N.gfx?.dependencyTracker.take();
        y && (N.stepper && N.stepper.setOperatorBBoxes(y, N.gfx.dependencyTracker.takeDebugMetadata()), m && (this.recordedBBoxes = y));
      }
      B && (this.#I = !0), this.#g(), Y ? (N.capability.reject(Y), this._abortOperatorList({
        intentState: W,
        reason: Y instanceof Error ? Y : new Error(Y)
      })) : N.capability.resolve(), this._stats && (this._stats.timeEnd("Rendering"), this._stats.timeEnd("Overall"), globalThis.Stats?.enabled && globalThis.Stats.add(this.pageNumber, this._stats));
    }, N = new wg({
      callback: V,
      params: {
        canvas: g,
        canvasContext: I,
        dependencyTracker: n ? new Es(g, W.operatorList.length, w) : null,
        viewport: C,
        transform: l,
        background: s
      },
      objs: this.objs,
      commonObjs: this.commonObjs,
      annotationCanvasMap: c,
      operatorList: W.operatorList,
      pageIndex: this._pageIndex,
      canvasFactory: this._transport.canvasFactory,
      filterFactory: this._transport.filterFactory,
      useRequestAnimationFrame: !B,
      pdfBug: this._pdfBug,
      pageColors: G,
      enableHWA: this._transport.enableHWA,
      operationsFilter: e
    });
    (W.renderTasks ||= /* @__PURE__ */ new Set()).add(N);
    const R = N.task;
    return Promise.all([W.displayReadyCapability.promise, d]).then(([Y, y]) => {
      if (this.destroyed) {
        V();
        return;
      }
      if (this._stats?.time("Rendering"), !(y.renderingIntent & h))
        throw new Error("Must use the same `intent`-argument when calling the `PDFPageProxy.render` and `PDFDocumentProxy.getOptionalContentConfig` methods.");
      N.initializeGraphics({
        transparency: Y,
        optionalContentConfig: y
      }), N.operatorListChanged();
    }).catch(V), R;
  }
  getOperatorList({
    intent: I = "display",
    annotationMode: g = _I.ENABLE,
    printAnnotationStorage: C = null,
    isEditing: A = !1
  } = {}) {
    function i() {
      s.operatorList.lastChunk && (s.opListReadCapability.resolve(s.operatorList), s.renderTasks.delete(d));
    }
    const l = this._transport.getRenderingIntent(I, g, C, A, !0);
    let s = this._intentStates.get(l.cacheKey);
    s || (s = /* @__PURE__ */ Object.create(null), this._intentStates.set(l.cacheKey, s));
    let d;
    return s.opListReadCapability || (d = /* @__PURE__ */ Object.create(null), d.operatorListChanged = i, s.opListReadCapability = Promise.withResolvers(), (s.renderTasks ||= /* @__PURE__ */ new Set()).add(d), s.operatorList = {
      fnArray: [],
      argsArray: [],
      lastChunk: !1,
      separateAnnots: null
    }, this._stats?.time("Page Request"), this._pumpOperatorList(l)), s.opListReadCapability.promise;
  }
  streamTextContent({
    includeMarkedContent: I = !1,
    disableNormalization: g = !1
  } = {}) {
    return this._transport.messageHandler.sendWithStream("GetTextContent", {
      pageIndex: this._pageIndex,
      includeMarkedContent: I === !0,
      disableNormalization: g === !0
    }, {
      highWaterMark: 100,
      size(A) {
        return A.items.length;
      }
    });
  }
  getTextContent(I = {}) {
    if (this._transport._htmlForXfa)
      return this.getXfa().then((C) => vg.textContent(C));
    const g = this.streamTextContent(I);
    return new Promise(function(C, A) {
      function i() {
        l.read().then(function({
          value: d,
          done: c
        }) {
          if (c) {
            C(s);
            return;
          }
          s.lang ??= d.lang, Object.assign(s.styles, d.styles), s.items.push(...d.items), i();
        }, A);
      }
      const l = g.getReader(), s = {
        items: [],
        styles: /* @__PURE__ */ Object.create(null),
        lang: null
      };
      i();
    });
  }
  getStructTree() {
    return this._transport.getStructTree(this._pageIndex);
  }
  _destroy() {
    this.destroyed = !0;
    const I = [];
    for (const g of this._intentStates.values())
      if (this._abortOperatorList({
        intentState: g,
        reason: new Error("Page was destroyed."),
        force: !0
      }), !g.opListReadCapability)
        for (const C of g.renderTasks)
          I.push(C.completed), C.cancel();
    return this.objs.clear(), this.#I = !1, Promise.all(I);
  }
  cleanup(I = !1) {
    this.#I = !0;
    const g = this.#g();
    return I && g && (this._stats &&= new fA()), g;
  }
  #g() {
    if (!this.#I || this.destroyed)
      return !1;
    for (const {
      renderTasks: I,
      operatorList: g
    } of this._intentStates.values())
      if (I.size > 0 || !g.lastChunk)
        return !1;
    return this._intentStates.clear(), this.objs.clear(), this.#I = !1, !0;
  }
  _startRenderPage(I, g) {
    const C = this._intentStates.get(g);
    C && (this._stats?.timeEnd("Page Request"), C.displayReadyCapability?.resolve(I));
  }
  _renderPageChunk(I, g) {
    for (let C = 0, A = I.length; C < A; C++)
      g.operatorList.fnArray.push(I.fnArray[C]), g.operatorList.argsArray.push(I.argsArray[C]);
    g.operatorList.lastChunk = I.lastChunk, g.operatorList.separateAnnots = I.separateAnnots;
    for (const C of g.renderTasks)
      C.operatorListChanged();
    I.lastChunk && this.#g();
  }
  _pumpOperatorList({
    renderingIntent: I,
    cacheKey: g,
    annotationStorageSerializable: C,
    modifiedIds: A
  }) {
    const {
      map: i,
      transfer: l
    } = C, d = this._transport.messageHandler.sendWithStream("GetOperatorList", {
      pageIndex: this._pageIndex,
      intent: I,
      cacheKey: g,
      annotationStorage: i,
      modifiedIds: A
    }, l).getReader(), c = this._intentStates.get(g);
    c.streamReader = d;
    const G = () => {
      d.read().then(({
        value: b,
        done: o
      }) => {
        if (o) {
          c.streamReader = null;
          return;
        }
        this._transport.destroyed || (this._renderPageChunk(b, c), G());
      }, (b) => {
        if (c.streamReader = null, !this._transport.destroyed) {
          if (c.operatorList) {
            c.operatorList.lastChunk = !0;
            for (const o of c.renderTasks)
              o.operatorListChanged();
            this.#g();
          }
          if (c.displayReadyCapability)
            c.displayReadyCapability.reject(b);
          else if (c.opListReadCapability)
            c.opListReadCapability.reject(b);
          else
            throw b;
        }
      });
    };
    G();
  }
  _abortOperatorList({
    intentState: I,
    reason: g,
    force: C = !1
  }) {
    if (I.streamReader) {
      if (I.streamReaderCancelTimeout && (clearTimeout(I.streamReaderCancelTimeout), I.streamReaderCancelTimeout = null), !C) {
        if (I.renderTasks.size > 0)
          return;
        if (g instanceof XA) {
          let A = Xd;
          g.extraDelay > 0 && g.extraDelay < 1e3 && (A += g.extraDelay), I.streamReaderCancelTimeout = setTimeout(() => {
            I.streamReaderCancelTimeout = null, this._abortOperatorList({
              intentState: I,
              reason: g,
              force: !0
            });
          }, A);
          return;
        }
      }
      if (I.streamReader.cancel(new Ig(g.message)).catch(() => {
      }), I.streamReader = null, !this._transport.destroyed) {
        for (const [A, i] of this._intentStates)
          if (i === I) {
            this._intentStates.delete(A);
            break;
          }
        this.cleanup();
      }
    }
  }
  get stats() {
    return this._stats;
  }
}
var qI, HI, jI, sg, P, DC, dg, Zg, tI, nC, yl, Xl, rg, Xg, YC;
let eA = (P = class {
  constructor({
    name: I = null,
    port: g = null,
    verbosity: C = Gs()
  } = {}) {
    yI(this, tI);
    yI(this, qI, Promise.withResolvers());
    yI(this, HI, null);
    yI(this, jI, null);
    yI(this, sg, null);
    if (this.name = I, this.destroyed = !1, this.verbosity = C, g) {
      if (v(P, Zg).has(g))
        throw new Error("Cannot use more than one PDFWorker per port.");
      v(P, Zg).set(g, this), MI(this, tI, yl).call(this, g);
    } else
      MI(this, tI, Xl).call(this);
  }
  get promise() {
    return v(this, qI).promise;
  }
  get port() {
    return v(this, jI);
  }
  get messageHandler() {
    return v(this, HI);
  }
  destroy() {
    this.destroyed = !0, v(this, sg)?.terminate(), hI(this, sg, null), v(P, Zg).delete(v(this, jI)), hI(this, jI, null), v(this, HI)?.destroy(), hI(this, HI, null);
  }
  static create(I) {
    const g = v(this, Zg).get(I?.port);
    if (g) {
      if (g._pendingDestroy)
        throw new Error("PDFWorker.create - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");
      return g;
    }
    return new P(I);
  }
  static get workerSrc() {
    if (Ng.workerSrc)
      return Ng.workerSrc;
    throw new Error('No "GlobalWorkerOptions.workerSrc" specified.');
  }
  static get _setupFakeWorkerGlobal() {
    return T(this, "_setupFakeWorkerGlobal", (async () => v(this, Xg, YC) ? v(this, Xg, YC) : (await import(
      /*webpackIgnore: true*/
      /*@vite-ignore*/
      this.workerSrc
    )).WorkerMessageHandler)());
  }
}, qI = new WeakMap(), HI = new WeakMap(), jI = new WeakMap(), sg = new WeakMap(), DC = new WeakMap(), dg = new WeakMap(), Zg = new WeakMap(), tI = new WeakSet(), nC = function() {
  v(this, qI).resolve(), v(this, HI).send("configure", {
    verbosity: this.verbosity
  });
}, yl = function(I) {
  hI(this, jI, I), hI(this, HI, new kg("main", "worker", I)), v(this, HI).on("ready", () => {
  }), MI(this, tI, nC).call(this);
}, Xl = function() {
  if (v(P, dg) || v(P, Xg, YC)) {
    MI(this, tI, rg).call(this);
    return;
  }
  let {
    workerSrc: I
  } = P;
  try {
    P._isSameOrigin(window.location, I) || (I = P._createCDNWrapper(new URL(I, window.location).href));
    const g = new Worker(I, {
      type: "module"
    }), C = new kg("main", "worker", g), A = () => {
      i.abort(), C.destroy(), g.terminate(), this.destroyed ? v(this, qI).reject(new Error("Worker was destroyed")) : MI(this, tI, rg).call(this);
    }, i = new AbortController();
    g.addEventListener("error", () => {
      v(this, sg) || A();
    }, {
      signal: i.signal
    }), C.on("test", (s) => {
      if (i.abort(), this.destroyed || !s) {
        A();
        return;
      }
      hI(this, HI, C), hI(this, jI, g), hI(this, sg, g), MI(this, tI, nC).call(this);
    }), C.on("ready", (s) => {
      if (i.abort(), this.destroyed) {
        A();
        return;
      }
      try {
        l();
      } catch {
        MI(this, tI, rg).call(this);
      }
    });
    const l = () => {
      const s = new Uint8Array();
      C.send("test", s, [s.buffer]);
    };
    l();
    return;
  } catch {
    pC("The worker has been disabled.");
  }
  MI(this, tI, rg).call(this);
}, rg = function() {
  v(P, dg) || (L("Setting up fake worker."), hI(P, dg, !0)), P._setupFakeWorkerGlobal.then((I) => {
    if (this.destroyed) {
      v(this, qI).reject(new Error("Worker was destroyed"));
      return;
    }
    const g = new ks();
    hI(this, jI, g);
    const C = `fake${vA(P, DC)._++}`, A = new kg(C + "_worker", C, g);
    I.setup(A, g), hI(this, HI, new kg(C, C + "_worker", g)), MI(this, tI, nC).call(this);
  }).catch((I) => {
    v(this, qI).reject(new Error(`Setting up fake worker failed: "${I.message}".`));
  });
}, Xg = new WeakSet(), YC = function() {
  try {
    return globalThis.pdfjsWorker?.WorkerMessageHandler || null;
  } catch {
    return null;
  }
}, yI(P, Xg), yI(P, DC, 0), yI(P, dg, !1), yI(P, Zg, /* @__PURE__ */ new WeakMap()), aI && (hI(P, dg, !0), Ng.workerSrc ||= "./pdf.worker.mjs"), P._isSameOrigin = (I, g) => {
  const C = URL.parse(I);
  if (!C?.origin || C.origin === "null")
    return !1;
  const A = new URL(g, C);
  return C.origin === A.origin;
}, P._createCDNWrapper = (I) => {
  const g = `await import("${I}");`;
  return URL.createObjectURL(new Blob([g], {
    type: "text/javascript"
  }));
}, P.fromPort = (I) => {
  if (Ys("`PDFWorker.fromPort` - please use `PDFWorker.create` instead."), !I?.port)
    throw new Error("PDFWorker.fromPort - invalid method signature.");
  return P.create(I);
}, P);
class Dd {
  #I = /* @__PURE__ */ new Map();
  #g = /* @__PURE__ */ new Map();
  #A = /* @__PURE__ */ new Map();
  #C = /* @__PURE__ */ new Map();
  #i = null;
  constructor(I, g, C, A, i, l) {
    this.messageHandler = I, this.loadingTask = g, this.commonObjs = new Nl(), this.fontLoader = new Ss({
      ownerDocument: A.ownerDocument,
      styleElement: A.styleElement
    }), this.loadingParams = A.loadingParams, this._params = A, this.canvasFactory = i.canvasFactory, this.filterFactory = i.filterFactory, this.cMapReaderFactory = i.cMapReaderFactory, this.standardFontDataFactory = i.standardFontDataFactory, this.wasmFactory = i.wasmFactory, this.destroyed = !1, this.destroyCapability = null, this._networkStream = C, this._fullReader = null, this._lastProgress = null, this.downloadInfoCapability = Promise.withResolvers(), this.enableHWA = l, this.setupMessageHandler();
  }
  #l(I, g = null) {
    const C = this.#I.get(I);
    if (C)
      return C;
    const A = this.messageHandler.sendWithPromise(I, g);
    return this.#I.set(I, A), A;
  }
  get annotationStorage() {
    return T(this, "annotationStorage", new KA());
  }
  getRenderingIntent(I, g = _I.ENABLE, C = null, A = !1, i = !1) {
    let l = nI.DISPLAY, s = bA;
    switch (I) {
      case "any":
        l = nI.ANY;
        break;
      case "display":
        break;
      case "print":
        l = nI.PRINT;
        break;
      default:
        L(`getRenderingIntent - invalid intent: ${I}`);
    }
    const d = l & nI.PRINT && C instanceof ol ? C : this.annotationStorage;
    switch (g) {
      case _I.DISABLE:
        l += nI.ANNOTATIONS_DISABLE;
        break;
      case _I.ENABLE:
        break;
      case _I.ENABLE_FORMS:
        l += nI.ANNOTATIONS_FORMS;
        break;
      case _I.ENABLE_STORAGE:
        l += nI.ANNOTATIONS_STORAGE, s = d.serializable;
        break;
      default:
        L(`getRenderingIntent - invalid annotationMode: ${g}`);
    }
    A && (l += nI.IS_EDITING), i && (l += nI.OPLIST);
    const {
      ids: c,
      hash: G
    } = d.modifiedIds, b = [l, s.hash, G];
    return {
      renderingIntent: l,
      cacheKey: b.join("_"),
      annotationStorageSerializable: s,
      modifiedIds: c
    };
  }
  destroy() {
    if (this.destroyCapability)
      return this.destroyCapability.promise;
    this.destroyed = !0, this.destroyCapability = Promise.withResolvers(), this.#i?.reject(new Error("Worker was destroyed during onPassword callback"));
    const I = [];
    for (const C of this.#g.values())
      I.push(C._destroy());
    this.#g.clear(), this.#A.clear(), this.#C.clear(), this.hasOwnProperty("annotationStorage") && this.annotationStorage.resetModified();
    const g = this.messageHandler.sendWithPromise("Terminate", null);
    return I.push(g), Promise.all(I).then(() => {
      this.commonObjs.clear(), this.fontLoader.clear(), this.#I.clear(), this.filterFactory.destroy(), yC.cleanup(), this._networkStream?.cancelAllRequests(new Ig("Worker was terminated.")), this.messageHandler?.destroy(), this.messageHandler = null, this.destroyCapability.resolve();
    }, this.destroyCapability.reject), this.destroyCapability.promise;
  }
  setupMessageHandler() {
    const {
      messageHandler: I,
      loadingTask: g
    } = this;
    I.on("GetReader", (C, A) => {
      Q(this._networkStream, "GetReader - no `IPDFStream` instance available."), this._fullReader = this._networkStream.getFullReader(), this._fullReader.onProgress = (i) => {
        this._lastProgress = {
          loaded: i.loaded,
          total: i.total
        };
      }, A.onPull = () => {
        this._fullReader.read().then(function({
          value: i,
          done: l
        }) {
          if (l) {
            A.close();
            return;
          }
          Q(i instanceof ArrayBuffer, "GetReader - expected an ArrayBuffer."), A.enqueue(new Uint8Array(i), 1, [i]);
        }).catch((i) => {
          A.error(i);
        });
      }, A.onCancel = (i) => {
        this._fullReader.cancel(i), A.ready.catch((l) => {
          if (!this.destroyed)
            throw l;
        });
      };
    }), I.on("ReaderHeadersReady", async (C) => {
      await this._fullReader.headersReady;
      const {
        isStreamingSupported: A,
        isRangeSupported: i,
        contentLength: l
      } = this._fullReader;
      return (!A || !i) && (this._lastProgress && g.onProgress?.(this._lastProgress), this._fullReader.onProgress = (s) => {
        g.onProgress?.({
          loaded: s.loaded,
          total: s.total
        });
      }), {
        isStreamingSupported: A,
        isRangeSupported: i,
        contentLength: l
      };
    }), I.on("GetRangeReader", (C, A) => {
      Q(this._networkStream, "GetRangeReader - no `IPDFStream` instance available.");
      const i = this._networkStream.getRangeReader(C.begin, C.end);
      if (!i) {
        A.close();
        return;
      }
      A.onPull = () => {
        i.read().then(function({
          value: l,
          done: s
        }) {
          if (s) {
            A.close();
            return;
          }
          Q(l instanceof ArrayBuffer, "GetRangeReader - expected an ArrayBuffer."), A.enqueue(new Uint8Array(l), 1, [l]);
        }).catch((l) => {
          A.error(l);
        });
      }, A.onCancel = (l) => {
        i.cancel(l), A.ready.catch((s) => {
          if (!this.destroyed)
            throw s;
        });
      };
    }), I.on("GetDoc", ({
      pdfInfo: C
    }) => {
      this._numPages = C.numPages, this._htmlForXfa = C.htmlForXfa, delete C.htmlForXfa, g._capability.resolve(new Hd(C, this));
    }), I.on("DocException", (C) => {
      g._capability.reject(BI(C));
    }), I.on("PasswordRequest", (C) => {
      this.#i = Promise.withResolvers();
      try {
        if (!g.onPassword)
          throw BI(C);
        const A = (i) => {
          i instanceof Error ? this.#i.reject(i) : this.#i.resolve({
            password: i
          });
        };
        g.onPassword(A, C.code);
      } catch (A) {
        this.#i.reject(A);
      }
      return this.#i.promise;
    }), I.on("DataLoaded", (C) => {
      g.onProgress?.({
        loaded: C.length,
        total: C.length
      }), this.downloadInfoCapability.resolve(C);
    }), I.on("StartRenderPage", (C) => {
      if (this.destroyed)
        return;
      this.#g.get(C.pageIndex)._startRenderPage(C.transparency, C.cacheKey);
    }), I.on("commonobj", ([C, A, i]) => {
      if (this.destroyed || this.commonObjs.has(C))
        return null;
      switch (A) {
        case "Font":
          if ("error" in i) {
            const G = i.error;
            L(`Error during font loading: ${G}`), this.commonObjs.resolve(C, G);
            break;
          }
          const l = new E(i), s = this._params.pdfBug && globalThis.FontInspector?.enabled ? (G, b) => globalThis.FontInspector.fontAdded(G, b) : null, d = new ps(l, s, i.extra, i.charProcOperatorList);
          this.fontLoader.bind(d).catch(() => I.sendWithPromise("FontFallback", {
            id: C
          })).finally(() => {
            !d.fontExtraProperties && d.data && d.clearData(), this.commonObjs.resolve(C, d);
          });
          break;
        case "CopyLocalImage":
          const {
            imageRef: c
          } = i;
          Q(c, "The imageRef must be defined.");
          for (const G of this.#g.values())
            for (const [, b] of G.objs)
              if (b?.ref === c)
                return b.dataLen ? (this.commonObjs.resolve(C, structuredClone(b)), b.dataLen) : null;
          break;
        case "FontPath":
        case "Image":
        case "Pattern":
          this.commonObjs.resolve(C, i);
          break;
        default:
          throw new Error(`Got unknown common object type ${A}`);
      }
      return null;
    }), I.on("obj", ([C, A, i, l]) => {
      if (this.destroyed)
        return;
      const s = this.#g.get(A);
      if (!s.objs.has(C)) {
        if (s._intentStates.size === 0) {
          l?.bitmap?.close();
          return;
        }
        switch (i) {
          case "Image":
          case "Pattern":
            s.objs.resolve(C, l);
            break;
          default:
            throw new Error(`Got unknown object type ${i}`);
        }
      }
    }), I.on("DocProgress", (C) => {
      this.destroyed || g.onProgress?.({
        loaded: C.loaded,
        total: C.total
      });
    }), I.on("FetchBinaryData", async (C) => {
      if (this.destroyed)
        throw new Error("Worker was destroyed.");
      const A = this[C.type];
      if (!A)
        throw new Error(`${C.type} not initialized, see the \`useWorkerFetch\` parameter.`);
      return A.fetch(C);
    });
  }
  getData() {
    return this.messageHandler.sendWithPromise("GetData", null);
  }
  saveDocument() {
    this.annotationStorage.size <= 0 && L("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");
    const {
      map: I,
      transfer: g
    } = this.annotationStorage.serializable;
    return this.messageHandler.sendWithPromise("SaveDocument", {
      isPureXfa: !!this._htmlForXfa,
      numPages: this._numPages,
      annotationStorage: I,
      filename: this._fullReader?.filename ?? null
    }, g).finally(() => {
      this.annotationStorage.resetModified();
    });
  }
  getPage(I) {
    if (!Number.isInteger(I) || I <= 0 || I > this._numPages)
      return Promise.reject(new Error("Invalid page request."));
    const g = I - 1, C = this.#A.get(g);
    if (C)
      return C;
    const A = this.messageHandler.sendWithPromise("GetPage", {
      pageIndex: g
    }).then((i) => {
      if (this.destroyed)
        throw new Error("Transport destroyed");
      i.refStr && this.#C.set(i.refStr, I);
      const l = new Md(g, i, this, this._params.pdfBug);
      return this.#g.set(g, l), l;
    });
    return this.#A.set(g, A), A;
  }
  getPageIndex(I) {
    return oA(I) ? this.messageHandler.sendWithPromise("GetPageIndex", {
      num: I.num,
      gen: I.gen
    }) : Promise.reject(new Error("Invalid pageIndex request."));
  }
  getAnnotations(I, g) {
    return this.messageHandler.sendWithPromise("GetAnnotations", {
      pageIndex: I,
      intent: g
    });
  }
  getFieldObjects() {
    return this.#l("GetFieldObjects");
  }
  hasJSActions() {
    return this.#l("HasJSActions");
  }
  getCalculationOrderIds() {
    return this.messageHandler.sendWithPromise("GetCalculationOrderIds", null);
  }
  getDestinations() {
    return this.messageHandler.sendWithPromise("GetDestinations", null);
  }
  getDestination(I) {
    return typeof I != "string" ? Promise.reject(new Error("Invalid destination request.")) : this.messageHandler.sendWithPromise("GetDestination", {
      id: I
    });
  }
  getPageLabels() {
    return this.messageHandler.sendWithPromise("GetPageLabels", null);
  }
  getPageLayout() {
    return this.messageHandler.sendWithPromise("GetPageLayout", null);
  }
  getPageMode() {
    return this.messageHandler.sendWithPromise("GetPageMode", null);
  }
  getViewerPreferences() {
    return this.messageHandler.sendWithPromise("GetViewerPreferences", null);
  }
  getOpenAction() {
    return this.messageHandler.sendWithPromise("GetOpenAction", null);
  }
  getAttachments() {
    return this.messageHandler.sendWithPromise("GetAttachments", null);
  }
  getAnnotationsByType(I, g) {
    return this.messageHandler.sendWithPromise("GetAnnotationsByType", {
      types: I,
      pageIndexesToSkip: g
    });
  }
  getDocJSActions() {
    return this.#l("GetDocJSActions");
  }
  getPageJSActions(I) {
    return this.messageHandler.sendWithPromise("GetPageJSActions", {
      pageIndex: I
    });
  }
  getStructTree(I) {
    return this.messageHandler.sendWithPromise("GetStructTree", {
      pageIndex: I
    });
  }
  getOutline() {
    return this.messageHandler.sendWithPromise("GetOutline", null);
  }
  getOptionalContentConfig(I) {
    return this.#l("GetOptionalContentConfig").then((g) => new cd(g, I));
  }
  getPermissions() {
    return this.messageHandler.sendWithPromise("GetPermissions", null);
  }
  getMetadata() {
    const I = "GetMetadata", g = this.#I.get(I);
    if (g)
      return g;
    const C = this.messageHandler.sendWithPromise(I, null).then((A) => ({
      info: A[0],
      metadata: A[1] ? new dd(A[1]) : null,
      contentDispositionFilename: this._fullReader?.filename ?? null,
      contentLength: this._fullReader?.contentLength ?? null
    }));
    return this.#I.set(I, C), C;
  }
  getMarkInfo() {
    return this.messageHandler.sendWithPromise("GetMarkInfo", null);
  }
  async startCleanup(I = !1) {
    if (!this.destroyed) {
      await this.messageHandler.sendWithPromise("Cleanup", null);
      for (const g of this.#g.values())
        if (!g.cleanup())
          throw new Error(`startCleanup: Page ${g.pageNumber} is currently rendering.`);
      this.commonObjs.clear(), I || this.fontLoader.clear(), this.#I.clear(), this.filterFactory.destroy(!0), yC.cleanup();
    }
  }
  cachedPageNumber(I) {
    if (!oA(I))
      return null;
    const g = I.gen === 0 ? `${I.num}R` : `${I.num}R${I.gen}`;
    return this.#C.get(g) ?? null;
  }
}
class Kd {
  #I = null;
  onContinue = null;
  onError = null;
  constructor(I) {
    this.#I = I;
  }
  get promise() {
    return this.#I.capability.promise;
  }
  cancel(I = 0) {
    this.#I.cancel(null, I);
  }
  get separateAnnots() {
    const {
      separateAnnots: I
    } = this.#I.operatorList;
    if (!I)
      return !1;
    const {
      annotationCanvasMap: g
    } = this.#I;
    return I.form || I.canvas && g?.size > 0;
  }
}
class wg {
  #I = null;
  static #g = /* @__PURE__ */ new WeakSet();
  constructor({
    callback: I,
    params: g,
    objs: C,
    commonObjs: A,
    annotationCanvasMap: i,
    operatorList: l,
    pageIndex: s,
    canvasFactory: d,
    filterFactory: c,
    useRequestAnimationFrame: G = !1,
    pdfBug: b = !1,
    pageColors: o = null,
    enableHWA: m = !1,
    operationsFilter: e = null
  }) {
    this.callback = I, this.params = g, this.objs = C, this.commonObjs = A, this.annotationCanvasMap = i, this.operatorListIdx = null, this.operatorList = l, this._pageIndex = s, this.canvasFactory = d, this.filterFactory = c, this._pdfBug = b, this.pageColors = o, this.running = !1, this.graphicsReadyCallback = null, this.graphicsReady = !1, this._useRequestAnimationFrame = G === !0 && typeof window < "u", this.cancelled = !1, this.capability = Promise.withResolvers(), this.task = new Kd(this), this._cancelBound = this.cancel.bind(this), this._continueBound = this._continue.bind(this), this._scheduleNextBound = this._scheduleNext.bind(this), this._nextBound = this._next.bind(this), this._canvas = g.canvas, this._canvasContext = g.canvas ? null : g.canvasContext, this._enableHWA = m, this._dependencyTracker = g.dependencyTracker, this._operationsFilter = e;
  }
  get completed() {
    return this.capability.promise.catch(function() {
    });
  }
  initializeGraphics({
    transparency: I = !1,
    optionalContentConfig: g
  }) {
    if (this.cancelled)
      return;
    if (this._canvas) {
      if (wg.#g.has(this._canvas))
        throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");
      wg.#g.add(this._canvas);
    }
    this._pdfBug && globalThis.StepperManager?.enabled && (this.stepper = globalThis.StepperManager.create(this._pageIndex), this.stepper.init(this.operatorList), this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint());
    const {
      viewport: C,
      transform: A,
      background: i,
      dependencyTracker: l
    } = this.params, s = this._canvasContext || this._canvas.getContext("2d", {
      alpha: !1,
      willReadFrequently: !this._enableHWA
    });
    this.gfx = new ng(s, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {
      optionalContentConfig: g
    }, this.annotationCanvasMap, this.pageColors, l), this.gfx.beginDrawing({
      transform: A,
      viewport: C,
      transparency: I,
      background: i
    }), this.operatorListIdx = 0, this.graphicsReady = !0, this.graphicsReadyCallback?.();
  }
  cancel(I = null, g = 0) {
    this.running = !1, this.cancelled = !0, this.gfx?.endDrawing(), this.#I && (window.cancelAnimationFrame(this.#I), this.#I = null), wg.#g.delete(this._canvas), I ||= new XA(`Rendering cancelled, page ${this._pageIndex + 1}`, g), this.callback(I), this.task.onError?.(I);
  }
  operatorListChanged() {
    if (!this.graphicsReady) {
      this.graphicsReadyCallback ||= this._continueBound;
      return;
    }
    this.gfx.dependencyTracker?.growOperationsCount(this.operatorList.fnArray.length), this.stepper?.updateOperatorList(this.operatorList), !this.running && this._continue();
  }
  _continue() {
    this.running = !0, !this.cancelled && (this.task.onContinue ? this.task.onContinue(this._scheduleNextBound) : this._scheduleNext());
  }
  _scheduleNext() {
    this._useRequestAnimationFrame ? this.#I = window.requestAnimationFrame(() => {
      this.#I = null, this._nextBound().catch(this._cancelBound);
    }) : Promise.resolve().then(this._nextBound).catch(this._cancelBound);
  }
  async _next() {
    this.cancelled || (this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper, this._operationsFilter), this.operatorListIdx === this.operatorList.argsArray.length && (this.running = !1, this.operatorList.lastChunk && (this.gfx.endDrawing(), wg.#g.delete(this._canvas), this.callback())));
  }
}
const Sd = "5.4.296", pd = "f56dc8601";
let Hl = class SI {
  #I = null;
  #g = null;
  #A;
  #C = null;
  #i = !1;
  #l = !1;
  #s = null;
  #d;
  #c = null;
  #Z = null;
  static #o = null;
  static get _keyboardManager() {
    return T(this, "_keyboardManager", new CC([[["Escape", "mac+Escape"], SI.prototype._hideDropdownFromKeyboard], [[" ", "mac+ "], SI.prototype._colorSelectFromKeyboard], [["ArrowDown", "ArrowRight", "mac+ArrowDown", "mac+ArrowRight"], SI.prototype._moveToNext], [["ArrowUp", "ArrowLeft", "mac+ArrowUp", "mac+ArrowLeft"], SI.prototype._moveToPrevious], [["Home", "mac+Home"], SI.prototype._moveToBeginning], [["End", "mac+End"], SI.prototype._moveToEnd]]));
  }
  constructor({
    editor: I = null,
    uiManager: g = null
  }) {
    I ? (this.#l = !1, this.#s = I) : this.#l = !0, this.#Z = I?._uiManager || g, this.#d = this.#Z._eventBus, this.#A = I?.color?.toUpperCase() || this.#Z?.highlightColors.values().next().value || "#FFFF98", SI.#o ||= Object.freeze({
      blue: "pdfjs-editor-colorpicker-blue",
      green: "pdfjs-editor-colorpicker-green",
      pink: "pdfjs-editor-colorpicker-pink",
      red: "pdfjs-editor-colorpicker-red",
      yellow: "pdfjs-editor-colorpicker-yellow"
    });
  }
  renderButton() {
    const I = this.#I = document.createElement("button");
    I.className = "colorPicker", I.tabIndex = "0", I.setAttribute("data-l10n-id", "pdfjs-editor-colorpicker-button"), I.ariaHasPopup = "true", this.#s && (I.ariaControls = `${this.#s.id}_colorpicker_dropdown`);
    const g = this.#Z._signal;
    I.addEventListener("click", this.#a.bind(this), {
      signal: g
    }), I.addEventListener("keydown", this.#t.bind(this), {
      signal: g
    });
    const C = this.#g = document.createElement("span");
    return C.className = "swatch", C.ariaHidden = "true", C.style.backgroundColor = this.#A, I.append(C), I;
  }
  renderMainDropdown() {
    const I = this.#C = this.#b();
    return I.ariaOrientation = "horizontal", I.ariaLabelledBy = "highlightColorPickerLabel", I;
  }
  #b() {
    const I = document.createElement("div"), g = this.#Z._signal;
    I.addEventListener("contextmenu", RI, {
      signal: g
    }), I.className = "dropdown", I.role = "listbox", I.ariaMultiSelectable = "false", I.ariaOrientation = "vertical", I.setAttribute("data-l10n-id", "pdfjs-editor-colorpicker-dropdown"), this.#s && (I.id = `${this.#s.id}_colorpicker_dropdown`);
    for (const [C, A] of this.#Z.highlightColors) {
      const i = document.createElement("button");
      i.tabIndex = "0", i.role = "option", i.setAttribute("data-color", A), i.title = C, i.setAttribute("data-l10n-id", SI.#o[C]);
      const l = document.createElement("span");
      i.append(l), l.className = "swatch", l.style.backgroundColor = A, i.ariaSelected = A === this.#A, i.addEventListener("click", this.#m.bind(this, A), {
        signal: g
      }), I.append(i);
    }
    return I.addEventListener("keydown", this.#t.bind(this), {
      signal: g
    }), I;
  }
  #m(I, g) {
    g.stopPropagation(), this.#d.dispatch("switchannotationeditorparams", {
      source: this,
      type: j.HIGHLIGHT_COLOR,
      value: I
    }), this.updateColor(I);
  }
  _colorSelectFromKeyboard(I) {
    if (I.target === this.#I) {
      this.#a(I);
      return;
    }
    const g = I.target.getAttribute("data-color");
    g && this.#m(g, I);
  }
  _moveToNext(I) {
    if (!this.#e) {
      this.#a(I);
      return;
    }
    if (I.target === this.#I) {
      this.#C.firstChild?.focus();
      return;
    }
    I.target.nextSibling?.focus();
  }
  _moveToPrevious(I) {
    if (I.target === this.#C?.firstChild || I.target === this.#I) {
      this.#e && this._hideDropdownFromKeyboard();
      return;
    }
    this.#e || this.#a(I), I.target.previousSibling?.focus();
  }
  _moveToBeginning(I) {
    if (!this.#e) {
      this.#a(I);
      return;
    }
    this.#C.firstChild?.focus();
  }
  _moveToEnd(I) {
    if (!this.#e) {
      this.#a(I);
      return;
    }
    this.#C.lastChild?.focus();
  }
  #t(I) {
    SI._keyboardManager.exec(this, I);
  }
  #a(I) {
    if (this.#e) {
      this.hideDropdown();
      return;
    }
    if (this.#i = I.detail === 0, this.#c || (this.#c = new AbortController(), window.addEventListener("pointerdown", this.#G.bind(this), {
      signal: this.#Z.combinedSignal(this.#c)
    })), this.#I.ariaExpanded = "true", this.#C) {
      this.#C.classList.remove("hidden");
      return;
    }
    const g = this.#C = this.#b();
    this.#I.append(g);
  }
  #G(I) {
    this.#C?.contains(I.target) || this.hideDropdown();
  }
  hideDropdown() {
    this.#C?.classList.add("hidden"), this.#I.ariaExpanded = "false", this.#c?.abort(), this.#c = null;
  }
  get #e() {
    return this.#C && !this.#C.classList.contains("hidden");
  }
  _hideDropdownFromKeyboard() {
    if (!this.#l) {
      if (!this.#e) {
        this.#s?.unselect();
        return;
      }
      this.hideDropdown(), this.#I.focus({
        preventScroll: !0,
        focusVisible: this.#i
      });
    }
  }
  updateColor(I) {
    if (this.#g && (this.#g.style.backgroundColor = I), !this.#C)
      return;
    const g = this.#Z.highlightColors.values();
    for (const C of this.#C.children)
      C.ariaSelected = g.next().value === I.toUpperCase();
  }
  destroy() {
    this.#I?.remove(), this.#I = null, this.#g = null, this.#C?.remove(), this.#C = null;
  }
};
class Pg {
  #I = null;
  #g = null;
  #A = null;
  static #C = null;
  constructor(I) {
    this.#g = I, this.#A = I._uiManager, Pg.#C ||= Object.freeze({
      freetext: "pdfjs-editor-color-picker-free-text-input",
      ink: "pdfjs-editor-color-picker-ink-input"
    });
  }
  renderButton() {
    if (this.#I)
      return this.#I;
    const {
      editorType: I,
      colorType: g,
      colorValue: C
    } = this.#g, A = this.#I = document.createElement("input");
    return A.type = "color", A.value = C || "#000000", A.className = "basicColorPicker", A.tabIndex = 0, A.setAttribute("data-l10n-id", Pg.#C[I]), A.addEventListener("input", () => {
      this.#A.updateParams(g, A.value);
    }, {
      signal: this.#A._signal
    }), A;
  }
  update(I) {
    this.#I && (this.#I.value = I);
  }
  destroy() {
    this.#I?.remove(), this.#I = null;
  }
  hideDropdown() {
  }
}
function Bi(Z) {
  return Math.floor(Math.max(0, Math.min(1, Z)) * 255).toString(16).padStart(2, "0");
}
function Fg(Z) {
  return Math.max(0, Math.min(255, 255 * Z));
}
class Wi {
  static CMYK_G([I, g, C, A]) {
    return ["G", 1 - Math.min(1, 0.3 * I + 0.59 * C + 0.11 * g + A)];
  }
  static G_CMYK([I]) {
    return ["CMYK", 0, 0, 0, 1 - I];
  }
  static G_RGB([I]) {
    return ["RGB", I, I, I];
  }
  static G_rgb([I]) {
    return I = Fg(I), [I, I, I];
  }
  static G_HTML([I]) {
    const g = Bi(I);
    return `#${g}${g}${g}`;
  }
  static RGB_G([I, g, C]) {
    return ["G", 0.3 * I + 0.59 * g + 0.11 * C];
  }
  static RGB_rgb(I) {
    return I.map(Fg);
  }
  static RGB_HTML(I) {
    return `#${I.map(Bi).join("")}`;
  }
  static T_HTML() {
    return "#00000000";
  }
  static T_rgb() {
    return [null];
  }
  static CMYK_RGB([I, g, C, A]) {
    return ["RGB", 1 - Math.min(1, I + A), 1 - Math.min(1, C + A), 1 - Math.min(1, g + A)];
  }
  static CMYK_rgb([I, g, C, A]) {
    return [Fg(1 - Math.min(1, I + A)), Fg(1 - Math.min(1, C + A)), Fg(1 - Math.min(1, g + A))];
  }
  static CMYK_HTML(I) {
    const g = this.CMYK_RGB(I).slice(1);
    return this.RGB_HTML(g);
  }
  static RGB_CMYK([I, g, C]) {
    const A = 1 - I, i = 1 - g, l = 1 - C, s = Math.min(A, i, l);
    return ["CMYK", A, i, l, s];
  }
}
class Fd {
  create(I, g, C = !1) {
    if (I <= 0 || g <= 0)
      throw new Error("Invalid SVG dimensions");
    const A = this._createSVG("svg:svg");
    return A.setAttribute("version", "1.1"), C || (A.setAttribute("width", `${I}px`), A.setAttribute("height", `${g}px`)), A.setAttribute("preserveAspectRatio", "none"), A.setAttribute("viewBox", `0 0 ${I} ${g}`), A;
  }
  createElement(I) {
    if (typeof I != "string")
      throw new Error("Invalid SVG element type");
    return this._createSVG(I);
  }
  _createSVG(I) {
    f("Abstract method `_createSVG` called.");
  }
}
let XC = class extends Fd {
  _createSVG(I) {
    return document.createElementNS(rI, I);
  }
};
const zd = 9, bg = /* @__PURE__ */ new WeakSet(), Jd = (/* @__PURE__ */ new Date()).getTimezoneOffset() * 60 * 1e3;
class wi {
  static create(I) {
    switch (I.data.annotationType) {
      case iI.LINK:
        return new JA(I);
      case iI.TEXT:
        return new kd(I);
      case iI.WIDGET:
        switch (I.data.fieldType) {
          case "Tx":
            return new rd(I);
          case "Btn":
            return I.data.radioButton ? new Ml(I) : I.data.checkBox ? new jd(I) : new Qd(I);
          case "Ch":
            return new xd(I);
          case "Sig":
            return new Td(I);
        }
        return new mg(I);
      case iI.POPUP:
        return new tA(I);
      case iI.FREETEXT:
        return new Dl(I);
      case iI.LINE:
        return new Ud(I);
      case iI.SQUARE:
        return new vd(I);
      case iI.CIRCLE:
        return new Ed(I);
      case iI.POLYLINE:
        return new Kl(I);
      case iI.CARET:
        return new fd(I);
      case iI.INK:
        return new LA(I);
      case iI.POLYGON:
        return new Pd(I);
      case iI.HIGHLIGHT:
        return new Sl(I);
      case iI.UNDERLINE:
        return new _d(I);
      case iI.SQUIGGLY:
        return new qd(I);
      case iI.STRIKEOUT:
        return new $d(I);
      case iI.STAMP:
        return new pl(I);
      case iI.FILEATTACHMENT:
        return new IZ(I);
      default:
        return new $(I);
    }
  }
}
class $ {
  #I = null;
  #g = !1;
  #A = null;
  constructor(I, {
    isRenderable: g = !1,
    ignoreBorder: C = !1,
    createQuadrilaterals: A = !1
  } = {}) {
    this.isRenderable = g, this.data = I.data, this.layer = I.layer, this.linkService = I.linkService, this.downloadManager = I.downloadManager, this.imageResourcesPath = I.imageResourcesPath, this.renderForms = I.renderForms, this.svgFactory = I.svgFactory, this.annotationStorage = I.annotationStorage, this.enableComment = I.enableComment, this.enableScripting = I.enableScripting, this.hasJSActions = I.hasJSActions, this._fieldObjects = I.fieldObjects, this.parent = I.parent, g && (this.container = this._createContainer(C)), A && this._createQuadrilaterals();
  }
  static _hasPopupData({
    contentsObj: I,
    richText: g
  }) {
    return !!(I?.str || g?.str);
  }
  get _isEditable() {
    return this.data.isEditable;
  }
  get hasPopupData() {
    return $._hasPopupData(this.data) || this.enableComment && !!this.commentText;
  }
  get commentData() {
    const {
      data: I
    } = this, g = this.annotationStorage?.getEditor(I.id);
    return g ? g.getData() : I;
  }
  get hasCommentButton() {
    return this.enableComment && this.hasPopupElement;
  }
  get commentButtonPosition() {
    const I = this.annotationStorage?.getEditor(this.data.id);
    if (I)
      return I.commentButtonPositionInPage;
    const {
      quadPoints: g,
      inkLists: C,
      rect: A
    } = this.data;
    let i = -1 / 0, l = -1 / 0;
    if (g?.length >= 8) {
      for (let s = 0; s < g.length; s += 8)
        g[s + 1] > l ? (l = g[s + 1], i = g[s + 2]) : g[s + 1] === l && (i = Math.max(i, g[s + 2]));
      return [i, l];
    }
    if (C?.length >= 1) {
      for (const s of C)
        for (let d = 0, c = s.length; d < c; d += 2)
          s[d + 1] > l ? (l = s[d + 1], i = s[d]) : s[d + 1] === l && (i = Math.max(i, s[d]));
      if (i !== 1 / 0)
        return [i, l];
    }
    return A ? [A[2], A[3]] : null;
  }
  _normalizePoint(I) {
    const {
      page: {
        view: g
      },
      viewport: {
        rawDims: {
          pageWidth: C,
          pageHeight: A,
          pageX: i,
          pageY: l
        }
      }
    } = this.parent;
    return I[1] = g[3] - I[1] + g[1], I[0] = 100 * (I[0] - i) / C, I[1] = 100 * (I[1] - l) / A, I;
  }
  get commentText() {
    const {
      data: I
    } = this;
    return this.annotationStorage.getRawValue(`${Og}${I.id}`)?.popup?.contents || I.contentsObj?.str || "";
  }
  set commentText(I) {
    const {
      data: g
    } = this, C = {
      deleted: !I,
      contents: I || ""
    };
    this.annotationStorage.updateEditor(g.id, {
      popup: C
    }) || this.annotationStorage.setValue(`${Og}${g.id}`, {
      id: g.id,
      annotationType: g.annotationType,
      pageIndex: this.parent.page._pageIndex,
      popup: C,
      popupRef: g.popupRef,
      modificationDate: /* @__PURE__ */ new Date()
    }), I || this.removePopup();
  }
  removePopup() {
    (this.#A?.popup || this.popup)?.remove(), this.#A = this.popup = null;
  }
  updateEdited(I) {
    if (!this.container)
      return;
    I.rect && (this.#I ||= {
      rect: this.data.rect.slice(0)
    });
    const {
      rect: g,
      popup: C
    } = I;
    g && this.#C(g);
    let A = this.#A?.popup || this.popup;
    !A && C?.text && (this._createPopup(C), A = this.#A.popup), A && (A.updateEdited(I), C?.deleted && (A.remove(), this.#A = null, this.popup = null));
  }
  resetEdited() {
    this.#I && (this.#C(this.#I.rect), this.#A?.popup.resetEdited(), this.#I = null);
  }
  #C(I) {
    const {
      container: {
        style: g
      },
      data: {
        rect: C,
        rotation: A
      },
      parent: {
        viewport: {
          rawDims: {
            pageWidth: i,
            pageHeight: l,
            pageX: s,
            pageY: d
          }
        }
      }
    } = this;
    C?.splice(0, 4, ...I), g.left = `${100 * (I[0] - s) / i}%`, g.top = `${100 * (l - I[3] + d) / l}%`, A === 0 ? (g.width = `${100 * (I[2] - I[0]) / i}%`, g.height = `${100 * (I[3] - I[1]) / l}%`) : this.setRotation(A);
  }
  _createContainer(I) {
    const {
      data: g,
      parent: {
        page: C,
        viewport: A
      }
    } = this, i = document.createElement("section");
    i.setAttribute("data-annotation-id", g.id), !(this instanceof mg) && !(this instanceof JA) && (i.tabIndex = 0);
    const {
      style: l
    } = i;
    if (l.zIndex = this.parent.zIndex, this.parent.zIndex += 2, g.alternativeText && (i.title = g.alternativeText), g.noRotate && i.classList.add("norotate"), !g.rect || this instanceof tA) {
      const {
        rotation: a
      } = g;
      return !g.hasOwnCanvas && a !== 0 && this.setRotation(a, i), i;
    }
    const {
      width: s,
      height: d
    } = this;
    if (!I && g.borderStyle.width > 0) {
      l.borderWidth = `${g.borderStyle.width}px`;
      const a = g.borderStyle.horizontalCornerRadius, h = g.borderStyle.verticalCornerRadius;
      if (a > 0 || h > 0) {
        const W = `calc(${a}px * var(--total-scale-factor)) / calc(${h}px * var(--total-scale-factor))`;
        l.borderRadius = W;
      } else if (this instanceof Ml) {
        const W = `calc(${s}px * var(--total-scale-factor)) / calc(${d}px * var(--total-scale-factor))`;
        l.borderRadius = W;
      }
      switch (g.borderStyle.style) {
        case tg.SOLID:
          l.borderStyle = "solid";
          break;
        case tg.DASHED:
          l.borderStyle = "dashed";
          break;
        case tg.BEVELED:
          L("Unimplemented border style: beveled");
          break;
        case tg.INSET:
          L("Unimplemented border style: inset");
          break;
        case tg.UNDERLINE:
          l.borderBottomStyle = "solid";
          break;
      }
      const t = g.borderColor || null;
      t ? (this.#g = !0, l.borderColor = M.makeHexColor(t[0] | 0, t[1] | 0, t[2] | 0)) : l.borderWidth = 0;
    }
    const c = M.normalizeRect([g.rect[0], C.view[3] - g.rect[1] + C.view[1], g.rect[2], C.view[3] - g.rect[3] + C.view[1]]), {
      pageWidth: G,
      pageHeight: b,
      pageX: o,
      pageY: m
    } = A.rawDims;
    l.left = `${100 * (c[0] - o) / G}%`, l.top = `${100 * (c[1] - m) / b}%`;
    const {
      rotation: e
    } = g;
    return g.hasOwnCanvas || e === 0 ? (l.width = `${100 * s / G}%`, l.height = `${100 * d / b}%`) : this.setRotation(e, i), i;
  }
  setRotation(I, g = this.container) {
    if (!this.data.rect)
      return;
    const {
      pageWidth: C,
      pageHeight: A
    } = this.parent.viewport.rawDims;
    let {
      width: i,
      height: l
    } = this;
    I % 180 !== 0 && ([i, l] = [l, i]), g.style.width = `${100 * i / C}%`, g.style.height = `${100 * l / A}%`, g.setAttribute("data-main-rotation", (360 - I) % 360);
  }
  get _commonActions() {
    const I = (g, C, A) => {
      const i = A.detail[g], l = i[0], s = i.slice(1);
      A.target.style[C] = Wi[`${l}_HTML`](s), this.annotationStorage.setValue(this.data.id, {
        [C]: Wi[`${l}_rgb`](s)
      });
    };
    return T(this, "_commonActions", {
      display: (g) => {
        const {
          display: C
        } = g.detail, A = C % 2 === 1;
        this.container.style.visibility = A ? "hidden" : "visible", this.annotationStorage.setValue(this.data.id, {
          noView: A,
          noPrint: C === 1 || C === 2
        });
      },
      print: (g) => {
        this.annotationStorage.setValue(this.data.id, {
          noPrint: !g.detail.print
        });
      },
      hidden: (g) => {
        const {
          hidden: C
        } = g.detail;
        this.container.style.visibility = C ? "hidden" : "visible", this.annotationStorage.setValue(this.data.id, {
          noPrint: C,
          noView: C
        });
      },
      focus: (g) => {
        setTimeout(() => g.target.focus({
          preventScroll: !1
        }), 0);
      },
      userName: (g) => {
        g.target.title = g.detail.userName;
      },
      readonly: (g) => {
        g.target.disabled = g.detail.readonly;
      },
      required: (g) => {
        this._setRequired(g.target, g.detail.required);
      },
      bgColor: (g) => {
        I("bgColor", "backgroundColor", g);
      },
      fillColor: (g) => {
        I("fillColor", "backgroundColor", g);
      },
      fgColor: (g) => {
        I("fgColor", "color", g);
      },
      textColor: (g) => {
        I("textColor", "color", g);
      },
      borderColor: (g) => {
        I("borderColor", "borderColor", g);
      },
      strokeColor: (g) => {
        I("strokeColor", "borderColor", g);
      },
      rotation: (g) => {
        const C = g.detail.rotation;
        this.setRotation(C), this.annotationStorage.setValue(this.data.id, {
          rotation: C
        });
      }
    });
  }
  _dispatchEventFromSandbox(I, g) {
    const C = this._commonActions;
    for (const A of Object.keys(g.detail))
      (I[A] || C[A])?.(g);
  }
  _setDefaultPropertiesFromJS(I) {
    if (!this.enableScripting)
      return;
    const g = this.annotationStorage.getRawValue(this.data.id);
    if (!g)
      return;
    const C = this._commonActions;
    for (const [A, i] of Object.entries(g)) {
      const l = C[A];
      if (l) {
        const s = {
          detail: {
            [A]: i
          },
          target: I
        };
        l(s), delete g[A];
      }
    }
  }
  _createQuadrilaterals() {
    if (!this.container)
      return;
    const {
      quadPoints: I
    } = this.data;
    if (!I)
      return;
    const [g, C, A, i] = this.data.rect.map((a) => Math.fround(a));
    if (I.length === 8) {
      const [a, h, t, W] = I.subarray(2, 6);
      if (A === a && i === h && g === t && C === W)
        return;
    }
    const {
      style: l
    } = this.container;
    let s;
    if (this.#g) {
      const {
        borderColor: a,
        borderWidth: h
      } = l;
      l.borderWidth = 0, s = ["url('data:image/svg+xml;utf8,", '<svg xmlns="http://www.w3.org/2000/svg"', ' preserveAspectRatio="none" viewBox="0 0 1 1">', `<g fill="transparent" stroke="${a}" stroke-width="${h}">`], this.container.classList.add("hasBorder");
    }
    const d = A - g, c = i - C, {
      svgFactory: G
    } = this, b = G.createElement("svg");
    b.classList.add("quadrilateralsContainer"), b.setAttribute("width", 0), b.setAttribute("height", 0), b.role = "none";
    const o = G.createElement("defs");
    b.append(o);
    const m = G.createElement("clipPath"), e = `clippath_${this.data.id}`;
    m.setAttribute("id", e), m.setAttribute("clipPathUnits", "objectBoundingBox"), o.append(m);
    for (let a = 2, h = I.length; a < h; a += 8) {
      const t = I[a], W = I[a + 1], B = I[a + 2], w = I[a + 3], n = G.createElement("rect"), V = (B - g) / d, N = (i - W) / c, R = (t - B) / d, Y = (W - w) / c;
      n.setAttribute("x", V), n.setAttribute("y", N), n.setAttribute("width", R), n.setAttribute("height", Y), m.append(n), s?.push(`<rect vector-effect="non-scaling-stroke" x="${V}" y="${N}" width="${R}" height="${Y}"/>`);
    }
    this.#g && (s.push("</g></svg>')"), l.backgroundImage = s.join("")), this.container.append(b), this.container.style.clipPath = `url(#${e})`;
  }
  _createPopup(I = null) {
    const {
      data: g
    } = this;
    let C, A;
    I ? (C = {
      str: I.text
    }, A = I.date) : (C = g.contentsObj, A = g.modificationDate);
    const i = this.#A = new tA({
      data: {
        color: g.color,
        titleObj: g.titleObj,
        modificationDate: A,
        contentsObj: C,
        richText: g.richText,
        parentRect: g.rect,
        borderStyle: 0,
        id: `popup_${g.id}`,
        rotation: g.rotation,
        noRotate: !0
      },
      linkService: this.linkService,
      parent: this.parent,
      elements: [this]
    });
    this.parent._commentManager || this.parent.div.append(i.render());
  }
  get hasPopupElement() {
    return !!(this.#A || this.popup || this.data.popupRef);
  }
  get extraPopupElement() {
    return this.#A;
  }
  render() {
    f("Abstract method `AnnotationElement.render` called");
  }
  _getElementsByName(I, g = null) {
    const C = [];
    if (this._fieldObjects) {
      const A = this._fieldObjects[I];
      if (A)
        for (const {
          page: i,
          id: l,
          exportValues: s
        } of A) {
          if (i === -1 || l === g)
            continue;
          const d = typeof s == "string" ? s : null, c = document.querySelector(`[data-element-id="${l}"]`);
          if (c && !bg.has(c)) {
            L(`_getElementsByName - element not allowed: ${l}`);
            continue;
          }
          C.push({
            id: l,
            exportValue: d,
            domElement: c
          });
        }
      return C;
    }
    for (const A of document.getElementsByName(I)) {
      const {
        exportValue: i
      } = A, l = A.getAttribute("data-element-id");
      l !== g && bg.has(A) && C.push({
        id: l,
        exportValue: i,
        domElement: A
      });
    }
    return C;
  }
  show() {
    this.container && (this.container.hidden = !1), this.popup?.maybeShow();
  }
  hide() {
    this.container && (this.container.hidden = !0), this.popup?.forceHide();
  }
  getElementsToTriggerPopup() {
    return this.container;
  }
  addHighlightArea() {
    const I = this.getElementsToTriggerPopup();
    if (Array.isArray(I))
      for (const g of I)
        g.classList.add("highlightArea");
    else
      I.classList.add("highlightArea");
  }
  _editOnDoubleClick() {
    if (!this._isEditable)
      return;
    const {
      annotationEditorType: I,
      data: {
        id: g
      }
    } = this;
    this.container.addEventListener("dblclick", () => {
      this.linkService.eventBus?.dispatch("switchannotationeditormode", {
        source: this,
        mode: I,
        editId: g,
        mustEnterInEditMode: !0
      });
    });
  }
  get width() {
    return this.data.rect[2] - this.data.rect[0];
  }
  get height() {
    return this.data.rect[3] - this.data.rect[1];
  }
}
class Ld extends $ {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    }), this.editor = I.editor;
  }
  render() {
    return this.container.className = "editorAnnotation", this.container;
  }
  createOrUpdatePopup() {
    const {
      editor: I
    } = this;
    I.hasComment && (this._createPopup(I.comment), this.extraPopupElement.popup.renderCommentButton());
  }
  get hasCommentButton() {
    return this.enableComment && this.editor.hasComment;
  }
  get commentButtonPosition() {
    return this.editor.commentButtonPositionInPage;
  }
  get commentText() {
    return this.editor.comment.text;
  }
  set commentText(I) {
    this.editor.comment = I, I || this.removePopup();
  }
  get commentData() {
    return this.editor.getData();
  }
  remove() {
    this.container.remove(), this.container = null, this.removePopup();
  }
}
class JA extends $ {
  constructor(I, g = null) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !!g?.ignoreBorder,
      createQuadrilaterals: !0
    }), this.isTooltipOnly = I.data.isTooltipOnly;
  }
  render() {
    const {
      data: I,
      linkService: g
    } = this, C = document.createElement("a");
    C.setAttribute("data-element-id", I.id);
    let A = !1;
    return I.url ? (g.addLinkAttributes(C, I.url, I.newWindow), A = !0) : I.action ? (this._bindNamedAction(C, I.action, I.overlaidText), A = !0) : I.attachment ? (this.#g(C, I.attachment, I.overlaidText, I.attachmentDest), A = !0) : I.setOCGState ? (this.#A(C, I.setOCGState, I.overlaidText), A = !0) : I.dest ? (this._bindLink(C, I.dest, I.overlaidText), A = !0) : (I.actions && (I.actions.Action || I.actions["Mouse Up"] || I.actions["Mouse Down"]) && this.enableScripting && this.hasJSActions && (this._bindJSAction(C, I), A = !0), I.resetForm ? (this._bindResetFormAction(C, I.resetForm), A = !0) : this.isTooltipOnly && !A && (this._bindLink(C, ""), A = !0)), this.container.classList.add("linkAnnotation"), A && this.container.append(C), this.container;
  }
  #I() {
    this.container.setAttribute("data-internal-link", "");
  }
  _bindLink(I, g, C = "") {
    I.href = this.linkService.getDestinationHash(g), I.onclick = () => (g && this.linkService.goToDestination(g), !1), (g || g === "") && this.#I(), C && (I.title = C);
  }
  _bindNamedAction(I, g, C = "") {
    I.href = this.linkService.getAnchorUrl(""), I.onclick = () => (this.linkService.executeNamedAction(g), !1), C && (I.title = C), this.#I();
  }
  #g(I, g, C = "", A = null) {
    I.href = this.linkService.getAnchorUrl(""), g.description ? I.title = g.description : C && (I.title = C), I.onclick = () => (this.downloadManager?.openOrDownloadData(g.content, g.filename, A), !1), this.#I();
  }
  #A(I, g, C = "") {
    I.href = this.linkService.getAnchorUrl(""), I.onclick = () => (this.linkService.executeSetOCGState(g), !1), C && (I.title = C), this.#I();
  }
  _bindJSAction(I, g) {
    I.href = this.linkService.getAnchorUrl("");
    const C = /* @__PURE__ */ new Map([["Action", "onclick"], ["Mouse Up", "onmouseup"], ["Mouse Down", "onmousedown"]]);
    for (const A of Object.keys(g.actions)) {
      const i = C.get(A);
      i && (I[i] = () => (this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: g.id,
          name: A
        }
      }), !1));
    }
    g.overlaidText && (I.title = g.overlaidText), I.onclick || (I.onclick = () => !1), this.#I();
  }
  _bindResetFormAction(I, g) {
    const C = I.onclick;
    if (C || (I.href = this.linkService.getAnchorUrl("")), this.#I(), !this._fieldObjects) {
      L('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'), C || (I.onclick = () => !1);
      return;
    }
    I.onclick = () => {
      C?.();
      const {
        fields: A,
        refs: i,
        include: l
      } = g, s = [];
      if (A.length !== 0 || i.length !== 0) {
        const G = new Set(i);
        for (const b of A) {
          const o = this._fieldObjects[b] || [];
          for (const {
            id: m
          } of o)
            G.add(m);
        }
        for (const b of Object.values(this._fieldObjects))
          for (const o of b)
            G.has(o.id) === l && s.push(o);
      } else
        for (const G of Object.values(this._fieldObjects))
          s.push(...G);
      const d = this.annotationStorage, c = [];
      for (const G of s) {
        const {
          id: b
        } = G;
        switch (c.push(b), G.type) {
          case "text": {
            const m = G.defaultValue || "";
            d.setValue(b, {
              value: m
            });
            break;
          }
          case "checkbox":
          case "radiobutton": {
            const m = G.defaultValue === G.exportValues;
            d.setValue(b, {
              value: m
            });
            break;
          }
          case "combobox":
          case "listbox": {
            const m = G.defaultValue || "";
            d.setValue(b, {
              value: m
            });
            break;
          }
          default:
            continue;
        }
        const o = document.querySelector(`[data-element-id="${b}"]`);
        if (o) {
          if (!bg.has(o)) {
            L(`_bindResetFormAction - element not allowed: ${b}`);
            continue;
          }
        } else continue;
        o.dispatchEvent(new Event("resetform"));
      }
      return this.enableScripting && this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: "app",
          ids: c,
          name: "ResetForm"
        }
      }), !1;
    };
  }
}
class kd extends $ {
  constructor(I) {
    super(I, {
      isRenderable: !0
    });
  }
  render() {
    this.container.classList.add("textAnnotation");
    const I = document.createElement("img");
    return I.src = this.imageResourcesPath + "annotation-" + this.data.name.toLowerCase() + ".svg", I.setAttribute("data-l10n-id", "pdfjs-text-annotation-type"), I.setAttribute("data-l10n-args", JSON.stringify({
      type: this.data.name
    })), !this.data.popupRef && this.hasPopupData && this._createPopup(), this.container.append(I), this.container;
  }
}
class mg extends $ {
  render() {
    return this.container;
  }
  showElementAndHideCanvas(I) {
    this.data.hasOwnCanvas && (I.previousSibling?.nodeName === "CANVAS" && (I.previousSibling.hidden = !0), I.hidden = !1);
  }
  _getKeyModifier(I) {
    return GI.platform.isMac ? I.metaKey : I.ctrlKey;
  }
  _setEventListener(I, g, C, A, i) {
    C.includes("mouse") ? I.addEventListener(C, (l) => {
      this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: this.data.id,
          name: A,
          value: i(l),
          shift: l.shiftKey,
          modifier: this._getKeyModifier(l)
        }
      });
    }) : I.addEventListener(C, (l) => {
      if (C === "blur") {
        if (!g.focused || !l.relatedTarget)
          return;
        g.focused = !1;
      } else if (C === "focus") {
        if (g.focused)
          return;
        g.focused = !0;
      }
      i && this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: this.data.id,
          name: A,
          value: i(l)
        }
      });
    });
  }
  _setEventListeners(I, g, C, A) {
    for (const [i, l] of C)
      (l === "Action" || this.data.actions?.[l]) && ((l === "Focus" || l === "Blur") && (g ||= {
        focused: !1
      }), this._setEventListener(I, g, i, l, A), l === "Focus" && !this.data.actions?.Blur ? this._setEventListener(I, g, "blur", "Blur", null) : l === "Blur" && !this.data.actions?.Focus && this._setEventListener(I, g, "focus", "Focus", null));
  }
  _setBackgroundColor(I) {
    const g = this.data.backgroundColor || null;
    I.style.backgroundColor = g === null ? "transparent" : M.makeHexColor(g[0], g[1], g[2]);
  }
  _setTextStyle(I) {
    const g = ["left", "center", "right"], {
      fontColor: C
    } = this.data.defaultAppearanceData, A = this.data.defaultAppearanceData.fontSize || zd, i = I.style;
    let l;
    const s = 2, d = (c) => Math.round(10 * c) / 10;
    if (this.data.multiLine) {
      const c = Math.abs(this.data.rect[3] - this.data.rect[1] - s), G = Math.round(c / (QC * A)) || 1, b = c / G;
      l = Math.min(A, d(b / QC));
    } else {
      const c = Math.abs(this.data.rect[3] - this.data.rect[1] - s);
      l = Math.min(A, d(c / QC));
    }
    i.fontSize = `calc(${l}px * var(--total-scale-factor))`, i.color = M.makeHexColor(C[0], C[1], C[2]), this.data.textAlignment !== null && (i.textAlign = g[this.data.textAlignment]);
  }
  _setRequired(I, g) {
    g ? I.setAttribute("required", !0) : I.removeAttribute("required"), I.setAttribute("aria-required", g);
  }
}
class rd extends mg {
  constructor(I) {
    const g = I.renderForms || I.data.hasOwnCanvas || !I.data.hasAppearance && !!I.data.fieldValue;
    super(I, {
      isRenderable: g
    });
  }
  setPropertyOnSiblings(I, g, C, A) {
    const i = this.annotationStorage;
    for (const l of this._getElementsByName(I.name, I.id))
      l.domElement && (l.domElement[g] = C), i.setValue(l.id, {
        [A]: C
      });
  }
  render() {
    const I = this.annotationStorage, g = this.data.id;
    this.container.classList.add("textWidgetAnnotation");
    let C = null;
    if (this.renderForms) {
      const A = I.getValue(g, {
        value: this.data.fieldValue
      });
      let i = A.value || "";
      const l = I.getValue(g, {
        charLimit: this.data.maxLen
      }).charLimit;
      l && i.length > l && (i = i.slice(0, l));
      let s = A.formattedValue || this.data.textContent?.join(`
`) || null;
      s && this.data.comb && (s = s.replaceAll(/\s+/g, ""));
      const d = {
        userValue: i,
        formattedValue: s,
        lastCommittedValue: null,
        commitKey: 1,
        focused: !1
      };
      this.data.multiLine ? (C = document.createElement("textarea"), C.textContent = s ?? i, this.data.doNotScroll && (C.style.overflowY = "hidden")) : (C = document.createElement("input"), C.type = this.data.password ? "password" : "text", C.setAttribute("value", s ?? i), this.data.doNotScroll && (C.style.overflowX = "hidden")), this.data.hasOwnCanvas && (C.hidden = !0), bg.add(C), C.setAttribute("data-element-id", g), C.disabled = this.data.readOnly, C.name = this.data.fieldName, C.tabIndex = 0;
      const {
        datetimeFormat: c,
        datetimeType: G,
        timeStep: b
      } = this.data, o = !!G && this.enableScripting;
      c && (C.title = c), this._setRequired(C, this.data.required), l && (C.maxLength = l), C.addEventListener("input", (e) => {
        I.setValue(g, {
          value: e.target.value
        }), this.setPropertyOnSiblings(C, "value", e.target.value, "value"), d.formattedValue = null;
      }), C.addEventListener("resetform", (e) => {
        const a = this.data.defaultFieldValue ?? "";
        C.value = d.userValue = a, d.formattedValue = null;
      });
      let m = (e) => {
        const {
          formattedValue: a
        } = d;
        a != null && (e.target.value = a), e.target.scrollLeft = 0;
      };
      if (this.enableScripting && this.hasJSActions) {
        C.addEventListener("focus", (a) => {
          if (d.focused)
            return;
          const {
            target: h
          } = a;
          if (o && (h.type = G, b && (h.step = b)), d.userValue) {
            const t = d.userValue;
            if (o)
              if (G === "time") {
                const W = new Date(t), B = [W.getHours(), W.getMinutes(), W.getSeconds()];
                h.value = B.map((w) => w.toString().padStart(2, "0")).join(":");
              } else
                h.value = new Date(t - Jd).toISOString().split(G === "date" ? "T" : ".", 1)[0];
            else
              h.value = t;
          }
          d.lastCommittedValue = h.value, d.commitKey = 1, this.data.actions?.Focus || (d.focused = !0);
        }), C.addEventListener("updatefromsandbox", (a) => {
          this.showElementAndHideCanvas(a.target);
          const h = {
            value(t) {
              d.userValue = t.detail.value ?? "", o || I.setValue(g, {
                value: d.userValue.toString()
              }), t.target.value = d.userValue;
            },
            formattedValue(t) {
              const {
                formattedValue: W
              } = t.detail;
              d.formattedValue = W, W != null && t.target !== document.activeElement && (t.target.value = W);
              const B = {
                formattedValue: W
              };
              o && (B.value = W), I.setValue(g, B);
            },
            selRange(t) {
              t.target.setSelectionRange(...t.detail.selRange);
            },
            charLimit: (t) => {
              const {
                charLimit: W
              } = t.detail, {
                target: B
              } = t;
              if (W === 0) {
                B.removeAttribute("maxLength");
                return;
              }
              B.setAttribute("maxLength", W);
              let w = d.userValue;
              !w || w.length <= W || (w = w.slice(0, W), B.value = d.userValue = w, I.setValue(g, {
                value: w
              }), this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                source: this,
                detail: {
                  id: g,
                  name: "Keystroke",
                  value: w,
                  willCommit: !0,
                  commitKey: 1,
                  selStart: B.selectionStart,
                  selEnd: B.selectionEnd
                }
              }));
            }
          };
          this._dispatchEventFromSandbox(h, a);
        }), C.addEventListener("keydown", (a) => {
          d.commitKey = 1;
          let h = -1;
          if (a.key === "Escape" ? h = 0 : a.key === "Enter" && !this.data.multiLine ? h = 2 : a.key === "Tab" && (d.commitKey = 3), h === -1)
            return;
          const {
            value: t
          } = a.target;
          d.lastCommittedValue !== t && (d.lastCommittedValue = t, d.userValue = t, this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
            source: this,
            detail: {
              id: g,
              name: "Keystroke",
              value: t,
              willCommit: !0,
              commitKey: h,
              selStart: a.target.selectionStart,
              selEnd: a.target.selectionEnd
            }
          }));
        });
        const e = m;
        m = null, C.addEventListener("blur", (a) => {
          if (!d.focused || !a.relatedTarget)
            return;
          this.data.actions?.Blur || (d.focused = !1);
          const {
            target: h
          } = a;
          let {
            value: t
          } = h;
          if (o) {
            if (t && G === "time") {
              const W = t.split(":").map((B) => parseInt(B, 10));
              t = new Date(2e3, 0, 1, W[0], W[1], W[2] || 0).valueOf(), h.step = "";
            } else
              t.includes("T") || (t = `${t}T00:00`), t = new Date(t).valueOf();
            h.type = "text";
          }
          d.userValue = t, d.lastCommittedValue !== t && this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
            source: this,
            detail: {
              id: g,
              name: "Keystroke",
              value: t,
              willCommit: !0,
              commitKey: d.commitKey,
              selStart: a.target.selectionStart,
              selEnd: a.target.selectionEnd
            }
          }), e(a);
        }), this.data.actions?.Keystroke && C.addEventListener("beforeinput", (a) => {
          d.lastCommittedValue = null;
          const {
            data: h,
            target: t
          } = a, {
            value: W,
            selectionStart: B,
            selectionEnd: w
          } = t;
          let n = B, V = w;
          switch (a.inputType) {
            case "deleteWordBackward": {
              const N = W.substring(0, B).match(/\w*[^\w]*$/);
              N && (n -= N[0].length);
              break;
            }
            case "deleteWordForward": {
              const N = W.substring(B).match(/^[^\w]*\w*/);
              N && (V += N[0].length);
              break;
            }
            case "deleteContentBackward":
              B === w && (n -= 1);
              break;
            case "deleteContentForward":
              B === w && (V += 1);
              break;
          }
          a.preventDefault(), this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
            source: this,
            detail: {
              id: g,
              name: "Keystroke",
              value: W,
              change: h || "",
              willCommit: !1,
              selStart: n,
              selEnd: V
            }
          });
        }), this._setEventListeners(C, d, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (a) => a.target.value);
      }
      if (m && C.addEventListener("blur", m), this.data.comb) {
        const a = (this.data.rect[2] - this.data.rect[0]) / l;
        C.classList.add("comb"), C.style.letterSpacing = `calc(${a}px * var(--total-scale-factor) - 1ch)`;
      }
    } else
      C = document.createElement("div"), C.textContent = this.data.fieldValue, C.style.verticalAlign = "middle", C.style.display = "table-cell", this.data.hasOwnCanvas && (C.hidden = !0);
    return this._setTextStyle(C), this._setBackgroundColor(C), this._setDefaultPropertiesFromJS(C), this.container.append(C), this.container;
  }
}
class Td extends mg {
  constructor(I) {
    super(I, {
      isRenderable: !!I.data.hasOwnCanvas
    });
  }
}
class jd extends mg {
  constructor(I) {
    super(I, {
      isRenderable: I.renderForms
    });
  }
  render() {
    const I = this.annotationStorage, g = this.data, C = g.id;
    let A = I.getValue(C, {
      value: g.exportValue === g.fieldValue
    }).value;
    typeof A == "string" && (A = A !== "Off", I.setValue(C, {
      value: A
    })), this.container.classList.add("buttonWidgetAnnotation", "checkBox");
    const i = document.createElement("input");
    return bg.add(i), i.setAttribute("data-element-id", C), i.disabled = g.readOnly, this._setRequired(i, this.data.required), i.type = "checkbox", i.name = g.fieldName, A && i.setAttribute("checked", !0), i.setAttribute("exportValue", g.exportValue), i.tabIndex = 0, i.addEventListener("change", (l) => {
      const {
        name: s,
        checked: d
      } = l.target;
      for (const c of this._getElementsByName(s, C)) {
        const G = d && c.exportValue === g.exportValue;
        c.domElement && (c.domElement.checked = G), I.setValue(c.id, {
          value: G
        });
      }
      I.setValue(C, {
        value: d
      });
    }), i.addEventListener("resetform", (l) => {
      const s = g.defaultFieldValue || "Off";
      l.target.checked = s === g.exportValue;
    }), this.enableScripting && this.hasJSActions && (i.addEventListener("updatefromsandbox", (l) => {
      const s = {
        value(d) {
          d.target.checked = d.detail.value !== "Off", I.setValue(C, {
            value: d.target.checked
          });
        }
      };
      this._dispatchEventFromSandbox(s, l);
    }), this._setEventListeners(i, null, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (l) => l.target.checked)), this._setBackgroundColor(i), this._setDefaultPropertiesFromJS(i), this.container.append(i), this.container;
  }
}
class Ml extends mg {
  constructor(I) {
    super(I, {
      isRenderable: I.renderForms
    });
  }
  render() {
    this.container.classList.add("buttonWidgetAnnotation", "radioButton");
    const I = this.annotationStorage, g = this.data, C = g.id;
    let A = I.getValue(C, {
      value: g.fieldValue === g.buttonValue
    }).value;
    if (typeof A == "string" && (A = A !== g.buttonValue, I.setValue(C, {
      value: A
    })), A)
      for (const l of this._getElementsByName(g.fieldName, C))
        I.setValue(l.id, {
          value: !1
        });
    const i = document.createElement("input");
    if (bg.add(i), i.setAttribute("data-element-id", C), i.disabled = g.readOnly, this._setRequired(i, this.data.required), i.type = "radio", i.name = g.fieldName, A && i.setAttribute("checked", !0), i.tabIndex = 0, i.addEventListener("change", (l) => {
      const {
        name: s,
        checked: d
      } = l.target;
      for (const c of this._getElementsByName(s, C))
        I.setValue(c.id, {
          value: !1
        });
      I.setValue(C, {
        value: d
      });
    }), i.addEventListener("resetform", (l) => {
      const s = g.defaultFieldValue;
      l.target.checked = s != null && s === g.buttonValue;
    }), this.enableScripting && this.hasJSActions) {
      const l = g.buttonValue;
      i.addEventListener("updatefromsandbox", (s) => {
        const d = {
          value: (c) => {
            const G = l === c.detail.value;
            for (const b of this._getElementsByName(c.target.name)) {
              const o = G && b.id === C;
              b.domElement && (b.domElement.checked = o), I.setValue(b.id, {
                value: o
              });
            }
          }
        };
        this._dispatchEventFromSandbox(d, s);
      }), this._setEventListeners(i, null, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (s) => s.target.checked);
    }
    return this._setBackgroundColor(i), this._setDefaultPropertiesFromJS(i), this.container.append(i), this.container;
  }
}
class Qd extends JA {
  constructor(I) {
    super(I, {
      ignoreBorder: I.data.hasAppearance
    });
  }
  render() {
    const I = super.render();
    I.classList.add("buttonWidgetAnnotation", "pushButton");
    const g = I.lastChild;
    return this.enableScripting && this.hasJSActions && g && (this._setDefaultPropertiesFromJS(g), g.addEventListener("updatefromsandbox", (C) => {
      this._dispatchEventFromSandbox({}, C);
    })), I;
  }
}
class xd extends mg {
  constructor(I) {
    super(I, {
      isRenderable: I.renderForms
    });
  }
  render() {
    this.container.classList.add("choiceWidgetAnnotation");
    const I = this.annotationStorage, g = this.data.id, C = I.getValue(g, {
      value: this.data.fieldValue
    }), A = document.createElement("select");
    bg.add(A), A.setAttribute("data-element-id", g), A.disabled = this.data.readOnly, this._setRequired(A, this.data.required), A.name = this.data.fieldName, A.tabIndex = 0;
    let i = this.data.combo && this.data.options.length > 0;
    this.data.combo || (A.size = this.data.options.length, this.data.multiSelect && (A.multiple = !0)), A.addEventListener("resetform", (G) => {
      const b = this.data.defaultFieldValue;
      for (const o of A.options)
        o.selected = o.value === b;
    });
    for (const G of this.data.options) {
      const b = document.createElement("option");
      b.textContent = G.displayValue, b.value = G.exportValue, C.value.includes(G.exportValue) && (b.setAttribute("selected", !0), i = !1), A.append(b);
    }
    let l = null;
    if (i) {
      const G = document.createElement("option");
      G.value = " ", G.setAttribute("hidden", !0), G.setAttribute("selected", !0), A.prepend(G), l = () => {
        G.remove(), A.removeEventListener("input", l), l = null;
      }, A.addEventListener("input", l);
    }
    const s = (G) => {
      const b = G ? "value" : "textContent", {
        options: o,
        multiple: m
      } = A;
      return m ? Array.prototype.filter.call(o, (e) => e.selected).map((e) => e[b]) : o.selectedIndex === -1 ? null : o[o.selectedIndex][b];
    };
    let d = s(!1);
    const c = (G) => {
      const b = G.target.options;
      return Array.prototype.map.call(b, (o) => ({
        displayValue: o.textContent,
        exportValue: o.value
      }));
    };
    return this.enableScripting && this.hasJSActions ? (A.addEventListener("updatefromsandbox", (G) => {
      const b = {
        value(o) {
          l?.();
          const m = o.detail.value, e = new Set(Array.isArray(m) ? m : [m]);
          for (const a of A.options)
            a.selected = e.has(a.value);
          I.setValue(g, {
            value: s(!0)
          }), d = s(!1);
        },
        multipleSelection(o) {
          A.multiple = !0;
        },
        remove(o) {
          const m = A.options, e = o.detail.remove;
          m[e].selected = !1, A.remove(e), m.length > 0 && Array.prototype.findIndex.call(m, (h) => h.selected) === -1 && (m[0].selected = !0), I.setValue(g, {
            value: s(!0),
            items: c(o)
          }), d = s(!1);
        },
        clear(o) {
          for (; A.length !== 0; )
            A.remove(0);
          I.setValue(g, {
            value: null,
            items: []
          }), d = s(!1);
        },
        insert(o) {
          const {
            index: m,
            displayValue: e,
            exportValue: a
          } = o.detail.insert, h = A.children[m], t = document.createElement("option");
          t.textContent = e, t.value = a, h ? h.before(t) : A.append(t), I.setValue(g, {
            value: s(!0),
            items: c(o)
          }), d = s(!1);
        },
        items(o) {
          const {
            items: m
          } = o.detail;
          for (; A.length !== 0; )
            A.remove(0);
          for (const e of m) {
            const {
              displayValue: a,
              exportValue: h
            } = e, t = document.createElement("option");
            t.textContent = a, t.value = h, A.append(t);
          }
          A.options.length > 0 && (A.options[0].selected = !0), I.setValue(g, {
            value: s(!0),
            items: c(o)
          }), d = s(!1);
        },
        indices(o) {
          const m = new Set(o.detail.indices);
          for (const e of o.target.options)
            e.selected = m.has(e.index);
          I.setValue(g, {
            value: s(!0)
          }), d = s(!1);
        },
        editable(o) {
          o.target.disabled = !o.detail.editable;
        }
      };
      this._dispatchEventFromSandbox(b, G);
    }), A.addEventListener("input", (G) => {
      const b = s(!0), o = s(!1);
      I.setValue(g, {
        value: b
      }), G.preventDefault(), this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: g,
          name: "Keystroke",
          value: d,
          change: o,
          changeEx: b,
          willCommit: !1,
          commitKey: 1,
          keyDown: !1
        }
      });
    }), this._setEventListeners(A, null, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"], ["input", "Action"], ["input", "Validate"]], (G) => G.target.value)) : A.addEventListener("input", function(G) {
      I.setValue(g, {
        value: s(!0)
      });
    }), this.data.combo && this._setTextStyle(A), this._setBackgroundColor(A), this._setDefaultPropertiesFromJS(A), this.container.append(A), this.container;
  }
}
class tA extends $ {
  constructor(I) {
    const {
      data: g,
      elements: C,
      parent: A
    } = I, i = !!A._commentManager;
    if (super(I, {
      isRenderable: !i && $._hasPopupData(g)
    }), this.elements = C, i && $._hasPopupData(g)) {
      const l = this.popup = this.#I();
      for (const s of C)
        s.popup = l;
    } else
      this.popup = null;
  }
  #I() {
    return new Od({
      container: this.container,
      color: this.data.color,
      titleObj: this.data.titleObj,
      modificationDate: this.data.modificationDate || this.data.creationDate,
      contentsObj: this.data.contentsObj,
      richText: this.data.richText,
      rect: this.data.rect,
      parentRect: this.data.parentRect || null,
      parent: this.parent,
      elements: this.elements,
      open: this.data.open,
      commentManager: this.parent._commentManager
    });
  }
  render() {
    const {
      container: I
    } = this;
    I.classList.add("popupAnnotation"), I.role = "comment";
    const g = this.popup = this.#I(), C = [];
    for (const A of this.elements)
      A.popup = g, A.container.ariaHasPopup = "dialog", C.push(A.data.id), A.addHighlightArea();
    return this.container.setAttribute("aria-controls", C.map((A) => `${yA}${A}`).join(",")), this.container;
  }
}
class Od {
  #I = null;
  #g = this.#x.bind(this);
  #A = this.#r.bind(this);
  #C = this.#D.bind(this);
  #i = this.#V.bind(this);
  #l = null;
  #s = null;
  #d = null;
  #c = null;
  #Z = null;
  #o = null;
  #b = null;
  #m = !1;
  #t = null;
  #a = null;
  #G = null;
  #e = null;
  #B = null;
  #W = null;
  #h = null;
  #N = null;
  #w = null;
  #n = null;
  #R = !1;
  #Y = null;
  #u = null;
  constructor({
    container: I,
    color: g,
    elements: C,
    titleObj: A,
    modificationDate: i,
    contentsObj: l,
    richText: s,
    parent: d,
    rect: c,
    parentRect: G,
    open: b,
    commentManager: o = null
  }) {
    this.#s = I, this.#w = A, this.#d = l, this.#N = s, this.#o = d, this.#l = g, this.#h = c, this.#b = G, this.#Z = C, this.#I = o, this.#Y = C[0], this.#c = sA.toDateObject(i), this.trigger = C.flatMap((m) => m.getElementsToTriggerPopup()), o ? this.renderCommentButton() : (this.#M(), this.#s.hidden = !0, b && this.#V());
  }
  #M() {
    if (this.#a)
      return;
    this.#a = new AbortController();
    const {
      signal: I
    } = this.#a;
    for (const g of this.trigger)
      g.addEventListener("click", this.#i, {
        signal: I
      }), g.addEventListener("pointerenter", this.#C, {
        signal: I
      }), g.addEventListener("pointerleave", this.#A, {
        signal: I
      }), g.classList.add("popupTriggerArea");
    for (const g of this.#Z)
      g.container?.addEventListener("keydown", this.#g, {
        signal: I
      });
  }
  #y() {
    const I = this.#Z.find((g) => g.hasCommentButton);
    I && (this.#B = I._normalizePoint(I.commentButtonPosition));
  }
  renderCommentButton() {
    if (this.#e || (this.#B || this.#y(), !this.#B))
      return;
    const {
      signal: I
    } = this.#a = new AbortController(), g = !!this.#Y.extraPopupElement, C = () => {
      this.#I.toggleCommentPopup(this, !0, void 0, !g);
    }, A = () => {
      this.#I.toggleCommentPopup(this, !1, !0, !g);
    }, i = () => {
      this.#I.toggleCommentPopup(this, !1, !1);
    };
    if (g) {
      this.#e = this.#Y.container;
      for (const l of this.trigger)
        l.ariaHasPopup = "dialog", l.ariaControls = "commentPopup", l.addEventListener("keydown", this.#g, {
          signal: I
        }), l.addEventListener("click", C, {
          signal: I
        }), l.addEventListener("pointerenter", A, {
          signal: I
        }), l.addEventListener("pointerleave", i, {
          signal: I
        }), l.classList.add("popupTriggerArea");
    } else {
      const l = this.#e = document.createElement("button");
      l.className = "annotationCommentButton";
      const s = this.#Y.container;
      l.style.zIndex = s.style.zIndex + 1, l.tabIndex = 0, l.ariaHasPopup = "dialog", l.ariaControls = "commentPopup", l.setAttribute("data-l10n-id", "pdfjs-show-comment-button"), this.#p(), this.#X(), l.addEventListener("keydown", this.#g, {
        signal: I
      }), l.addEventListener("click", C, {
        signal: I
      }), l.addEventListener("pointerenter", A, {
        signal: I
      }), l.addEventListener("pointerleave", i, {
        signal: I
      }), s.after(l);
    }
  }
  #X() {
    if (this.#Y.extraPopupElement && !this.#Y.editor)
      return;
    this.renderCommentButton();
    const [I, g] = this.#B, {
      style: C
    } = this.#e;
    C.left = `calc(${I}%)`, C.top = `calc(${g}% - var(--comment-button-dim))`;
  }
  #p() {
    this.#Y.extraPopupElement || (this.renderCommentButton(), this.#e.style.backgroundColor = this.commentButtonColor || "");
  }
  get commentButtonColor() {
    const {
      color: I,
      opacity: g
    } = this.#Y.commentData;
    return I ? this.#o._commentManager.makeCommentColor(I, g) : null;
  }
  focusCommentButton() {
    setTimeout(() => {
      this.#e?.focus();
    }, 0);
  }
  getData() {
    const {
      richText: I,
      color: g,
      opacity: C,
      creationDate: A,
      modificationDate: i
    } = this.#Y.commentData;
    return {
      contentsObj: {
        str: this.comment
      },
      richText: I,
      color: g,
      opacity: C,
      creationDate: A,
      modificationDate: i
    };
  }
  get elementBeforePopup() {
    return this.#e;
  }
  get comment() {
    return this.#u ||= this.#Y.commentText, this.#u;
  }
  set comment(I) {
    I !== this.comment && (this.#Y.commentText = this.#u = I);
  }
  get parentBoundingClientRect() {
    return this.#Y.layer.getBoundingClientRect();
  }
  setCommentButtonStates({
    selected: I,
    hasPopup: g
  }) {
    this.#e && (this.#e.classList.toggle("selected", I), this.#e.ariaExpanded = g);
  }
  setSelectedCommentButton(I) {
    this.#e.classList.toggle("selected", I);
  }
  get commentPopupPosition() {
    if (this.#W)
      return this.#W;
    const {
      x: I,
      y: g,
      height: C
    } = this.#e.getBoundingClientRect(), {
      x: A,
      y: i,
      width: l,
      height: s
    } = this.#Y.layer.getBoundingClientRect();
    return [(I - A) / l, (g + C - i) / s];
  }
  set commentPopupPosition(I) {
    this.#W = I;
  }
  hasDefaultPopupPosition() {
    return this.#W === null;
  }
  get commentButtonPosition() {
    return this.#B;
  }
  get commentButtonWidth() {
    return this.#e.getBoundingClientRect().width / this.parentBoundingClientRect.width;
  }
  editComment(I) {
    const [g, C] = this.#W || this.commentButtonPosition.map((c) => c / 100), A = this.parentBoundingClientRect, {
      x: i,
      y: l,
      width: s,
      height: d
    } = A;
    this.#I.showDialog(null, this, i + g * s, l + C * d, {
      ...I,
      parentDimensions: A
    });
  }
  render() {
    if (this.#t)
      return;
    const I = this.#t = document.createElement("div");
    if (I.className = "popup", this.#l) {
      const C = I.style.outlineColor = M.makeHexColor(...this.#l);
      I.style.backgroundColor = `color-mix(in srgb, ${C} 30%, white)`;
    }
    const g = document.createElement("span");
    if (g.className = "header", this.#w?.str) {
      const C = document.createElement("span");
      C.className = "title", g.append(C), {
        dir: C.dir,
        str: C.textContent
      } = this.#w;
    }
    if (I.append(g), this.#c) {
      const C = document.createElement("time");
      C.className = "popupDate", C.setAttribute("data-l10n-id", "pdfjs-annotation-date-time-string"), C.setAttribute("data-l10n-args", JSON.stringify({
        dateObj: this.#c.valueOf()
      })), C.dateTime = this.#c.toISOString(), g.append(C);
    }
    dl({
      html: this.#K || this.#d.str,
      dir: this.#d?.dir,
      className: "popupContent"
    }, I), this.#s.append(I);
  }
  get #K() {
    const I = this.#N, g = this.#d;
    return I?.str && (!g?.str || g.str === I.str) && this.#N.html || null;
  }
  get #S() {
    return this.#K?.attributes?.style?.fontSize || 0;
  }
  get #F() {
    return this.#K?.attributes?.style?.color || null;
  }
  #z(I) {
    const g = [], C = {
      str: I,
      html: {
        name: "div",
        attributes: {
          dir: "auto"
        },
        children: [{
          name: "p",
          children: g
        }]
      }
    }, A = {
      style: {
        color: this.#F,
        fontSize: this.#S ? `calc(${this.#S}px * var(--total-scale-factor))` : ""
      }
    };
    for (const i of I.split(`
`))
      g.push({
        name: "span",
        value: i,
        attributes: A
      });
    return C;
  }
  #x(I) {
    I.altKey || I.shiftKey || I.ctrlKey || I.metaKey || (I.key === "Enter" || I.key === "Escape" && this.#m) && this.#V();
  }
  updateEdited({
    rect: I,
    popup: g,
    deleted: C
  }) {
    if (this.#I) {
      C ? (this.remove(), this.#u = null) : g && (g.deleted ? this.remove() : (this.#p(), this.#u = g.text)), I && (this.#B = null, this.#y(), this.#X());
      return;
    }
    if (C || g?.deleted) {
      this.remove();
      return;
    }
    this.#M(), this.#n ||= {
      contentsObj: this.#d,
      richText: this.#N
    }, I && (this.#G = null), g && g.text && (this.#N = this.#z(g.text), this.#c = sA.toDateObject(g.date), this.#d = null), this.#t?.remove(), this.#t = null;
  }
  resetEdited() {
    this.#n && ({
      contentsObj: this.#d,
      richText: this.#N
    } = this.#n, this.#n = null, this.#t?.remove(), this.#t = null, this.#G = null);
  }
  remove() {
    if (this.#a?.abort(), this.#a = null, this.#t?.remove(), this.#t = null, this.#R = !1, this.#m = !1, this.#e?.remove(), this.#e = null, this.trigger)
      for (const I of this.trigger)
        I.classList.remove("popupTriggerArea");
  }
  #H() {
    if (this.#G !== null)
      return;
    const {
      page: {
        view: I
      },
      viewport: {
        rawDims: {
          pageWidth: g,
          pageHeight: C,
          pageX: A,
          pageY: i
        }
      }
    } = this.#o;
    let l = !!this.#b, s = l ? this.#b : this.#h;
    for (const e of this.#Z)
      if (!s || M.intersect(e.data.rect, s) !== null) {
        s = e.data.rect, l = !0;
        break;
      }
    const d = M.normalizeRect([s[0], I[3] - s[1] + I[1], s[2], I[3] - s[3] + I[1]]), G = l ? s[2] - s[0] + 5 : 0, b = d[0] + G, o = d[1];
    this.#G = [100 * (b - A) / g, 100 * (o - i) / C];
    const {
      style: m
    } = this.#s;
    m.left = `${this.#G[0]}%`, m.top = `${this.#G[1]}%`;
  }
  #V() {
    if (this.#I) {
      this.#I.toggleCommentPopup(this, !1);
      return;
    }
    this.#m = !this.#m, this.#m ? (this.#D(), this.#s.addEventListener("click", this.#i), this.#s.addEventListener("keydown", this.#g)) : (this.#r(), this.#s.removeEventListener("click", this.#i), this.#s.removeEventListener("keydown", this.#g));
  }
  #D() {
    this.#t || this.render(), this.isVisible ? this.#m && this.#s.classList.add("focused") : (this.#H(), this.#s.hidden = !1, this.#s.style.zIndex = parseInt(this.#s.style.zIndex) + 1e3);
  }
  #r() {
    this.#s.classList.remove("focused"), !(this.#m || !this.isVisible) && (this.#s.hidden = !0, this.#s.style.zIndex = parseInt(this.#s.style.zIndex) - 1e3);
  }
  forceHide() {
    this.#R = this.isVisible, this.#R && (this.#s.hidden = !0);
  }
  maybeShow() {
    this.#I || (this.#M(), this.#R && (this.#t || this.#D(), this.#R = !1, this.#s.hidden = !1));
  }
  get isVisible() {
    return this.#I ? !1 : this.#s.hidden === !1;
  }
}
class Dl extends $ {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    }), this.textContent = I.data.textContent, this.textPosition = I.data.textPosition, this.annotationEditorType = k.FREETEXT;
  }
  render() {
    if (this.container.classList.add("freeTextAnnotation"), this.textContent) {
      const I = document.createElement("div");
      I.classList.add("annotationTextContent"), I.setAttribute("role", "comment");
      for (const g of this.textContent) {
        const C = document.createElement("span");
        C.textContent = g, I.append(C);
      }
      this.container.append(I);
    }
    return !this.data.popupRef && this.hasPopupData && this._createPopup(), this._editOnDoubleClick(), this.container;
  }
}
class Ud extends $ {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    });
  }
  render() {
    this.container.classList.add("lineAnnotation");
    const {
      data: I,
      width: g,
      height: C
    } = this, A = this.svgFactory.create(g, C, !0), i = this.#I = this.svgFactory.createElement("svg:line");
    return i.setAttribute("x1", I.rect[2] - I.lineCoordinates[0]), i.setAttribute("y1", I.rect[3] - I.lineCoordinates[1]), i.setAttribute("x2", I.rect[2] - I.lineCoordinates[2]), i.setAttribute("y2", I.rect[3] - I.lineCoordinates[3]), i.setAttribute("stroke-width", I.borderStyle.width || 1), i.setAttribute("stroke", "transparent"), i.setAttribute("fill", "transparent"), A.append(i), this.container.append(A), !I.popupRef && this.hasPopupData && this._createPopup(), this.container;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
}
class vd extends $ {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    });
  }
  render() {
    this.container.classList.add("squareAnnotation");
    const {
      data: I,
      width: g,
      height: C
    } = this, A = this.svgFactory.create(g, C, !0), i = I.borderStyle.width, l = this.#I = this.svgFactory.createElement("svg:rect");
    return l.setAttribute("x", i / 2), l.setAttribute("y", i / 2), l.setAttribute("width", g - i), l.setAttribute("height", C - i), l.setAttribute("stroke-width", i || 1), l.setAttribute("stroke", "transparent"), l.setAttribute("fill", "transparent"), A.append(l), this.container.append(A), !I.popupRef && this.hasPopupData && this._createPopup(), this.container;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
}
class Ed extends $ {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    });
  }
  render() {
    this.container.classList.add("circleAnnotation");
    const {
      data: I,
      width: g,
      height: C
    } = this, A = this.svgFactory.create(g, C, !0), i = I.borderStyle.width, l = this.#I = this.svgFactory.createElement("svg:ellipse");
    return l.setAttribute("cx", g / 2), l.setAttribute("cy", C / 2), l.setAttribute("rx", g / 2 - i / 2), l.setAttribute("ry", C / 2 - i / 2), l.setAttribute("stroke-width", i || 1), l.setAttribute("stroke", "transparent"), l.setAttribute("fill", "transparent"), A.append(l), this.container.append(A), !I.popupRef && this.hasPopupData && this._createPopup(), this.container;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
}
class Kl extends $ {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    }), this.containerClassName = "polylineAnnotation", this.svgElementName = "svg:polyline";
  }
  render() {
    this.container.classList.add(this.containerClassName);
    const {
      data: {
        rect: I,
        vertices: g,
        borderStyle: C,
        popupRef: A
      },
      width: i,
      height: l
    } = this;
    if (!g)
      return this.container;
    const s = this.svgFactory.create(i, l, !0);
    let d = [];
    for (let G = 0, b = g.length; G < b; G += 2) {
      const o = g[G] - I[0], m = I[3] - g[G + 1];
      d.push(`${o},${m}`);
    }
    d = d.join(" ");
    const c = this.#I = this.svgFactory.createElement(this.svgElementName);
    return c.setAttribute("points", d), c.setAttribute("stroke-width", C.width || 1), c.setAttribute("stroke", "transparent"), c.setAttribute("fill", "transparent"), s.append(c), this.container.append(s), !A && this.hasPopupData && this._createPopup(), this.container;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
}
class Pd extends Kl {
  constructor(I) {
    super(I), this.containerClassName = "polygonAnnotation", this.svgElementName = "svg:polygon";
  }
}
class fd extends $ {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    });
  }
  render() {
    return this.container.classList.add("caretAnnotation"), !this.data.popupRef && this.hasPopupData && this._createPopup(), this.container;
  }
}
class LA extends $ {
  #I = null;
  #g = [];
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    }), this.containerClassName = "inkAnnotation", this.svgElementName = "svg:polyline", this.annotationEditorType = this.data.it === "InkHighlight" ? k.HIGHLIGHT : k.INK;
  }
  #A(I, g) {
    switch (I) {
      case 90:
        return {
          transform: `rotate(90) translate(${-g[0]},${g[1]}) scale(1,-1)`,
          width: g[3] - g[1],
          height: g[2] - g[0]
        };
      case 180:
        return {
          transform: `rotate(180) translate(${-g[2]},${g[1]}) scale(1,-1)`,
          width: g[2] - g[0],
          height: g[3] - g[1]
        };
      case 270:
        return {
          transform: `rotate(270) translate(${-g[2]},${g[3]}) scale(1,-1)`,
          width: g[3] - g[1],
          height: g[2] - g[0]
        };
      default:
        return {
          transform: `translate(${-g[0]},${g[3]}) scale(1,-1)`,
          width: g[2] - g[0],
          height: g[3] - g[1]
        };
    }
  }
  render() {
    this.container.classList.add(this.containerClassName);
    const {
      data: {
        rect: I,
        rotation: g,
        inkLists: C,
        borderStyle: A,
        popupRef: i
      }
    } = this, {
      transform: l,
      width: s,
      height: d
    } = this.#A(g, I), c = this.svgFactory.create(s, d, !0), G = this.#I = this.svgFactory.createElement("svg:g");
    c.append(G), G.setAttribute("stroke-width", A.width || 1), G.setAttribute("stroke-linecap", "round"), G.setAttribute("stroke-linejoin", "round"), G.setAttribute("stroke-miterlimit", 10), G.setAttribute("stroke", "transparent"), G.setAttribute("fill", "transparent"), G.setAttribute("transform", l);
    for (let b = 0, o = C.length; b < o; b++) {
      const m = this.svgFactory.createElement(this.svgElementName);
      this.#g.push(m), m.setAttribute("points", C[b].join(",")), G.append(m);
    }
    return !i && this.hasPopupData && this._createPopup(), this.container.append(c), this._editOnDoubleClick(), this.container;
  }
  updateEdited(I) {
    super.updateEdited(I);
    const {
      thickness: g,
      points: C,
      rect: A
    } = I, i = this.#I;
    if (g >= 0 && i.setAttribute("stroke-width", g || 1), C)
      for (let l = 0, s = this.#g.length; l < s; l++)
        this.#g[l].setAttribute("points", C[l].join(","));
    if (A) {
      const {
        transform: l,
        width: s,
        height: d
      } = this.#A(this.data.rotation, A);
      i.parentElement.setAttribute("viewBox", `0 0 ${s} ${d}`), i.setAttribute("transform", l);
    }
  }
  getElementsToTriggerPopup() {
    return this.#g;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
}
class Sl extends $ {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0,
      createQuadrilaterals: !0
    }), this.annotationEditorType = k.HIGHLIGHT;
  }
  render() {
    const {
      data: {
        overlaidText: I,
        popupRef: g
      }
    } = this;
    if (!g && this.hasPopupData && this._createPopup(), this.container.classList.add("highlightAnnotation"), this._editOnDoubleClick(), I) {
      const C = document.createElement("mark");
      C.classList.add("overlaidText"), C.textContent = I, this.container.append(C);
    }
    return this.container;
  }
}
class _d extends $ {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0,
      createQuadrilaterals: !0
    });
  }
  render() {
    const {
      data: {
        overlaidText: I,
        popupRef: g
      }
    } = this;
    if (!g && this.hasPopupData && this._createPopup(), this.container.classList.add("underlineAnnotation"), I) {
      const C = document.createElement("u");
      C.classList.add("overlaidText"), C.textContent = I, this.container.append(C);
    }
    return this.container;
  }
}
class qd extends $ {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0,
      createQuadrilaterals: !0
    });
  }
  render() {
    const {
      data: {
        overlaidText: I,
        popupRef: g
      }
    } = this;
    if (!g && this.hasPopupData && this._createPopup(), this.container.classList.add("squigglyAnnotation"), I) {
      const C = document.createElement("u");
      C.classList.add("overlaidText"), C.textContent = I, this.container.append(C);
    }
    return this.container;
  }
}
class $d extends $ {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0,
      createQuadrilaterals: !0
    });
  }
  render() {
    const {
      data: {
        overlaidText: I,
        popupRef: g
      }
    } = this;
    if (!g && this.hasPopupData && this._createPopup(), this.container.classList.add("strikeoutAnnotation"), I) {
      const C = document.createElement("s");
      C.classList.add("overlaidText"), C.textContent = I, this.container.append(C);
    }
    return this.container;
  }
}
class pl extends $ {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    }), this.annotationEditorType = k.STAMP;
  }
  render() {
    return this.container.classList.add("stampAnnotation"), this.container.setAttribute("role", "img"), !this.data.popupRef && this.hasPopupData && this._createPopup(), this._editOnDoubleClick(), this.container;
  }
}
class IZ extends $ {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0
    });
    const {
      file: g
    } = this.data;
    this.filename = g.filename, this.content = g.content, this.linkService.eventBus?.dispatch("fileattachmentannotation", {
      source: this,
      ...g
    });
  }
  render() {
    this.container.classList.add("fileAttachmentAnnotation");
    const {
      container: I,
      data: g
    } = this;
    let C;
    g.hasAppearance || g.fillAlpha === 0 ? C = document.createElement("div") : (C = document.createElement("img"), C.src = `${this.imageResourcesPath}annotation-${/paperclip/i.test(g.name) ? "paperclip" : "pushpin"}.svg`, g.fillAlpha && g.fillAlpha < 1 && (C.style = `filter: opacity(${Math.round(g.fillAlpha * 100)}%);`)), C.addEventListener("dblclick", this.#g.bind(this)), this.#I = C;
    const {
      isMac: A
    } = GI.platform;
    return I.addEventListener("keydown", (i) => {
      i.key === "Enter" && (A ? i.metaKey : i.ctrlKey) && this.#g();
    }), !g.popupRef && this.hasPopupData ? this._createPopup() : C.classList.add("popupTriggerArea"), I.append(C), I;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
  #g() {
    this.downloadManager?.openOrDownloadData(this.content, this.filename);
  }
}
let Fl = class zl {
  #I = null;
  #g = null;
  #A = null;
  #C = /* @__PURE__ */ new Map();
  #i = null;
  #l = null;
  constructor({
    div: I,
    accessibilityManager: g,
    annotationCanvasMap: C,
    annotationEditorUIManager: A,
    page: i,
    viewport: l,
    structTreeLayer: s,
    commentManager: d,
    linkService: c,
    annotationStorage: G
  }) {
    this.div = I, this.#I = g, this.#g = C, this.#i = s || null, this.#l = c || null, this.#A = G || new KA(), this.page = i, this.viewport = l, this.zIndex = 0, this._annotationEditorUIManager = A, this._commentManager = d || null;
  }
  hasEditableAnnotations() {
    return this.#C.size > 0;
  }
  async #s(I, g, C) {
    const A = I.firstChild || I, i = A.id = `${yA}${g}`, l = await this.#i?.getAriaAttributes(i);
    if (l)
      for (const [s, d] of l)
        A.setAttribute(s, d);
    C ? C.at(-1).container.after(I) : (this.div.append(I), this.#I?.moveElementInDOM(this.div, I, A, !1));
  }
  async render(I) {
    const {
      annotations: g
    } = I, C = this.div;
    cg(C, this.viewport);
    const A = /* @__PURE__ */ new Map(), i = {
      data: null,
      layer: C,
      linkService: this.#l,
      downloadManager: I.downloadManager,
      imageResourcesPath: I.imageResourcesPath || "",
      renderForms: I.renderForms !== !1,
      svgFactory: new XC(),
      annotationStorage: this.#A,
      enableComment: I.enableComment === !0,
      enableScripting: I.enableScripting === !0,
      hasJSActions: I.hasJSActions,
      fieldObjects: I.fieldObjects,
      parent: this,
      elements: null
    };
    for (const l of g) {
      if (l.noHTML)
        continue;
      const s = l.annotationType === iI.POPUP;
      if (s) {
        const G = A.get(l.id);
        if (!G)
          continue;
        i.elements = G;
      } else if (l.rect[2] === l.rect[0] || l.rect[3] === l.rect[1])
        continue;
      i.data = l;
      const d = wi.create(i);
      if (!d.isRenderable)
        continue;
      if (!s && l.popupRef) {
        const G = A.get(l.popupRef);
        G ? G.push(d) : A.set(l.popupRef, [d]);
      }
      const c = d.render();
      l.hidden && (c.style.visibility = "hidden"), await this.#s(c, l.id, i.elements), d.extraPopupElement?.popup?.renderCommentButton(), d._isEditable && (this.#C.set(d.data.id, d), this._annotationEditorUIManager?.renderAnnotationElement(d));
    }
    this.#d();
  }
  async addLinkAnnotations(I) {
    const g = {
      data: null,
      layer: this.div,
      linkService: this.#l,
      svgFactory: new XC(),
      parent: this
    };
    for (const C of I) {
      C.borderStyle ||= zl._defaultBorderStyle, g.data = C;
      const A = wi.create(g);
      if (!A.isRenderable)
        continue;
      const i = A.render();
      await this.#s(i, C.id, null);
    }
  }
  update({
    viewport: I
  }) {
    const g = this.div;
    this.viewport = I, cg(g, {
      rotation: I.rotation
    }), this.#d(), g.hidden = !1;
  }
  #d() {
    if (!this.#g)
      return;
    const I = this.div;
    for (const [g, C] of this.#g) {
      const A = I.querySelector(`[data-annotation-id="${g}"]`);
      if (!A)
        continue;
      C.className = "annotationContent";
      const {
        firstChild: i
      } = A;
      i ? i.nodeName === "CANVAS" ? i.replaceWith(C) : i.classList.contains("annotationContent") ? i.after(C) : i.before(C) : A.append(C);
      const l = this.#C.get(g);
      l && (l._hasNoCanvas ? (this._annotationEditorUIManager?.setMissingCanvas(g, A.id, C), l._hasNoCanvas = !1) : l.canvas = C);
    }
    this.#g.clear();
  }
  getEditableAnnotations() {
    return Array.from(this.#C.values());
  }
  getEditableAnnotation(I) {
    return this.#C.get(I);
  }
  addFakeAnnotation(I) {
    const {
      div: g
    } = this, {
      id: C,
      rotation: A
    } = I, i = new Ld({
      data: {
        id: C,
        rect: I.getPDFRect(),
        rotation: A
      },
      editor: I,
      layer: g,
      parent: this,
      enableComment: !!this._commentManager,
      linkService: this.#l,
      annotationStorage: this.#A
    }), l = i.render();
    return g.append(l), this.#I?.moveElementInDOM(g, l, l, !1), i.createOrUpdatePopup(), i;
  }
  static get _defaultBorderStyle() {
    return T(this, "_defaultBorderStyle", Object.freeze({
      width: 1,
      rawWidth: 1,
      style: tg.SOLID,
      dashArray: [3],
      horizontalCornerRadius: 0,
      verticalCornerRadius: 0
    }));
  }
};
const mC = /\r\n?|\n/g;
class dI extends F {
  #I = "";
  #g = `${this.id}-editor`;
  #A = null;
  #C;
  _colorPicker = null;
  static _freeTextDefaultContent = "";
  static _internalPadding = 0;
  static _defaultColor = null;
  static _defaultFontSize = 10;
  static get _keyboardManager() {
    const I = dI.prototype, g = (i) => i.isEmpty(), C = Eg.TRANSLATE_SMALL, A = Eg.TRANSLATE_BIG;
    return T(this, "_keyboardManager", new CC([[["ctrl+s", "mac+meta+s", "ctrl+p", "mac+meta+p"], I.commitOrRemove, {
      bubbles: !0
    }], [["ctrl+Enter", "mac+meta+Enter", "Escape", "mac+Escape"], I.commitOrRemove], [["ArrowLeft", "mac+ArrowLeft"], I._translateEmpty, {
      args: [-C, 0],
      checker: g
    }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], I._translateEmpty, {
      args: [-A, 0],
      checker: g
    }], [["ArrowRight", "mac+ArrowRight"], I._translateEmpty, {
      args: [C, 0],
      checker: g
    }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], I._translateEmpty, {
      args: [A, 0],
      checker: g
    }], [["ArrowUp", "mac+ArrowUp"], I._translateEmpty, {
      args: [0, -C],
      checker: g
    }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], I._translateEmpty, {
      args: [0, -A],
      checker: g
    }], [["ArrowDown", "mac+ArrowDown"], I._translateEmpty, {
      args: [0, C],
      checker: g
    }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], I._translateEmpty, {
      args: [0, A],
      checker: g
    }]]));
  }
  static _type = "freetext";
  static _editorType = k.FREETEXT;
  constructor(I) {
    super({
      ...I,
      name: "freeTextEditor"
    }), this.color = I.color || dI._defaultColor || F._defaultLineColor, this.#C = I.fontSize || dI._defaultFontSize, this.annotationElementId || this._uiManager.a11yAlert("pdfjs-editor-freetext-added-alert");
  }
  static initialize(I, g) {
    F.initialize(I, g);
    const C = getComputedStyle(document.documentElement);
    this._internalPadding = parseFloat(C.getPropertyValue("--freetext-padding"));
  }
  static updateDefaultParams(I, g) {
    switch (I) {
      case j.FREETEXT_SIZE:
        dI._defaultFontSize = g;
        break;
      case j.FREETEXT_COLOR:
        dI._defaultColor = g;
        break;
    }
  }
  updateParams(I, g) {
    switch (I) {
      case j.FREETEXT_SIZE:
        this.#i(g);
        break;
      case j.FREETEXT_COLOR:
        this.#l(g);
        break;
    }
  }
  static get defaultPropertiesToUpdate() {
    return [[j.FREETEXT_SIZE, dI._defaultFontSize], [j.FREETEXT_COLOR, dI._defaultColor || F._defaultLineColor]];
  }
  get propertiesToUpdate() {
    return [[j.FREETEXT_SIZE, this.#C], [j.FREETEXT_COLOR, this.color]];
  }
  get toolbarButtons() {
    return this._colorPicker ||= new Pg(this), [["colorPicker", this._colorPicker]];
  }
  get colorType() {
    return j.FREETEXT_COLOR;
  }
  #i(I) {
    const g = (A) => {
      this.editorDiv.style.fontSize = `calc(${A}px * var(--total-scale-factor))`, this.translate(0, -(A - this.#C) * this.parentScale), this.#C = A, this.#d();
    }, C = this.#C;
    this.addCommands({
      cmd: g.bind(this, I),
      undo: g.bind(this, C),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: j.FREETEXT_SIZE,
      overwriteIfSameType: !0,
      keepUndo: !0
    });
  }
  onUpdatedColor() {
    this.editorDiv.style.color = this.color, this._colorPicker?.update(this.color), super.onUpdatedColor();
  }
  #l(I) {
    const g = (A) => {
      this.color = A, this.onUpdatedColor();
    }, C = this.color;
    this.addCommands({
      cmd: g.bind(this, I),
      undo: g.bind(this, C),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: j.FREETEXT_COLOR,
      overwriteIfSameType: !0,
      keepUndo: !0
    });
  }
  _translateEmpty(I, g) {
    this._uiManager.translateSelectedEditors(I, g, !0);
  }
  getInitialTranslation() {
    const I = this.parentScale;
    return [-dI._internalPadding * I, -(dI._internalPadding + this.#C) * I];
  }
  rebuild() {
    this.parent && (super.rebuild(), this.div !== null && (this.isAttachedToDOM || this.parent.add(this)));
  }
  enableEditMode() {
    if (!super.enableEditMode())
      return !1;
    this.overlayDiv.classList.remove("enabled"), this.editorDiv.contentEditable = !0, this._isDraggable = !1, this.div.removeAttribute("aria-activedescendant"), this.#A = new AbortController();
    const I = this._uiManager.combinedSignal(this.#A);
    return this.editorDiv.addEventListener("keydown", this.editorDivKeydown.bind(this), {
      signal: I
    }), this.editorDiv.addEventListener("focus", this.editorDivFocus.bind(this), {
      signal: I
    }), this.editorDiv.addEventListener("blur", this.editorDivBlur.bind(this), {
      signal: I
    }), this.editorDiv.addEventListener("input", this.editorDivInput.bind(this), {
      signal: I
    }), this.editorDiv.addEventListener("paste", this.editorDivPaste.bind(this), {
      signal: I
    }), !0;
  }
  disableEditMode() {
    return super.disableEditMode() ? (this.overlayDiv.classList.add("enabled"), this.editorDiv.contentEditable = !1, this.div.setAttribute("aria-activedescendant", this.#g), this._isDraggable = !0, this.#A?.abort(), this.#A = null, this.div.focus({
      preventScroll: !0
    }), this.isEditing = !1, this.parent.div.classList.add("freetextEditing"), !0) : !1;
  }
  focusin(I) {
    this._focusEventsAllowed && (super.focusin(I), I.target !== this.editorDiv && this.editorDiv.focus());
  }
  onceAdded(I) {
    this.width || (this.enableEditMode(), I && this.editorDiv.focus(), this._initialOptions?.isCentered && this.center(), this._initialOptions = null);
  }
  isEmpty() {
    return !this.editorDiv || this.editorDiv.innerText.trim() === "";
  }
  remove() {
    this.isEditing = !1, this.parent && (this.parent.setEditingState(!0), this.parent.div.classList.add("freetextEditing")), super.remove();
  }
  #s() {
    const I = [];
    this.editorDiv.normalize();
    let g = null;
    for (const C of this.editorDiv.childNodes)
      g?.nodeType === Node.TEXT_NODE && C.nodeName === "BR" || (I.push(dI.#c(C)), g = C);
    return I.join(`
`);
  }
  #d() {
    const [I, g] = this.parentDimensions;
    let C;
    if (this.isAttachedToDOM)
      C = this.div.getBoundingClientRect();
    else {
      const {
        currentLayer: A,
        div: i
      } = this, l = i.style.display, s = i.classList.contains("hidden");
      i.classList.remove("hidden"), i.style.display = "hidden", A.div.append(this.div), C = i.getBoundingClientRect(), i.remove(), i.style.display = l, i.classList.toggle("hidden", s);
    }
    this.rotation % 180 === this.parentRotation % 180 ? (this.width = C.width / I, this.height = C.height / g) : (this.width = C.height / I, this.height = C.width / g), this.fixAndSetPosition();
  }
  commit() {
    if (!this.isInEditMode())
      return;
    super.commit(), this.disableEditMode();
    const I = this.#I, g = this.#I = this.#s().trimEnd();
    if (I === g)
      return;
    const C = (A) => {
      if (this.#I = A, !A) {
        this.remove();
        return;
      }
      this.#Z(), this._uiManager.rebuild(this), this.#d();
    };
    this.addCommands({
      cmd: () => {
        C(g);
      },
      undo: () => {
        C(I);
      },
      mustExec: !1
    }), this.#d();
  }
  shouldGetKeyboardEvents() {
    return this.isInEditMode();
  }
  enterInEditMode() {
    this.enableEditMode(), this.editorDiv.focus();
  }
  keydown(I) {
    I.target === this.div && I.key === "Enter" && (this.enterInEditMode(), I.preventDefault());
  }
  editorDivKeydown(I) {
    dI._keyboardManager.exec(this, I);
  }
  editorDivFocus(I) {
    this.isEditing = !0;
  }
  editorDivBlur(I) {
    this.isEditing = !1;
  }
  editorDivInput(I) {
    this.parent.div.classList.toggle("freetextEditing", this.isEmpty());
  }
  disableEditing() {
    this.editorDiv.setAttribute("role", "comment"), this.editorDiv.removeAttribute("aria-multiline");
  }
  enableEditing() {
    this.editorDiv.setAttribute("role", "textbox"), this.editorDiv.setAttribute("aria-multiline", !0);
  }
  get canChangeContent() {
    return !0;
  }
  render() {
    if (this.div)
      return this.div;
    let I, g;
    (this._isCopy || this.annotationElementId) && (I = this.x, g = this.y), super.render(), this.editorDiv = document.createElement("div"), this.editorDiv.className = "internal", this.editorDiv.setAttribute("id", this.#g), this.editorDiv.setAttribute("data-l10n-id", "pdfjs-free-text2"), this.editorDiv.setAttribute("data-l10n-attrs", "default-content"), this.enableEditing(), this.editorDiv.contentEditable = !0;
    const {
      style: C
    } = this.editorDiv;
    if (C.fontSize = `calc(${this.#C}px * var(--total-scale-factor))`, C.color = this.color, this.div.append(this.editorDiv), this.overlayDiv = document.createElement("div"), this.overlayDiv.classList.add("overlay", "enabled"), this.div.append(this.overlayDiv), this._isCopy || this.annotationElementId) {
      const [A, i] = this.parentDimensions;
      if (this.annotationElementId) {
        const {
          position: l
        } = this._initialData;
        let [s, d] = this.getInitialTranslation();
        [s, d] = this.pageTranslationToScreen(s, d);
        const [c, G] = this.pageDimensions, [b, o] = this.pageTranslation;
        let m, e;
        switch (this.rotation) {
          case 0:
            m = I + (l[0] - b) / c, e = g + this.height - (l[1] - o) / G;
            break;
          case 90:
            m = I + (l[0] - b) / c, e = g - (l[1] - o) / G, [s, d] = [d, -s];
            break;
          case 180:
            m = I - this.width + (l[0] - b) / c, e = g - (l[1] - o) / G, [s, d] = [-s, -d];
            break;
          case 270:
            m = I + (l[0] - b - this.height * G) / c, e = g + (l[1] - o - this.width * c) / G, [s, d] = [-d, s];
            break;
        }
        this.setAt(m * A, e * i, s, d);
      } else
        this._moveAfterPaste(I, g);
      this.#Z(), this._isDraggable = !0, this.editorDiv.contentEditable = !1;
    } else
      this._isDraggable = !1, this.editorDiv.contentEditable = !0;
    return this.div;
  }
  static #c(I) {
    return (I.nodeType === Node.TEXT_NODE ? I.nodeValue : I.innerText).replaceAll(mC, "");
  }
  editorDivPaste(I) {
    const g = I.clipboardData || window.clipboardData, {
      types: C
    } = g;
    if (C.length === 1 && C[0] === "text/plain")
      return;
    I.preventDefault();
    const A = dI.#b(g.getData("text") || "").replaceAll(mC, `
`);
    if (!A)
      return;
    const i = window.getSelection();
    if (!i.rangeCount)
      return;
    this.editorDiv.normalize(), i.deleteFromDocument();
    const l = i.getRangeAt(0);
    if (!A.includes(`
`)) {
      l.insertNode(document.createTextNode(A)), this.editorDiv.normalize(), i.collapseToStart();
      return;
    }
    const {
      startContainer: s,
      startOffset: d
    } = l, c = [], G = [];
    if (s.nodeType === Node.TEXT_NODE) {
      const m = s.parentElement;
      if (G.push(s.nodeValue.slice(d).replaceAll(mC, "")), m !== this.editorDiv) {
        let e = c;
        for (const a of this.editorDiv.childNodes) {
          if (a === m) {
            e = G;
            continue;
          }
          e.push(dI.#c(a));
        }
      }
      c.push(s.nodeValue.slice(0, d).replaceAll(mC, ""));
    } else if (s === this.editorDiv) {
      let m = c, e = 0;
      for (const a of this.editorDiv.childNodes)
        e++ === d && (m = G), m.push(dI.#c(a));
    }
    this.#I = `${c.join(`
`)}${A}${G.join(`
`)}`, this.#Z();
    const b = new Range();
    let o = Math.sumPrecise(c.map((m) => m.length));
    for (const {
      firstChild: m
    } of this.editorDiv.childNodes)
      if (m.nodeType === Node.TEXT_NODE) {
        const e = m.nodeValue.length;
        if (o <= e) {
          b.setStart(m, o), b.setEnd(m, o);
          break;
        }
        o -= e;
      }
    i.removeAllRanges(), i.addRange(b);
  }
  #Z() {
    if (this.editorDiv.replaceChildren(), !!this.#I)
      for (const I of this.#I.split(`
`)) {
        const g = document.createElement("div");
        g.append(I ? document.createTextNode(I) : document.createElement("br")), this.editorDiv.append(g);
      }
  }
  #o() {
    return this.#I.replaceAll(" ", " ");
  }
  static #b(I) {
    return I.replaceAll(" ", " ");
  }
  get contentDiv() {
    return this.editorDiv;
  }
  getPDFRect() {
    const I = dI._internalPadding * this.parentScale;
    return this.getRect(I, I);
  }
  static async deserialize(I, g, C) {
    let A = null;
    if (I instanceof Dl) {
      const {
        data: {
          defaultAppearanceData: {
            fontSize: l,
            fontColor: s
          },
          rect: d,
          rotation: c,
          id: G,
          popupRef: b,
          richText: o,
          contentsObj: m,
          creationDate: e,
          modificationDate: a
        },
        textContent: h,
        textPosition: t,
        parent: {
          page: {
            pageNumber: W
          }
        }
      } = I;
      if (!h || h.length === 0)
        return null;
      A = I = {
        annotationType: k.FREETEXT,
        color: Array.from(s),
        fontSize: l,
        value: h.join(`
`),
        position: t,
        pageIndex: W - 1,
        rect: d.slice(0),
        rotation: c,
        annotationElementId: G,
        id: G,
        deleted: !1,
        popupRef: b,
        comment: m?.str || null,
        richText: o,
        creationDate: e,
        modificationDate: a
      };
    }
    const i = await super.deserialize(I, g, C);
    return i.#C = I.fontSize, i.color = M.makeHexColor(...I.color), i.#I = dI.#b(I.value), i._initialData = A, I.comment && i.setCommentData(I), i;
  }
  serialize(I = !1) {
    if (this.isEmpty())
      return null;
    if (this.deleted)
      return this.serializeDeleted();
    const g = F._colorManager.convert(this.isAttachedToDOM ? getComputedStyle(this.editorDiv).color : this.color), C = Object.assign(super.serialize(I), {
      color: g,
      fontSize: this.#C,
      value: this.#o()
    });
    return this.addComment(C), I ? (C.isCopy = !0, C) : this.annotationElementId && !this.#m(C) ? null : (C.id = this.annotationElementId, C);
  }
  #m(I) {
    const {
      value: g,
      fontSize: C,
      color: A,
      pageIndex: i
    } = this._initialData;
    return this.hasEditedComment || this._hasBeenMoved || I.value !== g || I.fontSize !== C || I.color.some((l, s) => l !== A[s]) || I.pageIndex !== i;
  }
  renderAnnotationElement(I) {
    const g = super.renderAnnotationElement(I);
    if (!g)
      return null;
    const {
      style: C
    } = g;
    C.fontSize = `calc(${this.#C}px * var(--total-scale-factor))`, C.color = this.color, g.replaceChildren();
    for (const A of this.#I.split(`
`)) {
      const i = document.createElement("div");
      i.append(A ? document.createTextNode(A) : document.createElement("br")), g.append(i);
    }
    return I.updateEdited({
      rect: this.getPDFRect(),
      popup: this._uiManager.hasCommentManager() || this.hasEditedComment ? this.comment : {
        text: this.#I
      }
    }), g;
  }
  resetAnnotationElement(I) {
    super.resetAnnotationElement(I), I.resetEdited();
  }
}
class H {
  static PRECISION = 1e-4;
  toSVGPath() {
    f("Abstract method `toSVGPath` must be implemented.");
  }
  get box() {
    f("Abstract getter `box` must be implemented.");
  }
  serialize(I, g) {
    f("Abstract method `serialize` must be implemented.");
  }
  static _rescale(I, g, C, A, i, l) {
    l ||= new Float32Array(I.length);
    for (let s = 0, d = I.length; s < d; s += 2)
      l[s] = g + I[s] * A, l[s + 1] = C + I[s + 1] * i;
    return l;
  }
  static _rescaleAndSwap(I, g, C, A, i, l) {
    l ||= new Float32Array(I.length);
    for (let s = 0, d = I.length; s < d; s += 2)
      l[s] = g + I[s + 1] * A, l[s + 1] = C + I[s] * i;
    return l;
  }
  static _translate(I, g, C, A) {
    A ||= new Float32Array(I.length);
    for (let i = 0, l = I.length; i < l; i += 2)
      A[i] = g + I[i], A[i + 1] = C + I[i + 1];
    return A;
  }
  static svgRound(I) {
    return Math.round(I * 1e4);
  }
  static _normalizePoint(I, g, C, A, i) {
    switch (i) {
      case 90:
        return [1 - g / C, I / A];
      case 180:
        return [1 - I / C, 1 - g / A];
      case 270:
        return [g / C, 1 - I / A];
      default:
        return [I / C, g / A];
    }
  }
  static _normalizePagePoint(I, g, C) {
    switch (C) {
      case 90:
        return [1 - g, I];
      case 180:
        return [1 - I, 1 - g];
      case 270:
        return [g, 1 - I];
      default:
        return [I, g];
    }
  }
  static createBezierPoints(I, g, C, A, i, l) {
    return [(I + 5 * C) / 6, (g + 5 * A) / 6, (5 * C + i) / 6, (5 * A + l) / 6, (C + i) / 2, (A + l) / 2];
  }
}
class lg {
  #I;
  #g = [];
  #A;
  #C;
  #i = [];
  #l = new Float32Array(18);
  #s;
  #d;
  #c;
  #Z;
  #o;
  #b;
  #m = [];
  static #t = 8;
  static #a = 2;
  static #G = lg.#t + lg.#a;
  constructor({
    x: I,
    y: g
  }, C, A, i, l, s = 0) {
    this.#I = C, this.#b = i * A, this.#C = l, this.#l.set([NaN, NaN, NaN, NaN, I, g], 6), this.#A = s, this.#Z = lg.#t * A, this.#c = lg.#G * A, this.#o = A, this.#m.push(I, g);
  }
  isEmpty() {
    return isNaN(this.#l[8]);
  }
  #e() {
    const I = this.#l.subarray(4, 6), g = this.#l.subarray(16, 18), [C, A, i, l] = this.#I;
    return [(this.#s + (I[0] - g[0]) / 2 - C) / i, (this.#d + (I[1] - g[1]) / 2 - A) / l, (this.#s + (g[0] - I[0]) / 2 - C) / i, (this.#d + (g[1] - I[1]) / 2 - A) / l];
  }
  add({
    x: I,
    y: g
  }) {
    this.#s = I, this.#d = g;
    const [C, A, i, l] = this.#I;
    let [s, d, c, G] = this.#l.subarray(8, 12);
    const b = I - c, o = g - G, m = Math.hypot(b, o);
    if (m < this.#c)
      return !1;
    const e = m - this.#Z, a = e / m, h = a * b, t = a * o;
    let W = s, B = d;
    s = c, d = G, c += h, G += t, this.#m?.push(I, g);
    const w = -t / e, n = h / e, V = w * this.#b, N = n * this.#b;
    return this.#l.set(this.#l.subarray(2, 8), 0), this.#l.set([c + V, G + N], 4), this.#l.set(this.#l.subarray(14, 18), 12), this.#l.set([c - V, G - N], 16), isNaN(this.#l[6]) ? (this.#i.length === 0 && (this.#l.set([s + V, d + N], 2), this.#i.push(NaN, NaN, NaN, NaN, (s + V - C) / i, (d + N - A) / l), this.#l.set([s - V, d - N], 14), this.#g.push(NaN, NaN, NaN, NaN, (s - V - C) / i, (d - N - A) / l)), this.#l.set([W, B, s, d, c, G], 6), !this.isEmpty()) : (this.#l.set([W, B, s, d, c, G], 6), Math.abs(Math.atan2(B - d, W - s) - Math.atan2(t, h)) < Math.PI / 2 ? ([s, d, c, G] = this.#l.subarray(2, 6), this.#i.push(NaN, NaN, NaN, NaN, ((s + c) / 2 - C) / i, ((d + G) / 2 - A) / l), [s, d, W, B] = this.#l.subarray(14, 18), this.#g.push(NaN, NaN, NaN, NaN, ((W + s) / 2 - C) / i, ((B + d) / 2 - A) / l), !0) : ([W, B, s, d, c, G] = this.#l.subarray(0, 6), this.#i.push(((W + 5 * s) / 6 - C) / i, ((B + 5 * d) / 6 - A) / l, ((5 * s + c) / 6 - C) / i, ((5 * d + G) / 6 - A) / l, ((s + c) / 2 - C) / i, ((d + G) / 2 - A) / l), [c, G, s, d, W, B] = this.#l.subarray(12, 18), this.#g.push(((W + 5 * s) / 6 - C) / i, ((B + 5 * d) / 6 - A) / l, ((5 * s + c) / 6 - C) / i, ((5 * d + G) / 6 - A) / l, ((s + c) / 2 - C) / i, ((d + G) / 2 - A) / l), !0));
  }
  toSVGPath() {
    if (this.isEmpty())
      return "";
    const I = this.#i, g = this.#g;
    if (isNaN(this.#l[6]) && !this.isEmpty())
      return this.#B();
    const C = [];
    C.push(`M${I[4]} ${I[5]}`);
    for (let A = 6; A < I.length; A += 6)
      isNaN(I[A]) ? C.push(`L${I[A + 4]} ${I[A + 5]}`) : C.push(`C${I[A]} ${I[A + 1]} ${I[A + 2]} ${I[A + 3]} ${I[A + 4]} ${I[A + 5]}`);
    this.#h(C);
    for (let A = g.length - 6; A >= 6; A -= 6)
      isNaN(g[A]) ? C.push(`L${g[A + 4]} ${g[A + 5]}`) : C.push(`C${g[A]} ${g[A + 1]} ${g[A + 2]} ${g[A + 3]} ${g[A + 4]} ${g[A + 5]}`);
    return this.#W(C), C.join(" ");
  }
  #B() {
    const [I, g, C, A] = this.#I, [i, l, s, d] = this.#e();
    return `M${(this.#l[2] - I) / C} ${(this.#l[3] - g) / A} L${(this.#l[4] - I) / C} ${(this.#l[5] - g) / A} L${i} ${l} L${s} ${d} L${(this.#l[16] - I) / C} ${(this.#l[17] - g) / A} L${(this.#l[14] - I) / C} ${(this.#l[15] - g) / A} Z`;
  }
  #W(I) {
    const g = this.#g;
    I.push(`L${g[4]} ${g[5]} Z`);
  }
  #h(I) {
    const [g, C, A, i] = this.#I, l = this.#l.subarray(4, 6), s = this.#l.subarray(16, 18), [d, c, G, b] = this.#e();
    I.push(`L${(l[0] - g) / A} ${(l[1] - C) / i} L${d} ${c} L${G} ${b} L${(s[0] - g) / A} ${(s[1] - C) / i}`);
  }
  newFreeDrawOutline(I, g, C, A, i, l) {
    return new Jl(I, g, C, A, i, l);
  }
  getOutlines() {
    const I = this.#i, g = this.#g, C = this.#l, [A, i, l, s] = this.#I, d = new Float32Array((this.#m?.length ?? 0) + 2);
    for (let b = 0, o = d.length - 2; b < o; b += 2)
      d[b] = (this.#m[b] - A) / l, d[b + 1] = (this.#m[b + 1] - i) / s;
    if (d[d.length - 2] = (this.#s - A) / l, d[d.length - 1] = (this.#d - i) / s, isNaN(C[6]) && !this.isEmpty())
      return this.#N(d);
    const c = new Float32Array(this.#i.length + 24 + this.#g.length);
    let G = I.length;
    for (let b = 0; b < G; b += 2) {
      if (isNaN(I[b])) {
        c[b] = c[b + 1] = NaN;
        continue;
      }
      c[b] = I[b], c[b + 1] = I[b + 1];
    }
    G = this.#n(c, G);
    for (let b = g.length - 6; b >= 6; b -= 6)
      for (let o = 0; o < 6; o += 2) {
        if (isNaN(g[b + o])) {
          c[G] = c[G + 1] = NaN, G += 2;
          continue;
        }
        c[G] = g[b + o], c[G + 1] = g[b + o + 1], G += 2;
      }
    return this.#w(c, G), this.newFreeDrawOutline(c, d, this.#I, this.#o, this.#A, this.#C);
  }
  #N(I) {
    const g = this.#l, [C, A, i, l] = this.#I, [s, d, c, G] = this.#e(), b = new Float32Array(36);
    return b.set([NaN, NaN, NaN, NaN, (g[2] - C) / i, (g[3] - A) / l, NaN, NaN, NaN, NaN, (g[4] - C) / i, (g[5] - A) / l, NaN, NaN, NaN, NaN, s, d, NaN, NaN, NaN, NaN, c, G, NaN, NaN, NaN, NaN, (g[16] - C) / i, (g[17] - A) / l, NaN, NaN, NaN, NaN, (g[14] - C) / i, (g[15] - A) / l], 0), this.newFreeDrawOutline(b, I, this.#I, this.#o, this.#A, this.#C);
  }
  #w(I, g) {
    const C = this.#g;
    return I.set([NaN, NaN, NaN, NaN, C[4], C[5]], g), g += 6;
  }
  #n(I, g) {
    const C = this.#l.subarray(4, 6), A = this.#l.subarray(16, 18), [i, l, s, d] = this.#I, [c, G, b, o] = this.#e();
    return I.set([NaN, NaN, NaN, NaN, (C[0] - i) / s, (C[1] - l) / d, NaN, NaN, NaN, NaN, c, G, NaN, NaN, NaN, NaN, b, o, NaN, NaN, NaN, NaN, (A[0] - i) / s, (A[1] - l) / d], g), g += 24;
  }
}
class Jl extends H {
  #I;
  #g = new Float32Array(4);
  #A;
  #C;
  #i;
  #l;
  #s;
  constructor(I, g, C, A, i, l) {
    super(), this.#s = I, this.#i = g, this.#I = C, this.#l = A, this.#A = i, this.#C = l, this.firstPoint = [NaN, NaN], this.lastPoint = [NaN, NaN], this.#d(l);
    const [s, d, c, G] = this.#g;
    for (let b = 0, o = I.length; b < o; b += 2)
      I[b] = (I[b] - s) / c, I[b + 1] = (I[b + 1] - d) / G;
    for (let b = 0, o = g.length; b < o; b += 2)
      g[b] = (g[b] - s) / c, g[b + 1] = (g[b + 1] - d) / G;
  }
  toSVGPath() {
    const I = [`M${this.#s[4]} ${this.#s[5]}`];
    for (let g = 6, C = this.#s.length; g < C; g += 6) {
      if (isNaN(this.#s[g])) {
        I.push(`L${this.#s[g + 4]} ${this.#s[g + 5]}`);
        continue;
      }
      I.push(`C${this.#s[g]} ${this.#s[g + 1]} ${this.#s[g + 2]} ${this.#s[g + 3]} ${this.#s[g + 4]} ${this.#s[g + 5]}`);
    }
    return I.push("Z"), I.join(" ");
  }
  serialize([I, g, C, A], i) {
    const l = C - I, s = A - g;
    let d, c;
    switch (i) {
      case 0:
        d = H._rescale(this.#s, I, A, l, -s), c = H._rescale(this.#i, I, A, l, -s);
        break;
      case 90:
        d = H._rescaleAndSwap(this.#s, I, g, l, s), c = H._rescaleAndSwap(this.#i, I, g, l, s);
        break;
      case 180:
        d = H._rescale(this.#s, C, g, -l, s), c = H._rescale(this.#i, C, g, -l, s);
        break;
      case 270:
        d = H._rescaleAndSwap(this.#s, C, A, -l, -s), c = H._rescaleAndSwap(this.#i, C, A, -l, -s);
        break;
    }
    return {
      outline: Array.from(d),
      points: [Array.from(c)]
    };
  }
  #d(I) {
    const g = this.#s;
    let C = g[4], A = g[5];
    const i = [C, A, C, A];
    let l = C, s = A, d = C, c = A;
    const G = I ? Math.max : Math.min, b = new Float32Array(4);
    for (let m = 6, e = g.length; m < e; m += 6) {
      const a = g[m + 4], h = g[m + 5];
      isNaN(g[m]) ? (M.pointBoundingBox(a, h, i), s > h ? (l = a, s = h) : s === h && (l = G(l, a)), c < h ? (d = a, c = h) : c === h && (d = G(d, a))) : (b[0] = b[1] = 1 / 0, b[2] = b[3] = -1 / 0, M.bezierBoundingBox(C, A, ...g.slice(m, m + 6), b), M.rectBoundingBox(b[0], b[1], b[2], b[3], i), s > b[1] ? (l = b[0], s = b[1]) : s === b[1] && (l = G(l, b[0])), c < b[3] ? (d = b[2], c = b[3]) : c === b[3] && (d = G(d, b[2]))), C = a, A = h;
    }
    const o = this.#g;
    o[0] = i[0] - this.#A, o[1] = i[1] - this.#A, o[2] = i[2] - i[0] + 2 * this.#A, o[3] = i[3] - i[1] + 2 * this.#A, this.firstPoint = [l, s], this.lastPoint = [d, c];
  }
  get box() {
    return this.#g;
  }
  newOutliner(I, g, C, A, i, l = 0) {
    return new lg(I, g, C, A, i, l);
  }
  getNewOutline(I, g) {
    const [C, A, i, l] = this.#g, [s, d, c, G] = this.#I, b = i * c, o = l * G, m = C * c + s, e = A * G + d, a = this.newOutliner({
      x: this.#i[0] * b + m,
      y: this.#i[1] * o + e
    }, this.#I, this.#l, I, this.#C, g ?? this.#A);
    for (let h = 2; h < this.#i.length; h += 2)
      a.add({
        x: this.#i[h] * b + m,
        y: this.#i[h + 1] * o + e
      });
    return a.getOutlines();
  }
}
class hA {
  #I;
  #g;
  #A;
  #C = [];
  #i = [];
  constructor(I, g = 0, C = 0, A = !0) {
    const i = [1 / 0, 1 / 0, -1 / 0, -1 / 0], l = 10 ** -4;
    for (const {
      x: a,
      y: h,
      width: t,
      height: W
    } of I) {
      const B = Math.floor((a - g) / l) * l, w = Math.ceil((a + t + g) / l) * l, n = Math.floor((h - g) / l) * l, V = Math.ceil((h + W + g) / l) * l, N = [B, n, V, !0], R = [w, n, V, !1];
      this.#C.push(N, R), M.rectBoundingBox(B, n, w, V, i);
    }
    const s = i[2] - i[0] + 2 * C, d = i[3] - i[1] + 2 * C, c = i[0] - C, G = i[1] - C;
    let b = A ? -1 / 0 : 1 / 0, o = 1 / 0;
    const m = this.#C.at(A ? -1 : -2), e = [m[0], m[2]];
    for (const a of this.#C) {
      const [h, t, W, B] = a;
      !B && A ? t < o ? (o = t, b = h) : t === o && (b = Math.max(b, h)) : B && !A && (t < o ? (o = t, b = h) : t === o && (b = Math.min(b, h))), a[0] = (h - c) / s, a[1] = (t - G) / d, a[2] = (W - G) / d;
    }
    this.#I = new Float32Array([c, G, s, d]), this.#g = [b, o], this.#A = e;
  }
  getOutlines() {
    this.#C.sort((g, C) => g[0] - C[0] || g[1] - C[1] || g[2] - C[2]);
    const I = [];
    for (const g of this.#C)
      g[3] ? (I.push(...this.#Z(g)), this.#d(g)) : (this.#c(g), I.push(...this.#Z(g)));
    return this.#l(I);
  }
  #l(I) {
    const g = [], C = /* @__PURE__ */ new Set();
    for (const l of I) {
      const [s, d, c] = l;
      g.push([s, d, l], [s, c, l]);
    }
    g.sort((l, s) => l[1] - s[1] || l[0] - s[0]);
    for (let l = 0, s = g.length; l < s; l += 2) {
      const d = g[l][2], c = g[l + 1][2];
      d.push(c), c.push(d), C.add(d), C.add(c);
    }
    const A = [];
    let i;
    for (; C.size > 0; ) {
      const l = C.values().next().value;
      let [s, d, c, G, b] = l;
      C.delete(l);
      let o = s, m = d;
      for (i = [s, c], A.push(i); ; ) {
        let e;
        if (C.has(G))
          e = G;
        else if (C.has(b))
          e = b;
        else
          break;
        C.delete(e), [s, d, c, G, b] = e, o !== s && (i.push(o, m, s, m === d ? d : c), o = s), m = m === d ? c : d;
      }
      i.push(o, m);
    }
    return new gZ(A, this.#I, this.#g, this.#A);
  }
  #s(I) {
    const g = this.#i;
    let C = 0, A = g.length - 1;
    for (; C <= A; ) {
      const i = C + A >> 1, l = g[i][0];
      if (l === I)
        return i;
      l < I ? C = i + 1 : A = i - 1;
    }
    return A + 1;
  }
  #d([, I, g]) {
    const C = this.#s(I);
    this.#i.splice(C, 0, [I, g]);
  }
  #c([, I, g]) {
    const C = this.#s(I);
    for (let A = C; A < this.#i.length; A++) {
      const [i, l] = this.#i[A];
      if (i !== I)
        break;
      if (i === I && l === g) {
        this.#i.splice(A, 1);
        return;
      }
    }
    for (let A = C - 1; A >= 0; A--) {
      const [i, l] = this.#i[A];
      if (i !== I)
        break;
      if (i === I && l === g) {
        this.#i.splice(A, 1);
        return;
      }
    }
  }
  #Z(I) {
    const [g, C, A] = I, i = [[g, C, A]], l = this.#s(A);
    for (let s = 0; s < l; s++) {
      const [d, c] = this.#i[s];
      for (let G = 0, b = i.length; G < b; G++) {
        const [, o, m] = i[G];
        if (!(c <= o || m <= d)) {
          if (o >= d) {
            if (m > c)
              i[G][1] = c;
            else {
              if (b === 1)
                return [];
              i.splice(G, 1), G--, b--;
            }
            continue;
          }
          i[G][2] = d, m > c && i.push([g, c, m]);
        }
      }
    }
    return i;
  }
}
class gZ extends H {
  #I;
  #g;
  constructor(I, g, C, A) {
    super(), this.#g = I, this.#I = g, this.firstPoint = C, this.lastPoint = A;
  }
  toSVGPath() {
    const I = [];
    for (const g of this.#g) {
      let [C, A] = g;
      I.push(`M${C} ${A}`);
      for (let i = 2; i < g.length; i += 2) {
        const l = g[i], s = g[i + 1];
        l === C ? (I.push(`V${s}`), A = s) : s === A && (I.push(`H${l}`), C = l);
      }
      I.push("Z");
    }
    return I.join(" ");
  }
  serialize([I, g, C, A], i) {
    const l = [], s = C - I, d = A - g;
    for (const c of this.#g) {
      const G = new Array(c.length);
      for (let b = 0; b < c.length; b += 2)
        G[b] = I + c[b] * s, G[b + 1] = A - c[b + 1] * d;
      l.push(G);
    }
    return l;
  }
  get box() {
    return this.#I;
  }
  get classNamesForOutlining() {
    return ["highlightOutline"];
  }
}
class BA extends lg {
  newFreeDrawOutline(I, g, C, A, i, l) {
    return new CZ(I, g, C, A, i, l);
  }
}
class CZ extends Jl {
  newOutliner(I, g, C, A, i, l = 0) {
    return new BA(I, g, C, A, i, l);
  }
}
class gI extends F {
  #I = null;
  #g = 0;
  #A;
  #C = null;
  #i = null;
  #l = null;
  #s = null;
  #d = 0;
  #c = null;
  #Z = null;
  #o = null;
  #b = !1;
  #m = null;
  #t = null;
  #a = null;
  #G = "";
  #e;
  #B = "";
  static _defaultColor = null;
  static _defaultOpacity = 1;
  static _defaultThickness = 12;
  static _type = "highlight";
  static _editorType = k.HIGHLIGHT;
  static _freeHighlightId = -1;
  static _freeHighlight = null;
  static _freeHighlightClipId = "";
  static get _keyboardManager() {
    const I = gI.prototype;
    return T(this, "_keyboardManager", new CC([[["ArrowLeft", "mac+ArrowLeft"], I._moveCaret, {
      args: [0]
    }], [["ArrowRight", "mac+ArrowRight"], I._moveCaret, {
      args: [1]
    }], [["ArrowUp", "mac+ArrowUp"], I._moveCaret, {
      args: [2]
    }], [["ArrowDown", "mac+ArrowDown"], I._moveCaret, {
      args: [3]
    }]]));
  }
  constructor(I) {
    super({
      ...I,
      name: "highlightEditor"
    }), this.color = I.color || gI._defaultColor, this.#e = I.thickness || gI._defaultThickness, this.opacity = I.opacity || gI._defaultOpacity, this.#A = I.boxes || null, this.#B = I.methodOfCreation || "", this.#G = I.text || "", this._isDraggable = !1, this.defaultL10nId = "pdfjs-editor-highlight-editor", I.highlightId > -1 ? (this.#b = !0, this.#h(I), this.#Y()) : this.#A && (this.#I = I.anchorNode, this.#g = I.anchorOffset, this.#s = I.focusNode, this.#d = I.focusOffset, this.#W(), this.#Y(), this.rotate(this.rotation)), this.annotationElementId || this._uiManager.a11yAlert("pdfjs-editor-highlight-added-alert");
  }
  get telemetryInitialData() {
    return {
      action: "added",
      type: this.#b ? "free_highlight" : "highlight",
      color: this._uiManager.getNonHCMColorName(this.color),
      thickness: this.#e,
      methodOfCreation: this.#B
    };
  }
  get telemetryFinalData() {
    return {
      type: "highlight",
      color: this._uiManager.getNonHCMColorName(this.color)
    };
  }
  static computeTelemetryFinalData(I) {
    return {
      numberOfColors: I.get("color").size
    };
  }
  #W() {
    const I = new hA(this.#A, 1e-3);
    this.#Z = I.getOutlines(), [this.x, this.y, this.width, this.height] = this.#Z.box;
    const g = new hA(this.#A, 25e-4, 1e-3, this._uiManager.direction === "ltr");
    this.#l = g.getOutlines();
    const {
      firstPoint: C
    } = this.#Z;
    this.#m = [(C[0] - this.x) / this.width, (C[1] - this.y) / this.height];
    const {
      lastPoint: A
    } = this.#l;
    this.#t = [(A[0] - this.x) / this.width, (A[1] - this.y) / this.height];
  }
  #h({
    highlightOutlines: I,
    highlightId: g,
    clipPathId: C
  }) {
    this.#Z = I;
    const A = 1.5;
    if (this.#l = I.getNewOutline(this.#e / 2 + A, 25e-4), g >= 0)
      this.#o = g, this.#C = C, this.parent.drawLayer.finalizeDraw(g, {
        bbox: I.box,
        path: {
          d: I.toSVGPath()
        }
      }), this.#a = this.parent.drawLayer.drawOutline({
        rootClass: {
          highlightOutline: !0,
          free: !0
        },
        bbox: this.#l.box,
        path: {
          d: this.#l.toSVGPath()
        }
      }, !0);
    else if (this.parent) {
      const b = this.parent.viewport.rotation;
      this.parent.drawLayer.updateProperties(this.#o, {
        bbox: gI.#u(this.#Z.box, (b - this.rotation + 360) % 360),
        path: {
          d: I.toSVGPath()
        }
      }), this.parent.drawLayer.updateProperties(this.#a, {
        bbox: gI.#u(this.#l.box, b),
        path: {
          d: this.#l.toSVGPath()
        }
      });
    }
    const [i, l, s, d] = I.box;
    switch (this.rotation) {
      case 0:
        this.x = i, this.y = l, this.width = s, this.height = d;
        break;
      case 90: {
        const [b, o] = this.parentDimensions;
        this.x = l, this.y = 1 - i, this.width = s * o / b, this.height = d * b / o;
        break;
      }
      case 180:
        this.x = 1 - i, this.y = 1 - l, this.width = s, this.height = d;
        break;
      case 270: {
        const [b, o] = this.parentDimensions;
        this.x = 1 - l, this.y = i, this.width = s * o / b, this.height = d * b / o;
        break;
      }
    }
    const {
      firstPoint: c
    } = I;
    this.#m = [(c[0] - i) / s, (c[1] - l) / d];
    const {
      lastPoint: G
    } = this.#l;
    this.#t = [(G[0] - i) / s, (G[1] - l) / d];
  }
  static initialize(I, g) {
    F.initialize(I, g), gI._defaultColor ||= g.highlightColors?.values().next().value || "#fff066";
  }
  static updateDefaultParams(I, g) {
    switch (I) {
      case j.HIGHLIGHT_COLOR:
        gI._defaultColor = g;
        break;
      case j.HIGHLIGHT_THICKNESS:
        gI._defaultThickness = g;
        break;
    }
  }
  translateInPage(I, g) {
  }
  get toolbarPosition() {
    return this.#t;
  }
  get commentButtonPosition() {
    return this.#m;
  }
  updateParams(I, g) {
    switch (I) {
      case j.HIGHLIGHT_COLOR:
        this.#N(g);
        break;
      case j.HIGHLIGHT_THICKNESS:
        this.#w(g);
        break;
    }
  }
  static get defaultPropertiesToUpdate() {
    return [[j.HIGHLIGHT_COLOR, gI._defaultColor], [j.HIGHLIGHT_THICKNESS, gI._defaultThickness]];
  }
  get propertiesToUpdate() {
    return [[j.HIGHLIGHT_COLOR, this.color || gI._defaultColor], [j.HIGHLIGHT_THICKNESS, this.#e || gI._defaultThickness], [j.HIGHLIGHT_FREE, this.#b]];
  }
  onUpdatedColor() {
    this.parent?.drawLayer.updateProperties(this.#o, {
      root: {
        fill: this.color,
        "fill-opacity": this.opacity
      }
    }), this.#i?.updateColor(this.color), super.onUpdatedColor();
  }
  #N(I) {
    const g = (i, l) => {
      this.color = i, this.opacity = l, this.onUpdatedColor();
    }, C = this.color, A = this.opacity;
    this.addCommands({
      cmd: g.bind(this, I, gI._defaultOpacity),
      undo: g.bind(this, C, A),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: j.HIGHLIGHT_COLOR,
      overwriteIfSameType: !0,
      keepUndo: !0
    }), this._reportTelemetry({
      action: "color_changed",
      color: this._uiManager.getNonHCMColorName(I)
    }, !0);
  }
  #w(I) {
    const g = this.#e, C = (A) => {
      this.#e = A, this.#n(A);
    };
    this.addCommands({
      cmd: C.bind(this, I),
      undo: C.bind(this, g),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: j.INK_THICKNESS,
      overwriteIfSameType: !0,
      keepUndo: !0
    }), this._reportTelemetry({
      action: "thickness_changed",
      thickness: I
    }, !0);
  }
  get toolbarButtons() {
    return this._uiManager.highlightColors ? [["colorPicker", this.#i = new Hl({
      editor: this
    })]] : super.toolbarButtons;
  }
  disableEditing() {
    super.disableEditing(), this.div.classList.toggle("disabled", !0);
  }
  enableEditing() {
    super.enableEditing(), this.div.classList.toggle("disabled", !1);
  }
  fixAndSetPosition() {
    return super.fixAndSetPosition(this.#X());
  }
  getBaseTranslation() {
    return [0, 0];
  }
  getRect(I, g) {
    return super.getRect(I, g, this.#X());
  }
  onceAdded(I) {
    this.annotationElementId || this.parent.addUndoableEditor(this), I && this.div.focus();
  }
  remove() {
    this.#R(), this._reportTelemetry({
      action: "deleted"
    }), super.remove();
  }
  rebuild() {
    this.parent && (super.rebuild(), this.div !== null && (this.#Y(), this.isAttachedToDOM || this.parent.add(this)));
  }
  setParent(I) {
    let g = !1;
    this.parent && !I ? this.#R() : I && (this.#Y(I), g = !this.parent && this.div?.classList.contains("selectedEditor")), super.setParent(I), this.show(this._isVisible), g && this.select();
  }
  #n(I) {
    this.#b && (this.#h({
      highlightOutlines: this.#Z.getNewOutline(I / 2)
    }), this.fixAndSetPosition(), this.setDims(this.width, this.height));
  }
  #R() {
    this.#o === null || !this.parent || (this.parent.drawLayer.remove(this.#o), this.#o = null, this.parent.drawLayer.remove(this.#a), this.#a = null);
  }
  #Y(I = this.parent) {
    this.#o === null && ({
      id: this.#o,
      clipPathId: this.#C
    } = I.drawLayer.draw({
      bbox: this.#Z.box,
      root: {
        viewBox: "0 0 1 1",
        fill: this.color,
        "fill-opacity": this.opacity
      },
      rootClass: {
        highlight: !0,
        free: this.#b
      },
      path: {
        d: this.#Z.toSVGPath()
      }
    }, !1, !0), this.#a = I.drawLayer.drawOutline({
      rootClass: {
        highlightOutline: !0,
        free: this.#b
      },
      bbox: this.#l.box,
      path: {
        d: this.#l.toSVGPath()
      }
    }, this.#b), this.#c && (this.#c.style.clipPath = this.#C));
  }
  static #u([I, g, C, A], i) {
    switch (i) {
      case 90:
        return [1 - g - A, I, A, C];
      case 180:
        return [1 - I - C, 1 - g - A, C, A];
      case 270:
        return [g, 1 - I - C, A, C];
    }
    return [I, g, C, A];
  }
  rotate(I) {
    const {
      drawLayer: g
    } = this.parent;
    let C;
    this.#b ? (I = (I - this.rotation + 360) % 360, C = gI.#u(this.#Z.box, I)) : C = gI.#u([this.x, this.y, this.width, this.height], I), g.updateProperties(this.#o, {
      bbox: C,
      root: {
        "data-main-rotation": I
      }
    }), g.updateProperties(this.#a, {
      bbox: gI.#u(this.#l.box, I),
      root: {
        "data-main-rotation": I
      }
    });
  }
  render() {
    if (this.div)
      return this.div;
    const I = super.render();
    this.#G && (I.setAttribute("aria-label", this.#G), I.setAttribute("role", "mark")), this.#b ? I.classList.add("free") : this.div.addEventListener("keydown", this.#M.bind(this), {
      signal: this._uiManager._signal
    });
    const g = this.#c = document.createElement("div");
    return I.append(g), g.setAttribute("aria-hidden", "true"), g.className = "internal", g.style.clipPath = this.#C, this.setDims(this.width, this.height), Zl(this, this.#c, ["pointerover", "pointerleave"]), this.enableEditing(), I;
  }
  pointerover() {
    this.isSelected || this.parent?.drawLayer.updateProperties(this.#a, {
      rootClass: {
        hovered: !0
      }
    });
  }
  pointerleave() {
    this.isSelected || this.parent?.drawLayer.updateProperties(this.#a, {
      rootClass: {
        hovered: !1
      }
    });
  }
  #M(I) {
    gI._keyboardManager.exec(this, I);
  }
  _moveCaret(I) {
    switch (this.parent.unselect(this), I) {
      case 0:
      case 2:
        this.#y(!0);
        break;
      case 1:
      case 3:
        this.#y(!1);
        break;
    }
  }
  #y(I) {
    if (!this.#I)
      return;
    const g = window.getSelection();
    I ? g.setPosition(this.#I, this.#g) : g.setPosition(this.#s, this.#d);
  }
  select() {
    super.select(), this.#a && this.parent?.drawLayer.updateProperties(this.#a, {
      rootClass: {
        hovered: !1,
        selected: !0
      }
    });
  }
  unselect() {
    super.unselect(), this.#a && (this.parent?.drawLayer.updateProperties(this.#a, {
      rootClass: {
        selected: !1
      }
    }), this.#b || this.#y(!1));
  }
  get _mustFixPosition() {
    return !this.#b;
  }
  show(I = this._isVisible) {
    super.show(I), this.parent && (this.parent.drawLayer.updateProperties(this.#o, {
      rootClass: {
        hidden: !I
      }
    }), this.parent.drawLayer.updateProperties(this.#a, {
      rootClass: {
        hidden: !I
      }
    }));
  }
  #X() {
    return this.#b ? this.rotation : 0;
  }
  #p() {
    if (this.#b)
      return null;
    const [I, g] = this.pageDimensions, [C, A] = this.pageTranslation, i = this.#A, l = new Float32Array(i.length * 8);
    let s = 0;
    for (const {
      x: d,
      y: c,
      width: G,
      height: b
    } of i) {
      const o = d * I + C, m = (1 - c) * g + A;
      l[s] = l[s + 4] = o, l[s + 1] = l[s + 3] = m, l[s + 2] = l[s + 6] = o + G * I, l[s + 5] = l[s + 7] = m - b * g, s += 8;
    }
    return l;
  }
  #K(I) {
    return this.#Z.serialize(I, this.#X());
  }
  static startHighlighting(I, g, {
    target: C,
    x: A,
    y: i
  }) {
    const {
      x: l,
      y: s,
      width: d,
      height: c
    } = C.getBoundingClientRect(), G = new AbortController(), b = I.combinedSignal(G), o = (m) => {
      G.abort(), this.#F(I, m);
    };
    window.addEventListener("blur", o, {
      signal: b
    }), window.addEventListener("pointerup", o, {
      signal: b
    }), window.addEventListener("pointerdown", II, {
      capture: !0,
      passive: !1,
      signal: b
    }), window.addEventListener("contextmenu", RI, {
      signal: b
    }), C.addEventListener("pointermove", this.#S.bind(this, I), {
      signal: b
    }), this._freeHighlight = new BA({
      x: A,
      y: i
    }, [l, s, d, c], I.scale, this._defaultThickness / 2, g, 1e-3), {
      id: this._freeHighlightId,
      clipPathId: this._freeHighlightClipId
    } = I.drawLayer.draw({
      bbox: [0, 0, 1, 1],
      root: {
        viewBox: "0 0 1 1",
        fill: this._defaultColor,
        "fill-opacity": this._defaultOpacity
      },
      rootClass: {
        highlight: !0,
        free: !0
      },
      path: {
        d: this._freeHighlight.toSVGPath()
      }
    }, !0, !0);
  }
  static #S(I, g) {
    this._freeHighlight.add(g) && I.drawLayer.updateProperties(this._freeHighlightId, {
      path: {
        d: this._freeHighlight.toSVGPath()
      }
    });
  }
  static #F(I, g) {
    this._freeHighlight.isEmpty() ? I.drawLayer.remove(this._freeHighlightId) : I.createAndAddNewEditor(g, !1, {
      highlightId: this._freeHighlightId,
      highlightOutlines: this._freeHighlight.getOutlines(),
      clipPathId: this._freeHighlightClipId,
      methodOfCreation: "main_toolbar"
    }), this._freeHighlightId = -1, this._freeHighlight = null, this._freeHighlightClipId = "";
  }
  static async deserialize(I, g, C) {
    let A = null;
    if (I instanceof Sl) {
      const {
        data: {
          quadPoints: e,
          rect: a,
          rotation: h,
          id: t,
          color: W,
          opacity: B,
          popupRef: w,
          richText: n,
          contentsObj: V,
          creationDate: N,
          modificationDate: R
        },
        parent: {
          page: {
            pageNumber: Y
          }
        }
      } = I;
      A = I = {
        annotationType: k.HIGHLIGHT,
        color: Array.from(W),
        opacity: B,
        quadPoints: e,
        boxes: null,
        pageIndex: Y - 1,
        rect: a.slice(0),
        rotation: h,
        annotationElementId: t,
        id: t,
        deleted: !1,
        popupRef: w,
        richText: n,
        comment: V?.str || null,
        creationDate: N,
        modificationDate: R
      };
    } else if (I instanceof LA) {
      const {
        data: {
          inkLists: e,
          rect: a,
          rotation: h,
          id: t,
          color: W,
          borderStyle: {
            rawWidth: B
          },
          popupRef: w,
          richText: n,
          contentsObj: V,
          creationDate: N,
          modificationDate: R
        },
        parent: {
          page: {
            pageNumber: Y
          }
        }
      } = I;
      A = I = {
        annotationType: k.HIGHLIGHT,
        color: Array.from(W),
        thickness: B,
        inkLists: e,
        boxes: null,
        pageIndex: Y - 1,
        rect: a.slice(0),
        rotation: h,
        annotationElementId: t,
        id: t,
        deleted: !1,
        popupRef: w,
        richText: n,
        comment: V?.str || null,
        creationDate: N,
        modificationDate: R
      };
    }
    const {
      color: i,
      quadPoints: l,
      inkLists: s,
      opacity: d
    } = I, c = await super.deserialize(I, g, C);
    c.color = M.makeHexColor(...i), c.opacity = d || 1, s && (c.#e = I.thickness), c._initialData = A, I.comment && c.setCommentData(I);
    const [G, b] = c.pageDimensions, [o, m] = c.pageTranslation;
    if (l) {
      const e = c.#A = [];
      for (let a = 0; a < l.length; a += 8)
        e.push({
          x: (l[a] - o) / G,
          y: 1 - (l[a + 1] - m) / b,
          width: (l[a + 2] - l[a]) / G,
          height: (l[a + 1] - l[a + 5]) / b
        });
      c.#W(), c.#Y(), c.rotate(c.rotation);
    } else if (s) {
      c.#b = !0;
      const e = s[0], a = {
        x: e[0] - o,
        y: b - (e[1] - m)
      }, h = new BA(a, [0, 0, G, b], 1, c.#e / 2, !0, 1e-3);
      for (let B = 0, w = e.length; B < w; B += 2)
        a.x = e[B] - o, a.y = b - (e[B + 1] - m), h.add(a);
      const {
        id: t,
        clipPathId: W
      } = g.drawLayer.draw({
        bbox: [0, 0, 1, 1],
        root: {
          viewBox: "0 0 1 1",
          fill: c.color,
          "fill-opacity": c._defaultOpacity
        },
        rootClass: {
          highlight: !0,
          free: !0
        },
        path: {
          d: h.toSVGPath()
        }
      }, !0, !0);
      c.#h({
        highlightOutlines: h.getOutlines(),
        highlightId: t,
        clipPathId: W
      }), c.#Y(), c.rotate(c.parentRotation);
    }
    return c;
  }
  serialize(I = !1) {
    if (this.isEmpty() || I)
      return null;
    if (this.deleted)
      return this.serializeDeleted();
    const g = F._colorManager.convert(this._uiManager.getNonHCMColor(this.color)), C = super.serialize(I);
    return Object.assign(C, {
      color: g,
      opacity: this.opacity,
      thickness: this.#e,
      quadPoints: this.#p(),
      outlines: this.#K(C.rect)
    }), this.addComment(C), this.annotationElementId && !this.#z(C) ? null : (C.id = this.annotationElementId, C);
  }
  #z(I) {
    const {
      color: g
    } = this._initialData;
    return this.hasEditedComment || I.color.some((C, A) => C !== g[A]);
  }
  renderAnnotationElement(I) {
    return this.deleted ? (I.hide(), null) : (I.updateEdited({
      rect: this.getPDFRect(),
      popup: this.comment
    }), null);
  }
  static canCreateNewEmptyEditor() {
    return !1;
  }
}
class Ll {
  #I = /* @__PURE__ */ Object.create(null);
  updateProperty(I, g) {
    this[I] = g, this.updateSVGProperty(I, g);
  }
  updateProperties(I) {
    if (I)
      for (const [g, C] of Object.entries(I))
        g.startsWith("_") || this.updateProperty(g, C);
  }
  updateSVGProperty(I, g) {
    this.#I[I] = g;
  }
  toSVGProperties() {
    const I = this.#I;
    return this.#I = /* @__PURE__ */ Object.create(null), {
      root: I
    };
  }
  reset() {
    this.#I = /* @__PURE__ */ Object.create(null);
  }
  updateAll(I = this) {
    this.updateProperties(I);
  }
  clone() {
    f("Not implemented");
  }
}
class J extends F {
  #I = null;
  #g;
  _colorPicker = null;
  _drawId = null;
  static _currentDrawId = -1;
  static _currentParent = null;
  static #A = null;
  static #C = null;
  static #i = null;
  static #l = NaN;
  static #s = null;
  static #d = null;
  static #c = NaN;
  static _INNER_MARGIN = 3;
  constructor(I) {
    super(I), this.#g = I.mustBeCommitted || !1, this._addOutlines(I);
  }
  onUpdatedColor() {
    this._colorPicker?.update(this.color), super.onUpdatedColor();
  }
  _addOutlines(I) {
    I.drawOutlines && (this.#Z(I), this.#m());
  }
  #Z({
    drawOutlines: I,
    drawId: g,
    drawingOptions: C
  }) {
    this.#I = I, this._drawingOptions ||= C, this.annotationElementId || this._uiManager.a11yAlert(`pdfjs-editor-${this.editorType}-added-alert`), g >= 0 ? (this._drawId = g, this.parent.drawLayer.finalizeDraw(g, I.defaultProperties)) : this._drawId = this.#o(I, this.parent), this.#G(I.box);
  }
  #o(I, g) {
    const {
      id: C
    } = g.drawLayer.draw(J._mergeSVGProperties(this._drawingOptions.toSVGProperties(), I.defaultSVGProperties), !1, !1);
    return C;
  }
  static _mergeSVGProperties(I, g) {
    const C = new Set(Object.keys(I));
    for (const [A, i] of Object.entries(g))
      C.has(A) ? Object.assign(I[A], i) : I[A] = i;
    return I;
  }
  static getDefaultDrawingOptions(I) {
    f("Not implemented");
  }
  static get typesMap() {
    f("Not implemented");
  }
  static get isDrawer() {
    return !0;
  }
  static get supportMultipleDrawings() {
    return !1;
  }
  static updateDefaultParams(I, g) {
    const C = this.typesMap.get(I);
    C && this._defaultDrawingOptions.updateProperty(C, g), this._currentParent && (J.#A.updateProperty(C, g), this._currentParent.drawLayer.updateProperties(this._currentDrawId, this._defaultDrawingOptions.toSVGProperties()));
  }
  updateParams(I, g) {
    const C = this.constructor.typesMap.get(I);
    C && this._updateProperty(I, C, g);
  }
  static get defaultPropertiesToUpdate() {
    const I = [], g = this._defaultDrawingOptions;
    for (const [C, A] of this.typesMap)
      I.push([C, g[A]]);
    return I;
  }
  get propertiesToUpdate() {
    const I = [], {
      _drawingOptions: g
    } = this;
    for (const [C, A] of this.constructor.typesMap)
      I.push([C, g[A]]);
    return I;
  }
  _updateProperty(I, g, C) {
    const A = this._drawingOptions, i = A[g], l = (s) => {
      A.updateProperty(g, s);
      const d = this.#I.updateProperty(g, s);
      d && this.#G(d), this.parent?.drawLayer.updateProperties(this._drawId, A.toSVGProperties()), I === this.colorType && this.onUpdatedColor();
    };
    this.addCommands({
      cmd: l.bind(this, C),
      undo: l.bind(this, i),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: I,
      overwriteIfSameType: !0,
      keepUndo: !0
    });
  }
  _onResizing() {
    this.parent?.drawLayer.updateProperties(this._drawId, J._mergeSVGProperties(this.#I.getPathResizingSVGProperties(this.#a()), {
      bbox: this.#e()
    }));
  }
  _onResized() {
    this.parent?.drawLayer.updateProperties(this._drawId, J._mergeSVGProperties(this.#I.getPathResizedSVGProperties(this.#a()), {
      bbox: this.#e()
    }));
  }
  _onTranslating(I, g) {
    this.parent?.drawLayer.updateProperties(this._drawId, {
      bbox: this.#e()
    });
  }
  _onTranslated() {
    this.parent?.drawLayer.updateProperties(this._drawId, J._mergeSVGProperties(this.#I.getPathTranslatedSVGProperties(this.#a(), this.parentDimensions), {
      bbox: this.#e()
    }));
  }
  _onStartDragging() {
    this.parent?.drawLayer.updateProperties(this._drawId, {
      rootClass: {
        moving: !0
      }
    });
  }
  _onStopDragging() {
    this.parent?.drawLayer.updateProperties(this._drawId, {
      rootClass: {
        moving: !1
      }
    });
  }
  commit() {
    super.commit(), this.disableEditMode(), this.disableEditing();
  }
  disableEditing() {
    super.disableEditing(), this.div.classList.toggle("disabled", !0);
  }
  enableEditing() {
    super.enableEditing(), this.div.classList.toggle("disabled", !1);
  }
  getBaseTranslation() {
    return [0, 0];
  }
  get isResizable() {
    return !0;
  }
  onceAdded(I) {
    this.annotationElementId || this.parent.addUndoableEditor(this), this._isDraggable = !0, this.#g && (this.#g = !1, this.commit(), this.parent.setSelected(this), I && this.isOnScreen && this.div.focus());
  }
  remove() {
    this.#b(), super.remove();
  }
  rebuild() {
    this.parent && (super.rebuild(), this.div !== null && (this.#m(), this.#G(this.#I.box), this.isAttachedToDOM || this.parent.add(this)));
  }
  setParent(I) {
    let g = !1;
    this.parent && !I ? (this._uiManager.removeShouldRescale(this), this.#b()) : I && (this._uiManager.addShouldRescale(this), this.#m(I), g = !this.parent && this.div?.classList.contains("selectedEditor")), super.setParent(I), g && this.select();
  }
  #b() {
    this._drawId === null || !this.parent || (this.parent.drawLayer.remove(this._drawId), this._drawId = null, this._drawingOptions.reset());
  }
  #m(I = this.parent) {
    if (!(this._drawId !== null && this.parent === I)) {
      if (this._drawId !== null) {
        this.parent.drawLayer.updateParent(this._drawId, I.drawLayer);
        return;
      }
      this._drawingOptions.updateAll(), this._drawId = this.#o(this.#I, I);
    }
  }
  #t([I, g, C, A]) {
    const {
      parentDimensions: [i, l],
      rotation: s
    } = this;
    switch (s) {
      case 90:
        return [g, 1 - I, C * (l / i), A * (i / l)];
      case 180:
        return [1 - I, 1 - g, C, A];
      case 270:
        return [1 - g, I, C * (l / i), A * (i / l)];
      default:
        return [I, g, C, A];
    }
  }
  #a() {
    const {
      x: I,
      y: g,
      width: C,
      height: A,
      parentDimensions: [i, l],
      rotation: s
    } = this;
    switch (s) {
      case 90:
        return [1 - g, I, C * (i / l), A * (l / i)];
      case 180:
        return [1 - I, 1 - g, C, A];
      case 270:
        return [g, 1 - I, C * (i / l), A * (l / i)];
      default:
        return [I, g, C, A];
    }
  }
  #G(I) {
    [this.x, this.y, this.width, this.height] = this.#t(I), this.div && (this.fixAndSetPosition(), this.setDims()), this._onResized();
  }
  #e() {
    const {
      x: I,
      y: g,
      width: C,
      height: A,
      rotation: i,
      parentRotation: l,
      parentDimensions: [s, d]
    } = this;
    switch ((i * 4 + l) / 90) {
      case 1:
        return [1 - g - A, I, A, C];
      case 2:
        return [1 - I - C, 1 - g - A, C, A];
      case 3:
        return [g, 1 - I - C, A, C];
      case 4:
        return [I, g - C * (s / d), A * (d / s), C * (s / d)];
      case 5:
        return [1 - g, I, C * (s / d), A * (d / s)];
      case 6:
        return [1 - I - A * (d / s), 1 - g, A * (d / s), C * (s / d)];
      case 7:
        return [g - C * (s / d), 1 - I - A * (d / s), C * (s / d), A * (d / s)];
      case 8:
        return [I - C, g - A, C, A];
      case 9:
        return [1 - g, I - C, A, C];
      case 10:
        return [1 - I, 1 - g, C, A];
      case 11:
        return [g - A, 1 - I, A, C];
      case 12:
        return [I - A * (d / s), g, A * (d / s), C * (s / d)];
      case 13:
        return [1 - g - C * (s / d), I - A * (d / s), C * (s / d), A * (d / s)];
      case 14:
        return [1 - I, 1 - g - C * (s / d), A * (d / s), C * (s / d)];
      case 15:
        return [g, 1 - I, C * (s / d), A * (d / s)];
      default:
        return [I, g, C, A];
    }
  }
  rotate() {
    this.parent && this.parent.drawLayer.updateProperties(this._drawId, J._mergeSVGProperties({
      bbox: this.#e()
    }, this.#I.updateRotation((this.parentRotation - this.rotation + 360) % 360)));
  }
  onScaleChanging() {
    this.parent && this.#G(this.#I.updateParentDimensions(this.parentDimensions, this.parent.scale));
  }
  static onScaleChangingWhenDrawing() {
  }
  render() {
    if (this.div)
      return this.div;
    let I, g;
    this._isCopy && (I = this.x, g = this.y);
    const C = super.render();
    C.classList.add("draw");
    const A = document.createElement("div");
    return C.append(A), A.setAttribute("aria-hidden", "true"), A.className = "internal", this.setDims(), this._uiManager.addShouldRescale(this), this.disableEditing(), this._isCopy && this._moveAfterPaste(I, g), C;
  }
  static createDrawerInstance(I, g, C, A, i) {
    f("Not implemented");
  }
  static startDrawing(I, g, C, A) {
    const {
      target: i,
      offsetX: l,
      offsetY: s,
      pointerId: d,
      pointerType: c
    } = A;
    if (J.#s && J.#s !== c)
      return;
    const {
      viewport: {
        rotation: G
      }
    } = I, {
      width: b,
      height: o
    } = i.getBoundingClientRect(), m = J.#C = new AbortController(), e = I.combinedSignal(m);
    if (J.#l ||= d, J.#s ??= c, window.addEventListener("pointerup", (a) => {
      J.#l === a.pointerId ? this._endDraw(a) : J.#d?.delete(a.pointerId);
    }, {
      signal: e
    }), window.addEventListener("pointercancel", (a) => {
      J.#l === a.pointerId ? this._currentParent.endDrawingSession() : J.#d?.delete(a.pointerId);
    }, {
      signal: e
    }), window.addEventListener("pointerdown", (a) => {
      J.#s === a.pointerType && ((J.#d ||= /* @__PURE__ */ new Set()).add(a.pointerId), J.#A.isCancellable() && (J.#A.removeLastElement(), J.#A.isEmpty() ? this._currentParent.endDrawingSession(!0) : this._endDraw(null)));
    }, {
      capture: !0,
      passive: !1,
      signal: e
    }), window.addEventListener("contextmenu", RI, {
      signal: e
    }), i.addEventListener("pointermove", this._drawMove.bind(this), {
      signal: e
    }), i.addEventListener("touchmove", (a) => {
      a.timeStamp === J.#c && II(a);
    }, {
      signal: e
    }), I.toggleDrawing(), g._editorUndoBar?.hide(), J.#A) {
      I.drawLayer.updateProperties(this._currentDrawId, J.#A.startNew(l, s, b, o, G));
      return;
    }
    g.updateUIForDefaultProperties(this), J.#A = this.createDrawerInstance(l, s, b, o, G), J.#i = this.getDefaultDrawingOptions(), this._currentParent = I, {
      id: this._currentDrawId
    } = I.drawLayer.draw(this._mergeSVGProperties(J.#i.toSVGProperties(), J.#A.defaultSVGProperties), !0, !1);
  }
  static _drawMove(I) {
    if (J.#c = -1, !J.#A)
      return;
    const {
      offsetX: g,
      offsetY: C,
      pointerId: A
    } = I;
    if (J.#l === A) {
      if (J.#d?.size >= 1) {
        this._endDraw(I);
        return;
      }
      this._currentParent.drawLayer.updateProperties(this._currentDrawId, J.#A.add(g, C)), J.#c = I.timeStamp, II(I);
    }
  }
  static _cleanup(I) {
    I && (this._currentDrawId = -1, this._currentParent = null, J.#A = null, J.#i = null, J.#s = null, J.#c = NaN), J.#C && (J.#C.abort(), J.#C = null, J.#l = NaN, J.#d = null);
  }
  static _endDraw(I) {
    const g = this._currentParent;
    if (g) {
      if (g.toggleDrawing(!0), this._cleanup(!1), I?.target === g.div && g.drawLayer.updateProperties(this._currentDrawId, J.#A.end(I.offsetX, I.offsetY)), this.supportMultipleDrawings) {
        const C = J.#A, A = this._currentDrawId, i = C.getLastElement();
        g.addCommands({
          cmd: () => {
            g.drawLayer.updateProperties(A, C.setLastElement(i));
          },
          undo: () => {
            g.drawLayer.updateProperties(A, C.removeLastElement());
          },
          mustExec: !1,
          type: j.DRAW_STEP
        });
        return;
      }
      this.endDrawing(!1);
    }
  }
  static endDrawing(I) {
    const g = this._currentParent;
    if (!g)
      return null;
    if (g.toggleDrawing(!0), g.cleanUndoStack(j.DRAW_STEP), !J.#A.isEmpty()) {
      const {
        pageDimensions: [C, A],
        scale: i
      } = g, l = g.createAndAddNewEditor({
        offsetX: 0,
        offsetY: 0
      }, !1, {
        drawId: this._currentDrawId,
        drawOutlines: J.#A.getOutlines(C * i, A * i, i, this._INNER_MARGIN),
        drawingOptions: J.#i,
        mustBeCommitted: !I
      });
      return this._cleanup(!0), l;
    }
    return g.drawLayer.remove(this._currentDrawId), this._cleanup(!0), null;
  }
  createDrawingOptions(I) {
  }
  static deserializeDraw(I, g, C, A, i, l) {
    f("Not implemented");
  }
  static async deserialize(I, g, C) {
    const {
      rawDims: {
        pageWidth: A,
        pageHeight: i,
        pageX: l,
        pageY: s
      }
    } = g.viewport, d = this.deserializeDraw(l, s, A, i, this._INNER_MARGIN, I), c = await super.deserialize(I, g, C);
    return c.createDrawingOptions(I), c.#Z({
      drawOutlines: d
    }), c.#m(), c.onScaleChanging(), c.rotate(), c;
  }
  serializeDraw(I) {
    const [g, C] = this.pageTranslation, [A, i] = this.pageDimensions;
    return this.#I.serialize([g, C, A, i], I);
  }
  renderAnnotationElement(I) {
    return I.updateEdited({
      rect: this.getPDFRect()
    }), null;
  }
  static canCreateNewEmptyEditor() {
    return !1;
  }
}
class AZ {
  #I = new Float64Array(6);
  #g;
  #A;
  #C;
  #i;
  #l;
  #s = "";
  #d = 0;
  #c = new iC();
  #Z;
  #o;
  constructor(I, g, C, A, i, l) {
    this.#Z = C, this.#o = A, this.#C = i, this.#i = l, [I, g] = this.#b(I, g);
    const s = this.#g = [NaN, NaN, NaN, NaN, I, g];
    this.#l = [I, g], this.#A = [{
      line: s,
      points: this.#l
    }], this.#I.set(s, 0);
  }
  updateProperty(I, g) {
    I === "stroke-width" && (this.#i = g);
  }
  #b(I, g) {
    return H._normalizePoint(I, g, this.#Z, this.#o, this.#C);
  }
  isEmpty() {
    return !this.#A || this.#A.length === 0;
  }
  isCancellable() {
    return this.#l.length <= 10;
  }
  add(I, g) {
    [I, g] = this.#b(I, g);
    const [C, A, i, l] = this.#I.subarray(2, 6), s = I - i, d = g - l;
    return Math.hypot(this.#Z * s, this.#o * d) <= 2 ? null : (this.#l.push(I, g), isNaN(C) ? (this.#I.set([i, l, I, g], 2), this.#g.push(NaN, NaN, NaN, NaN, I, g), {
      path: {
        d: this.toSVGPath()
      }
    }) : (isNaN(this.#I[0]) && this.#g.splice(6, 6), this.#I.set([C, A, i, l, I, g], 0), this.#g.push(...H.createBezierPoints(C, A, i, l, I, g)), {
      path: {
        d: this.toSVGPath()
      }
    }));
  }
  end(I, g) {
    const C = this.add(I, g);
    return C || (this.#l.length === 2 ? {
      path: {
        d: this.toSVGPath()
      }
    } : null);
  }
  startNew(I, g, C, A, i) {
    this.#Z = C, this.#o = A, this.#C = i, [I, g] = this.#b(I, g);
    const l = this.#g = [NaN, NaN, NaN, NaN, I, g];
    this.#l = [I, g];
    const s = this.#A.at(-1);
    return s && (s.line = new Float32Array(s.line), s.points = new Float32Array(s.points)), this.#A.push({
      line: l,
      points: this.#l
    }), this.#I.set(l, 0), this.#d = 0, this.toSVGPath(), null;
  }
  getLastElement() {
    return this.#A.at(-1);
  }
  setLastElement(I) {
    return this.#A ? (this.#A.push(I), this.#g = I.line, this.#l = I.points, this.#d = 0, {
      path: {
        d: this.toSVGPath()
      }
    }) : this.#c.setLastElement(I);
  }
  removeLastElement() {
    if (!this.#A)
      return this.#c.removeLastElement();
    this.#A.pop(), this.#s = "";
    for (let I = 0, g = this.#A.length; I < g; I++) {
      const {
        line: C,
        points: A
      } = this.#A[I];
      this.#g = C, this.#l = A, this.#d = 0, this.toSVGPath();
    }
    return {
      path: {
        d: this.#s
      }
    };
  }
  toSVGPath() {
    const I = H.svgRound(this.#g[4]), g = H.svgRound(this.#g[5]);
    if (this.#l.length === 2)
      return this.#s = `${this.#s} M ${I} ${g} Z`, this.#s;
    if (this.#l.length <= 6) {
      const A = this.#s.lastIndexOf("M");
      this.#s = `${this.#s.slice(0, A)} M ${I} ${g}`, this.#d = 6;
    }
    if (this.#l.length === 4) {
      const A = H.svgRound(this.#g[10]), i = H.svgRound(this.#g[11]);
      return this.#s = `${this.#s} L ${A} ${i}`, this.#d = 12, this.#s;
    }
    const C = [];
    this.#d === 0 && (C.push(`M ${I} ${g}`), this.#d = 6);
    for (let A = this.#d, i = this.#g.length; A < i; A += 6) {
      const [l, s, d, c, G, b] = this.#g.slice(A, A + 6).map(H.svgRound);
      C.push(`C${l} ${s} ${d} ${c} ${G} ${b}`);
    }
    return this.#s += C.join(" "), this.#d = this.#g.length, this.#s;
  }
  getOutlines(I, g, C, A) {
    const i = this.#A.at(-1);
    return i.line = new Float32Array(i.line), i.points = new Float32Array(i.points), this.#c.build(this.#A, I, g, C, this.#C, this.#i, A), this.#I = null, this.#g = null, this.#A = null, this.#s = null, this.#c;
  }
  get defaultSVGProperties() {
    return {
      root: {
        viewBox: "0 0 10000 10000"
      },
      rootClass: {
        draw: !0
      },
      bbox: [0, 0, 1, 1]
    };
  }
}
class iC extends H {
  #I;
  #g = 0;
  #A;
  #C;
  #i;
  #l;
  #s;
  #d;
  #c;
  build(I, g, C, A, i, l, s) {
    this.#i = g, this.#l = C, this.#s = A, this.#d = i, this.#c = l, this.#A = s ?? 0, this.#C = I, this.#b();
  }
  get thickness() {
    return this.#c;
  }
  setLastElement(I) {
    return this.#C.push(I), {
      path: {
        d: this.toSVGPath()
      }
    };
  }
  removeLastElement() {
    return this.#C.pop(), {
      path: {
        d: this.toSVGPath()
      }
    };
  }
  toSVGPath() {
    const I = [];
    for (const {
      line: g
    } of this.#C) {
      if (I.push(`M${H.svgRound(g[4])} ${H.svgRound(g[5])}`), g.length === 6) {
        I.push("Z");
        continue;
      }
      if (g.length === 12 && isNaN(g[6])) {
        I.push(`L${H.svgRound(g[10])} ${H.svgRound(g[11])}`);
        continue;
      }
      for (let C = 6, A = g.length; C < A; C += 6) {
        const [i, l, s, d, c, G] = g.subarray(C, C + 6).map(H.svgRound);
        I.push(`C${i} ${l} ${s} ${d} ${c} ${G}`);
      }
    }
    return I.join("");
  }
  serialize([I, g, C, A], i) {
    const l = [], s = [], [d, c, G, b] = this.#o();
    let o, m, e, a, h, t, W, B, w;
    switch (this.#d) {
      case 0:
        w = H._rescale, o = I, m = g + A, e = C, a = -A, h = I + d * C, t = g + (1 - c - b) * A, W = I + (d + G) * C, B = g + (1 - c) * A;
        break;
      case 90:
        w = H._rescaleAndSwap, o = I, m = g, e = C, a = A, h = I + c * C, t = g + d * A, W = I + (c + b) * C, B = g + (d + G) * A;
        break;
      case 180:
        w = H._rescale, o = I + C, m = g, e = -C, a = A, h = I + (1 - d - G) * C, t = g + c * A, W = I + (1 - d) * C, B = g + (c + b) * A;
        break;
      case 270:
        w = H._rescaleAndSwap, o = I + C, m = g + A, e = -C, a = -A, h = I + (1 - c - b) * C, t = g + (1 - d - G) * A, W = I + (1 - c) * C, B = g + (1 - d) * A;
        break;
    }
    for (const {
      line: n,
      points: V
    } of this.#C)
      l.push(w(n, o, m, e, a, i ? new Array(n.length) : null)), s.push(w(V, o, m, e, a, i ? new Array(V.length) : null));
    return {
      lines: l,
      points: s,
      rect: [h, t, W, B]
    };
  }
  static deserialize(I, g, C, A, i, {
    paths: {
      lines: l,
      points: s
    },
    rotation: d,
    thickness: c
  }) {
    const G = [];
    let b, o, m, e, a;
    switch (d) {
      case 0:
        a = H._rescale, b = -I / C, o = g / A + 1, m = 1 / C, e = -1 / A;
        break;
      case 90:
        a = H._rescaleAndSwap, b = -g / A, o = -I / C, m = 1 / A, e = 1 / C;
        break;
      case 180:
        a = H._rescale, b = I / C + 1, o = -g / A, m = -1 / C, e = 1 / A;
        break;
      case 270:
        a = H._rescaleAndSwap, b = g / A + 1, o = I / C + 1, m = -1 / A, e = -1 / C;
        break;
    }
    if (!l) {
      l = [];
      for (const t of s) {
        const W = t.length;
        if (W === 2) {
          l.push(new Float32Array([NaN, NaN, NaN, NaN, t[0], t[1]]));
          continue;
        }
        if (W === 4) {
          l.push(new Float32Array([NaN, NaN, NaN, NaN, t[0], t[1], NaN, NaN, NaN, NaN, t[2], t[3]]));
          continue;
        }
        const B = new Float32Array(3 * (W - 2));
        l.push(B);
        let [w, n, V, N] = t.subarray(0, 4);
        B.set([NaN, NaN, NaN, NaN, w, n], 0);
        for (let R = 4; R < W; R += 2) {
          const Y = t[R], y = t[R + 1];
          B.set(H.createBezierPoints(w, n, V, N, Y, y), (R - 2) * 3), [w, n, V, N] = [V, N, Y, y];
        }
      }
    }
    for (let t = 0, W = l.length; t < W; t++)
      G.push({
        line: a(l[t].map((B) => B ?? NaN), b, o, m, e),
        points: a(s[t].map((B) => B ?? NaN), b, o, m, e)
      });
    const h = new this.prototype.constructor();
    return h.build(G, C, A, 1, d, c, i), h;
  }
  #Z(I = this.#c) {
    const g = this.#A + I / 2 * this.#s;
    return this.#d % 180 === 0 ? [g / this.#i, g / this.#l] : [g / this.#l, g / this.#i];
  }
  #o() {
    const [I, g, C, A] = this.#I, [i, l] = this.#Z(0);
    return [I + i, g + l, C - 2 * i, A - 2 * l];
  }
  #b() {
    const I = this.#I = new Float32Array([1 / 0, 1 / 0, -1 / 0, -1 / 0]);
    for (const {
      line: A
    } of this.#C) {
      if (A.length <= 12) {
        for (let s = 4, d = A.length; s < d; s += 6)
          M.pointBoundingBox(A[s], A[s + 1], I);
        continue;
      }
      let i = A[4], l = A[5];
      for (let s = 6, d = A.length; s < d; s += 6) {
        const [c, G, b, o, m, e] = A.subarray(s, s + 6);
        M.bezierBoundingBox(i, l, c, G, b, o, m, e, I), i = m, l = e;
      }
    }
    const [g, C] = this.#Z();
    I[0] = eI(I[0] - g, 0, 1), I[1] = eI(I[1] - C, 0, 1), I[2] = eI(I[2] + g, 0, 1), I[3] = eI(I[3] + C, 0, 1), I[2] -= I[0], I[3] -= I[1];
  }
  get box() {
    return this.#I;
  }
  updateProperty(I, g) {
    return I === "stroke-width" ? this.#m(g) : null;
  }
  #m(I) {
    const [g, C] = this.#Z();
    this.#c = I;
    const [A, i] = this.#Z(), [l, s] = [A - g, i - C], d = this.#I;
    return d[0] -= l, d[1] -= s, d[2] += 2 * l, d[3] += 2 * s, d;
  }
  updateParentDimensions([I, g], C) {
    const [A, i] = this.#Z();
    this.#i = I, this.#l = g, this.#s = C;
    const [l, s] = this.#Z(), d = l - A, c = s - i, G = this.#I;
    return G[0] -= d, G[1] -= c, G[2] += 2 * d, G[3] += 2 * c, G;
  }
  updateRotation(I) {
    return this.#g = I, {
      path: {
        transform: this.rotationTransform
      }
    };
  }
  get viewBox() {
    return this.#I.map(H.svgRound).join(" ");
  }
  get defaultProperties() {
    const [I, g] = this.#I;
    return {
      root: {
        viewBox: this.viewBox
      },
      path: {
        "transform-origin": `${H.svgRound(I)} ${H.svgRound(g)}`
      }
    };
  }
  get rotationTransform() {
    const [, , I, g] = this.#I;
    let C = 0, A = 0, i = 0, l = 0, s = 0, d = 0;
    switch (this.#g) {
      case 90:
        A = g / I, i = -I / g, s = I;
        break;
      case 180:
        C = -1, l = -1, s = I, d = g;
        break;
      case 270:
        A = -g / I, i = I / g, d = g;
        break;
      default:
        return "";
    }
    return `matrix(${C} ${A} ${i} ${l} ${H.svgRound(s)} ${H.svgRound(d)})`;
  }
  getPathResizingSVGProperties([I, g, C, A]) {
    const [i, l] = this.#Z(), [s, d, c, G] = this.#I;
    if (Math.abs(c - i) <= H.PRECISION || Math.abs(G - l) <= H.PRECISION) {
      const a = I + C / 2 - (s + c / 2), h = g + A / 2 - (d + G / 2);
      return {
        path: {
          "transform-origin": `${H.svgRound(I)} ${H.svgRound(g)}`,
          transform: `${this.rotationTransform} translate(${a} ${h})`
        }
      };
    }
    const b = (C - 2 * i) / (c - 2 * i), o = (A - 2 * l) / (G - 2 * l), m = c / C, e = G / A;
    return {
      path: {
        "transform-origin": `${H.svgRound(s)} ${H.svgRound(d)}`,
        transform: `${this.rotationTransform} scale(${m} ${e}) translate(${H.svgRound(i)} ${H.svgRound(l)}) scale(${b} ${o}) translate(${H.svgRound(-i)} ${H.svgRound(-l)})`
      }
    };
  }
  getPathResizedSVGProperties([I, g, C, A]) {
    const [i, l] = this.#Z(), s = this.#I, [d, c, G, b] = s;
    if (s[0] = I, s[1] = g, s[2] = C, s[3] = A, Math.abs(G - i) <= H.PRECISION || Math.abs(b - l) <= H.PRECISION) {
      const h = I + C / 2 - (d + G / 2), t = g + A / 2 - (c + b / 2);
      for (const {
        line: W,
        points: B
      } of this.#C)
        H._translate(W, h, t, W), H._translate(B, h, t, B);
      return {
        root: {
          viewBox: this.viewBox
        },
        path: {
          "transform-origin": `${H.svgRound(I)} ${H.svgRound(g)}`,
          transform: this.rotationTransform || null,
          d: this.toSVGPath()
        }
      };
    }
    const o = (C - 2 * i) / (G - 2 * i), m = (A - 2 * l) / (b - 2 * l), e = -o * (d + i) + I + i, a = -m * (c + l) + g + l;
    if (o !== 1 || m !== 1 || e !== 0 || a !== 0)
      for (const {
        line: h,
        points: t
      } of this.#C)
        H._rescale(h, e, a, o, m, h), H._rescale(t, e, a, o, m, t);
    return {
      root: {
        viewBox: this.viewBox
      },
      path: {
        "transform-origin": `${H.svgRound(I)} ${H.svgRound(g)}`,
        transform: this.rotationTransform || null,
        d: this.toSVGPath()
      }
    };
  }
  getPathTranslatedSVGProperties([I, g], C) {
    const [A, i] = C, l = this.#I, s = I - l[0], d = g - l[1];
    if (this.#i === A && this.#l === i)
      for (const {
        line: c,
        points: G
      } of this.#C)
        H._translate(c, s, d, c), H._translate(G, s, d, G);
    else {
      const c = this.#i / A, G = this.#l / i;
      this.#i = A, this.#l = i;
      for (const {
        line: b,
        points: o
      } of this.#C)
        H._rescale(b, s, d, c, G, b), H._rescale(o, s, d, c, G, o);
      l[2] *= c, l[3] *= G;
    }
    return l[0] = I, l[1] = g, {
      root: {
        viewBox: this.viewBox
      },
      path: {
        d: this.toSVGPath(),
        "transform-origin": `${H.svgRound(I)} ${H.svgRound(g)}`
      }
    };
  }
  get defaultSVGProperties() {
    const I = this.#I;
    return {
      root: {
        viewBox: this.viewBox
      },
      rootClass: {
        draw: !0
      },
      path: {
        d: this.toSVGPath(),
        "transform-origin": `${H.svgRound(I[0])} ${H.svgRound(I[1])}`,
        transform: this.rotationTransform || null
      },
      bbox: I
    };
  }
}
class JC extends Ll {
  constructor(I) {
    super(), this._viewParameters = I, super.updateProperties({
      fill: "none",
      stroke: F._defaultLineColor,
      "stroke-opacity": 1,
      "stroke-width": 1,
      "stroke-linecap": "round",
      "stroke-linejoin": "round",
      "stroke-miterlimit": 10
    });
  }
  updateSVGProperty(I, g) {
    I === "stroke-width" && (g ??= this["stroke-width"], g *= this._viewParameters.realScale), super.updateSVGProperty(I, g);
  }
  clone() {
    const I = new JC(this._viewParameters);
    return I.updateAll(this), I;
  }
}
class kA extends J {
  static _type = "ink";
  static _editorType = k.INK;
  static _defaultDrawingOptions = null;
  constructor(I) {
    super({
      ...I,
      name: "inkEditor"
    }), this._willKeepAspectRatio = !0, this.defaultL10nId = "pdfjs-editor-ink-editor";
  }
  static initialize(I, g) {
    F.initialize(I, g), this._defaultDrawingOptions = new JC(g.viewParameters);
  }
  static getDefaultDrawingOptions(I) {
    const g = this._defaultDrawingOptions.clone();
    return g.updateProperties(I), g;
  }
  static get supportMultipleDrawings() {
    return !0;
  }
  static get typesMap() {
    return T(this, "typesMap", /* @__PURE__ */ new Map([[j.INK_THICKNESS, "stroke-width"], [j.INK_COLOR, "stroke"], [j.INK_OPACITY, "stroke-opacity"]]));
  }
  static createDrawerInstance(I, g, C, A, i) {
    return new AZ(I, g, C, A, i, this._defaultDrawingOptions["stroke-width"]);
  }
  static deserializeDraw(I, g, C, A, i, l) {
    return iC.deserialize(I, g, C, A, i, l);
  }
  static async deserialize(I, g, C) {
    let A = null;
    if (I instanceof LA) {
      const {
        data: {
          inkLists: l,
          rect: s,
          rotation: d,
          id: c,
          color: G,
          opacity: b,
          borderStyle: {
            rawWidth: o
          },
          popupRef: m,
          richText: e,
          contentsObj: a,
          creationDate: h,
          modificationDate: t
        },
        parent: {
          page: {
            pageNumber: W
          }
        }
      } = I;
      A = I = {
        annotationType: k.INK,
        color: Array.from(G),
        thickness: o,
        opacity: b,
        paths: {
          points: l
        },
        boxes: null,
        pageIndex: W - 1,
        rect: s.slice(0),
        rotation: d,
        annotationElementId: c,
        id: c,
        deleted: !1,
        popupRef: m,
        richText: e,
        comment: a?.str || null,
        creationDate: h,
        modificationDate: t
      };
    }
    const i = await super.deserialize(I, g, C);
    return i._initialData = A, I.comment && i.setCommentData(I), i;
  }
  get toolbarButtons() {
    return this._colorPicker ||= new Pg(this), [["colorPicker", this._colorPicker]];
  }
  get colorType() {
    return j.INK_COLOR;
  }
  get color() {
    return this._drawingOptions.stroke;
  }
  get opacity() {
    return this._drawingOptions["stroke-opacity"];
  }
  onScaleChanging() {
    if (!this.parent)
      return;
    super.onScaleChanging();
    const {
      _drawId: I,
      _drawingOptions: g,
      parent: C
    } = this;
    g.updateSVGProperty("stroke-width"), C.drawLayer.updateProperties(I, g.toSVGProperties());
  }
  static onScaleChangingWhenDrawing() {
    const I = this._currentParent;
    I && (super.onScaleChangingWhenDrawing(), this._defaultDrawingOptions.updateSVGProperty("stroke-width"), I.drawLayer.updateProperties(this._currentDrawId, this._defaultDrawingOptions.toSVGProperties()));
  }
  createDrawingOptions({
    color: I,
    thickness: g,
    opacity: C
  }) {
    this._drawingOptions = kA.getDefaultDrawingOptions({
      stroke: M.makeHexColor(...I),
      "stroke-width": g,
      "stroke-opacity": C
    });
  }
  serialize(I = !1) {
    if (this.isEmpty())
      return null;
    if (this.deleted)
      return this.serializeDeleted();
    const {
      lines: g,
      points: C
    } = this.serializeDraw(I), {
      _drawingOptions: {
        stroke: A,
        "stroke-opacity": i,
        "stroke-width": l
      }
    } = this, s = Object.assign(super.serialize(I), {
      color: F._colorManager.convert(A),
      opacity: i,
      thickness: l,
      paths: {
        lines: g,
        points: C
      }
    });
    return this.addComment(s), I ? (s.isCopy = !0, s) : this.annotationElementId && !this.#I(s) ? null : (s.id = this.annotationElementId, s);
  }
  #I(I) {
    const {
      color: g,
      thickness: C,
      opacity: A,
      pageIndex: i
    } = this._initialData;
    return this.hasEditedComment || this._hasBeenMoved || this._hasBeenResized || I.color.some((l, s) => l !== g[s]) || I.thickness !== C || I.opacity !== A || I.pageIndex !== i;
  }
  renderAnnotationElement(I) {
    if (this.deleted)
      return I.hide(), null;
    const {
      points: g,
      rect: C
    } = this.serializeDraw(!1);
    return I.updateEdited({
      rect: C,
      thickness: this._drawingOptions["stroke-width"],
      points: g,
      popup: this.comment
    }), null;
  }
}
class WA extends iC {
  toSVGPath() {
    let I = super.toSVGPath();
    return I.endsWith("Z") || (I += "Z"), I;
  }
}
const aC = 8, zg = 3;
let Bg = class {
  static #I = {
    maxDim: 512,
    sigmaSFactor: 0.02,
    sigmaR: 25,
    kernelSize: 16
  };
  static #g(I, g, C, A) {
    return C -= I, A -= g, C === 0 ? A > 0 ? 0 : 4 : C === 1 ? A + 6 : 2 - A;
  }
  static #A = new Int32Array([0, 1, -1, 1, -1, 0, -1, -1, 0, -1, 1, -1, 1, 0, 1, 1]);
  static #C(I, g, C, A, i, l, s) {
    const d = this.#g(C, A, i, l);
    for (let c = 0; c < 8; c++) {
      const G = (-c + d - s + 16) % 8, b = this.#A[2 * G], o = this.#A[2 * G + 1];
      if (I[(C + b) * g + (A + o)] !== 0)
        return G;
    }
    return -1;
  }
  static #i(I, g, C, A, i, l, s) {
    const d = this.#g(C, A, i, l);
    for (let c = 0; c < 8; c++) {
      const G = (c + d + s + 16) % 8, b = this.#A[2 * G], o = this.#A[2 * G + 1];
      if (I[(C + b) * g + (A + o)] !== 0)
        return G;
    }
    return -1;
  }
  static #l(I, g, C, A) {
    const i = I.length, l = new Int32Array(i);
    for (let G = 0; G < i; G++)
      l[G] = I[G] <= A ? 1 : 0;
    for (let G = 1; G < C - 1; G++)
      l[G * g] = l[G * g + g - 1] = 0;
    for (let G = 0; G < g; G++)
      l[G] = l[g * C - 1 - G] = 0;
    let s = 1, d;
    const c = [];
    for (let G = 1; G < C - 1; G++) {
      d = 1;
      for (let b = 1; b < g - 1; b++) {
        const o = G * g + b, m = l[o];
        if (m === 0)
          continue;
        let e = G, a = b;
        if (m === 1 && l[o - 1] === 0)
          s += 1, a -= 1;
        else if (m >= 1 && l[o + 1] === 0)
          s += 1, a += 1, m > 1 && (d = m);
        else {
          m !== 1 && (d = Math.abs(m));
          continue;
        }
        const h = [b, G], t = a === b + 1, W = {
          isHole: t,
          points: h,
          id: s,
          parent: 0
        };
        c.push(W);
        let B;
        for (const X of c)
          if (X.id === d) {
            B = X;
            break;
          }
        B ? B.isHole ? W.parent = t ? B.parent : d : W.parent = t ? d : B.parent : W.parent = t ? d : 0;
        const w = this.#C(l, g, G, b, e, a, 0);
        if (w === -1) {
          l[o] = -s, l[o] !== 1 && (d = Math.abs(l[o]));
          continue;
        }
        let n = this.#A[2 * w], V = this.#A[2 * w + 1];
        const N = G + n, R = b + V;
        e = N, a = R;
        let Y = G, y = b;
        for (; ; ) {
          const X = this.#i(l, g, Y, y, e, a, 1);
          n = this.#A[2 * X], V = this.#A[2 * X + 1];
          const K = Y + n, S = y + V;
          h.push(S, K);
          const p = Y * g + y;
          if (l[p + 1] === 0 ? l[p] = -s : l[p] === 1 && (l[p] = s), K === G && S === b && Y === N && y === R) {
            l[o] !== 1 && (d = Math.abs(l[o]));
            break;
          } else
            e = Y, a = y, Y = K, y = S;
        }
      }
    }
    return c;
  }
  static #s(I, g, C, A) {
    if (C - g <= 4) {
      for (let N = g; N < C - 2; N += 2)
        A.push(I[N], I[N + 1]);
      return;
    }
    const i = I[g], l = I[g + 1], s = I[C - 4] - i, d = I[C - 3] - l, c = Math.hypot(s, d), G = s / c, b = d / c, o = G * l - b * i, m = d / s, e = 1 / c, a = Math.atan(m), h = Math.cos(a), t = Math.sin(a), W = e * (Math.abs(h) + Math.abs(t)), B = e * (1 - W + W ** 2), w = Math.max(Math.atan(Math.abs(t + h) * B), Math.atan(Math.abs(t - h) * B));
    let n = 0, V = g;
    for (let N = g + 2; N < C - 2; N += 2) {
      const R = Math.abs(o - G * I[N + 1] + b * I[N]);
      R > n && (V = N, n = R);
    }
    n > (c * w) ** 2 ? (this.#s(I, g, V + 2, A), this.#s(I, V, C, A)) : A.push(i, l);
  }
  static #d(I) {
    const g = [], C = I.length;
    return this.#s(I, 0, C, g), g.push(I[C - 2], I[C - 1]), g.length <= 4 ? null : g;
  }
  static #c(I, g, C, A, i, l) {
    const s = new Float32Array(l ** 2), d = -2 * A ** 2, c = l >> 1;
    for (let a = 0; a < l; a++) {
      const h = (a - c) ** 2;
      for (let t = 0; t < l; t++)
        s[a * l + t] = Math.exp((h + (t - c) ** 2) / d);
    }
    const G = new Float32Array(256), b = -2 * i ** 2;
    for (let a = 0; a < 256; a++)
      G[a] = Math.exp(a ** 2 / b);
    const o = I.length, m = new Uint8Array(o), e = new Uint32Array(256);
    for (let a = 0; a < C; a++)
      for (let h = 0; h < g; h++) {
        const t = a * g + h, W = I[t];
        let B = 0, w = 0;
        for (let V = 0; V < l; V++) {
          const N = a + V - c;
          if (!(N < 0 || N >= C))
            for (let R = 0; R < l; R++) {
              const Y = h + R - c;
              if (Y < 0 || Y >= g)
                continue;
              const y = I[N * g + Y], X = s[V * l + R] * G[Math.abs(y - W)];
              B += y * X, w += X;
            }
        }
        const n = m[t] = Math.round(B / w);
        e[n]++;
      }
    return [m, e];
  }
  static #Z(I) {
    const g = new Uint32Array(256);
    for (const C of I)
      g[C]++;
    return g;
  }
  static #o(I) {
    const g = I.length, C = new Uint8ClampedArray(g >> 2);
    let A = -1 / 0, i = 1 / 0;
    for (let s = 0, d = C.length; s < d; s++) {
      const c = C[s] = I[s << 2];
      A = Math.max(A, c), i = Math.min(i, c);
    }
    const l = 255 / (A - i);
    for (let s = 0, d = C.length; s < d; s++)
      C[s] = (C[s] - i) * l;
    return C;
  }
  static #b(I) {
    let g, C = -1 / 0, A = -1 / 0;
    const i = I.findIndex((d) => d !== 0);
    let l = i, s = i;
    for (g = i; g < 256; g++) {
      const d = I[g];
      d > C && (g - l > A && (A = g - l, s = g - 1), C = d, l = g);
    }
    for (g = s - 1; g >= 0 && !(I[g] > I[g + 1]); g--)
      ;
    return g;
  }
  static #m(I) {
    const g = I, {
      width: C,
      height: A
    } = I, {
      maxDim: i
    } = this.#I;
    let l = C, s = A;
    if (C > i || A > i) {
      let o = C, m = A, e = Math.log2(Math.max(C, A) / i);
      const a = Math.floor(e);
      e = e === a ? a - 1 : a;
      for (let t = 0; t < e; t++) {
        l = Math.ceil(o / 2), s = Math.ceil(m / 2);
        const W = new OffscreenCanvas(l, s);
        W.getContext("2d").drawImage(I, 0, 0, o, m, 0, 0, l, s), o = l, m = s, I !== g && I.close(), I = W.transferToImageBitmap();
      }
      const h = Math.min(i / l, i / s);
      l = Math.round(l * h), s = Math.round(s * h);
    }
    const c = new OffscreenCanvas(l, s).getContext("2d", {
      willReadFrequently: !0
    });
    c.fillStyle = "white", c.fillRect(0, 0, l, s), c.filter = "grayscale(1)", c.drawImage(I, 0, 0, I.width, I.height, 0, 0, l, s);
    const G = c.getImageData(0, 0, l, s).data;
    return [this.#o(G), l, s];
  }
  static extractContoursFromText(I, {
    fontFamily: g,
    fontStyle: C,
    fontWeight: A
  }, i, l, s, d) {
    let c = new OffscreenCanvas(1, 1), G = c.getContext("2d", {
      alpha: !1
    });
    const b = 200, o = G.font = `${C} ${A} ${b}px ${g}`, {
      actualBoundingBoxLeft: m,
      actualBoundingBoxRight: e,
      actualBoundingBoxAscent: a,
      actualBoundingBoxDescent: h,
      fontBoundingBoxAscent: t,
      fontBoundingBoxDescent: W,
      width: B
    } = G.measureText(I), w = 1.5, n = Math.ceil(Math.max(Math.abs(m) + Math.abs(e) || 0, B) * w), V = Math.ceil(Math.max(Math.abs(a) + Math.abs(h) || b, Math.abs(t) + Math.abs(W) || b) * w);
    c = new OffscreenCanvas(n, V), G = c.getContext("2d", {
      alpha: !0,
      willReadFrequently: !0
    }), G.font = o, G.filter = "grayscale(1)", G.fillStyle = "white", G.fillRect(0, 0, n, V), G.fillStyle = "black", G.fillText(I, n * (w - 1) / 2, V * (3 - w) / 2);
    const N = this.#o(G.getImageData(0, 0, n, V).data), R = this.#Z(N), Y = this.#b(R), y = this.#l(N, n, V, Y);
    return this.processDrawnLines({
      lines: {
        curves: y,
        width: n,
        height: V
      },
      pageWidth: i,
      pageHeight: l,
      rotation: s,
      innerMargin: d,
      mustSmooth: !0,
      areContours: !0
    });
  }
  static process(I, g, C, A, i) {
    const [l, s, d] = this.#m(I), [c, G] = this.#c(l, s, d, Math.hypot(s, d) * this.#I.sigmaSFactor, this.#I.sigmaR, this.#I.kernelSize), b = this.#b(G), o = this.#l(c, s, d, b);
    return this.processDrawnLines({
      lines: {
        curves: o,
        width: s,
        height: d
      },
      pageWidth: g,
      pageHeight: C,
      rotation: A,
      innerMargin: i,
      mustSmooth: !0,
      areContours: !0
    });
  }
  static processDrawnLines({
    lines: I,
    pageWidth: g,
    pageHeight: C,
    rotation: A,
    innerMargin: i,
    mustSmooth: l,
    areContours: s
  }) {
    A % 180 !== 0 && ([g, C] = [C, g]);
    const {
      curves: d,
      width: c,
      height: G
    } = I, b = I.thickness ?? 0, o = [], m = Math.min(g / c, C / G), e = m / g, a = m / C, h = [];
    for (const {
      points: W
    } of d) {
      const B = l ? this.#d(W) : W;
      if (!B)
        continue;
      h.push(B);
      const w = B.length, n = new Float32Array(w), V = new Float32Array(3 * (w === 2 ? 2 : w - 2));
      if (o.push({
        line: V,
        points: n
      }), w === 2) {
        n[0] = B[0] * e, n[1] = B[1] * a, V.set([NaN, NaN, NaN, NaN, n[0], n[1]], 0);
        continue;
      }
      let [N, R, Y, y] = B;
      N *= e, R *= a, Y *= e, y *= a, n.set([N, R, Y, y], 0), V.set([NaN, NaN, NaN, NaN, N, R], 0);
      for (let X = 4; X < w; X += 2) {
        const K = n[X] = B[X] * e, S = n[X + 1] = B[X + 1] * a;
        V.set(H.createBezierPoints(N, R, Y, y, K, S), (X - 2) * 3), [N, R, Y, y] = [Y, y, K, S];
      }
    }
    if (o.length === 0)
      return null;
    const t = s ? new WA() : new iC();
    return t.build(o, g, C, 1, A, s ? 0 : b, i), {
      outline: t,
      newCurves: h,
      areContours: s,
      thickness: b,
      width: c,
      height: G
    };
  }
  static async compressSignature({
    outlines: I,
    areContours: g,
    thickness: C,
    width: A,
    height: i
  }) {
    let l = 1 / 0, s = -1 / 0, d = 0;
    for (const B of I) {
      d += B.length;
      for (let w = 2, n = B.length; w < n; w++) {
        const V = B[w] - B[w - 2];
        l = Math.min(l, V), s = Math.max(s, V);
      }
    }
    let c;
    l >= -128 && s <= 127 ? c = Int8Array : l >= -32768 && s <= 32767 ? c = Int16Array : c = Int32Array;
    const G = I.length, b = aC + zg * G, o = new Uint32Array(b);
    let m = 0;
    o[m++] = b * Uint32Array.BYTES_PER_ELEMENT + (d - 2 * G) * c.BYTES_PER_ELEMENT, o[m++] = 0, o[m++] = A, o[m++] = i, o[m++] = g ? 0 : 1, o[m++] = Math.max(0, Math.floor(C ?? 0)), o[m++] = G, o[m++] = c.BYTES_PER_ELEMENT;
    for (const B of I)
      o[m++] = B.length - 2, o[m++] = B[0], o[m++] = B[1];
    const e = new CompressionStream("deflate-raw"), a = e.writable.getWriter();
    await a.ready, a.write(o);
    const h = c.prototype.constructor;
    for (const B of I) {
      const w = new h(B.length - 2);
      for (let n = 2, V = B.length; n < V; n++)
        w[n - 2] = B[n] - B[n - 2];
      a.write(w);
    }
    a.close();
    const t = await new Response(e.readable).arrayBuffer(), W = new Uint8Array(t);
    return ll(W);
  }
  static async decompressSignature(I) {
    try {
      const g = Ws(I), {
        readable: C,
        writable: A
      } = new DecompressionStream("deflate-raw"), i = A.getWriter();
      await i.ready, i.write(g).then(async () => {
        await i.ready, await i.close();
      }).catch(() => {
      });
      let l = null, s = 0;
      for await (const B of C)
        l ||= new Uint8Array(new Uint32Array(B.buffer, 0, 4)[0]), l.set(B, s), s += B.length;
      const d = new Uint32Array(l.buffer, 0, l.length >> 2), c = d[1];
      if (c !== 0)
        throw new Error(`Invalid version: ${c}`);
      const G = d[2], b = d[3], o = d[4] === 0, m = d[5], e = d[6], a = d[7], h = [], t = (aC + zg * e) * Uint32Array.BYTES_PER_ELEMENT;
      let W;
      switch (a) {
        case Int8Array.BYTES_PER_ELEMENT:
          W = new Int8Array(l.buffer, t);
          break;
        case Int16Array.BYTES_PER_ELEMENT:
          W = new Int16Array(l.buffer, t);
          break;
        case Int32Array.BYTES_PER_ELEMENT:
          W = new Int32Array(l.buffer, t);
          break;
      }
      s = 0;
      for (let B = 0; B < e; B++) {
        const w = d[zg * B + aC], n = new Float32Array(w + 2);
        h.push(n);
        for (let V = 0; V < zg - 1; V++)
          n[V] = d[zg * B + aC + V + 1];
        for (let V = 0; V < w; V++)
          n[V + 2] = n[V] + W[s++];
      }
      return {
        areContours: o,
        thickness: m,
        outlines: h,
        width: G,
        height: b
      };
    } catch (g) {
      return L(`decompressSignature: ${g}`), null;
    }
  }
};
class rA extends Ll {
  constructor() {
    super(), super.updateProperties({
      fill: F._defaultLineColor,
      "stroke-width": 0
    });
  }
  clone() {
    const I = new rA();
    return I.updateAll(this), I;
  }
}
class TA extends JC {
  constructor(I) {
    super(I), super.updateProperties({
      stroke: F._defaultLineColor,
      "stroke-width": 1
    });
  }
  clone() {
    const I = new TA(this._viewParameters);
    return I.updateAll(this), I;
  }
}
class pI extends J {
  #I = !1;
  #g = null;
  #A = null;
  #C = null;
  static _type = "signature";
  static _editorType = k.SIGNATURE;
  static _defaultDrawingOptions = null;
  constructor(I) {
    super({
      ...I,
      mustBeCommitted: !0,
      name: "signatureEditor"
    }), this._willKeepAspectRatio = !0, this.#A = I.signatureData || null, this.#g = null, this.defaultL10nId = "pdfjs-editor-signature-editor1";
  }
  static initialize(I, g) {
    F.initialize(I, g), this._defaultDrawingOptions = new rA(), this._defaultDrawnSignatureOptions = new TA(g.viewParameters);
  }
  static getDefaultDrawingOptions(I) {
    const g = this._defaultDrawingOptions.clone();
    return g.updateProperties(I), g;
  }
  static get supportMultipleDrawings() {
    return !1;
  }
  static get typesMap() {
    return T(this, "typesMap", /* @__PURE__ */ new Map());
  }
  static get isDrawer() {
    return !1;
  }
  get telemetryFinalData() {
    return {
      type: "signature",
      hasDescription: !!this.#g
    };
  }
  static computeTelemetryFinalData(I) {
    const g = I.get("hasDescription");
    return {
      hasAltText: g.get(!0) ?? 0,
      hasNoAltText: g.get(!1) ?? 0
    };
  }
  get isResizable() {
    return !0;
  }
  onScaleChanging() {
    this._drawId !== null && super.onScaleChanging();
  }
  render() {
    if (this.div)
      return this.div;
    let I, g;
    const {
      _isCopy: C
    } = this;
    if (C && (this._isCopy = !1, I = this.x, g = this.y), super.render(), this._drawId === null)
      if (this.#A) {
        const {
          lines: A,
          mustSmooth: i,
          areContours: l,
          description: s,
          uuid: d,
          heightInPage: c
        } = this.#A, {
          rawDims: {
            pageWidth: G,
            pageHeight: b
          },
          rotation: o
        } = this.parent.viewport, m = Bg.processDrawnLines({
          lines: A,
          pageWidth: G,
          pageHeight: b,
          rotation: o,
          innerMargin: pI._INNER_MARGIN,
          mustSmooth: i,
          areContours: l
        });
        this.addSignature(m, c, s, d);
      } else
        this.div.setAttribute("data-l10n-args", JSON.stringify({
          description: ""
        })), this.div.hidden = !0, this._uiManager.getSignature(this);
    else
      this.div.setAttribute("data-l10n-args", JSON.stringify({
        description: this.#g || ""
      }));
    return C && (this._isCopy = !0, this._moveAfterPaste(I, g)), this.div;
  }
  setUuid(I) {
    this.#C = I, this.addEditToolbar();
  }
  getUuid() {
    return this.#C;
  }
  get description() {
    return this.#g;
  }
  set description(I) {
    this.#g = I, this.div && (this.div.setAttribute("data-l10n-args", JSON.stringify({
      description: I
    })), super.addEditToolbar().then((g) => {
      g?.updateEditSignatureButton(I);
    }));
  }
  getSignaturePreview() {
    const {
      newCurves: I,
      areContours: g,
      thickness: C,
      width: A,
      height: i
    } = this.#A, l = Math.max(A, i), s = Bg.processDrawnLines({
      lines: {
        curves: I.map((d) => ({
          points: d
        })),
        thickness: C,
        width: A,
        height: i
      },
      pageWidth: l,
      pageHeight: l,
      rotation: 0,
      innerMargin: 0,
      mustSmooth: !1,
      areContours: g
    });
    return {
      areContours: g,
      outline: s.outline
    };
  }
  get toolbarButtons() {
    return this._uiManager.signatureManager ? [["editSignature", this._uiManager.signatureManager]] : super.toolbarButtons;
  }
  addSignature(I, g, C, A) {
    const {
      x: i,
      y: l
    } = this, {
      outline: s
    } = this.#A = I;
    this.#I = s instanceof WA, this.description = C;
    let d;
    this.#I ? d = pI.getDefaultDrawingOptions() : (d = pI._defaultDrawnSignatureOptions.clone(), d.updateProperties({
      "stroke-width": s.thickness
    })), this._addOutlines({
      drawOutlines: s,
      drawingOptions: d
    });
    const [, c] = this.pageDimensions;
    let G = g / c;
    G = G >= 1 ? 0.5 : G, this.width *= G / this.height, this.width >= 1 && (G *= 0.9 / this.width, this.width = 0.9), this.height = G, this.setDims(), this.x = i, this.y = l, this.center(), this._onResized(), this.onScaleChanging(), this.rotate(), this._uiManager.addToAnnotationStorage(this), this.setUuid(A), this._reportTelemetry({
      action: "pdfjs.signature.inserted",
      data: {
        hasBeenSaved: !!A,
        hasDescription: !!C
      }
    }), this.div.hidden = !1;
  }
  getFromImage(I) {
    const {
      rawDims: {
        pageWidth: g,
        pageHeight: C
      },
      rotation: A
    } = this.parent.viewport;
    return Bg.process(I, g, C, A, pI._INNER_MARGIN);
  }
  getFromText(I, g) {
    const {
      rawDims: {
        pageWidth: C,
        pageHeight: A
      },
      rotation: i
    } = this.parent.viewport;
    return Bg.extractContoursFromText(I, g, C, A, i, pI._INNER_MARGIN);
  }
  getDrawnSignature(I) {
    const {
      rawDims: {
        pageWidth: g,
        pageHeight: C
      },
      rotation: A
    } = this.parent.viewport;
    return Bg.processDrawnLines({
      lines: I,
      pageWidth: g,
      pageHeight: C,
      rotation: A,
      innerMargin: pI._INNER_MARGIN,
      mustSmooth: !1,
      areContours: !1
    });
  }
  createDrawingOptions({
    areContours: I,
    thickness: g
  }) {
    I ? this._drawingOptions = pI.getDefaultDrawingOptions() : (this._drawingOptions = pI._defaultDrawnSignatureOptions.clone(), this._drawingOptions.updateProperties({
      "stroke-width": g
    }));
  }
  serialize(I = !1) {
    if (this.isEmpty())
      return null;
    const {
      lines: g,
      points: C
    } = this.serializeDraw(I), {
      _drawingOptions: {
        "stroke-width": A
      }
    } = this, i = Object.assign(super.serialize(I), {
      isSignature: !0,
      areContours: this.#I,
      color: [0, 0, 0],
      thickness: this.#I ? 0 : A
    });
    return this.addComment(i), I ? (i.paths = {
      lines: g,
      points: C
    }, i.uuid = this.#C, i.isCopy = !0) : i.lines = g, this.#g && (i.accessibilityData = {
      type: "Figure",
      alt: this.#g
    }), i;
  }
  static deserializeDraw(I, g, C, A, i, l) {
    return l.areContours ? WA.deserialize(I, g, C, A, i, l) : iC.deserialize(I, g, C, A, i, l);
  }
  static async deserialize(I, g, C) {
    const A = await super.deserialize(I, g, C);
    return A.#I = I.areContours, A.description = I.accessibilityData?.alt || "", A.#C = I.uuid, A;
  }
}
class iZ extends F {
  #I = null;
  #g = null;
  #A = null;
  #C = null;
  #i = null;
  #l = "";
  #s = null;
  #d = !1;
  #c = null;
  #Z = !1;
  #o = !1;
  static _type = "stamp";
  static _editorType = k.STAMP;
  constructor(I) {
    super({
      ...I,
      name: "stampEditor"
    }), this.#C = I.bitmapUrl, this.#i = I.bitmapFile, this.defaultL10nId = "pdfjs-editor-stamp-editor";
  }
  static initialize(I, g) {
    F.initialize(I, g);
  }
  static isHandlingMimeForPasting(I) {
    return ZA.includes(I);
  }
  static paste(I, g) {
    g.pasteEditor({
      mode: k.STAMP
    }, {
      bitmapFile: I.getAsFile()
    });
  }
  altTextFinish() {
    this._uiManager.useNewAltTextFlow && (this.div.hidden = !1), super.altTextFinish();
  }
  get telemetryFinalData() {
    return {
      type: "stamp",
      hasAltText: !!this.altTextData?.altText
    };
  }
  static computeTelemetryFinalData(I) {
    const g = I.get("hasAltText");
    return {
      hasAltText: g.get(!0) ?? 0,
      hasNoAltText: g.get(!1) ?? 0
    };
  }
  #b(I, g = !1) {
    if (!I) {
      this.remove();
      return;
    }
    this.#I = I.bitmap, g || (this.#g = I.id, this.#Z = I.isSvg), I.file && (this.#l = I.file.name), this.#a();
  }
  #m() {
    if (this.#A = null, this._uiManager.enableWaiting(!1), !!this.#s) {
      if (this._uiManager.useNewAltTextWhenAddingImage && this._uiManager.useNewAltTextFlow && this.#I) {
        this.addEditToolbar().then(() => {
          this._editToolbar.hide(), this._uiManager.editAltText(this, !0);
        });
        return;
      }
      if (!this._uiManager.useNewAltTextWhenAddingImage && this._uiManager.useNewAltTextFlow && this.#I) {
        this._reportTelemetry({
          action: "pdfjs.image.image_added",
          data: {
            alt_text_modal: !1,
            alt_text_type: "empty"
          }
        });
        try {
          this.mlGuessAltText();
        } catch {
        }
      }
      this.div.focus();
    }
  }
  async mlGuessAltText(I = null, g = !0) {
    if (this.hasAltTextData())
      return null;
    const {
      mlManager: C
    } = this._uiManager;
    if (!C)
      throw new Error("No ML.");
    if (!await C.isEnabledFor("altText"))
      throw new Error("ML isn't enabled for alt text.");
    const {
      data: A,
      width: i,
      height: l
    } = I || this.copyCanvas(null, null, !0).imageData, s = await C.guess({
      name: "altText",
      request: {
        data: A,
        width: i,
        height: l,
        channels: A.length / (i * l)
      }
    });
    if (!s)
      throw new Error("No response from the AI service.");
    if (s.error)
      throw new Error("Error from the AI service.");
    if (s.cancel)
      return null;
    if (!s.output)
      throw new Error("No valid response from the AI service.");
    const d = s.output;
    return await this.setGuessedAltText(d), g && !this.hasAltTextData() && (this.altTextData = {
      alt: d,
      decorative: !1
    }), d;
  }
  #t() {
    if (this.#g) {
      this._uiManager.enableWaiting(!0), this._uiManager.imageManager.getFromId(this.#g).then((C) => this.#b(C, !0)).finally(() => this.#m());
      return;
    }
    if (this.#C) {
      const C = this.#C;
      this.#C = null, this._uiManager.enableWaiting(!0), this.#A = this._uiManager.imageManager.getFromUrl(C).then((A) => this.#b(A)).finally(() => this.#m());
      return;
    }
    if (this.#i) {
      const C = this.#i;
      this.#i = null, this._uiManager.enableWaiting(!0), this.#A = this._uiManager.imageManager.getFromFile(C).then((A) => this.#b(A)).finally(() => this.#m());
      return;
    }
    const I = document.createElement("input");
    I.type = "file", I.accept = ZA.join(",");
    const g = this._uiManager._signal;
    this.#A = new Promise((C) => {
      I.addEventListener("change", async () => {
        if (!I.files || I.files.length === 0)
          this.remove();
        else {
          this._uiManager.enableWaiting(!0);
          const A = await this._uiManager.imageManager.getFromFile(I.files[0]);
          this._reportTelemetry({
            action: "pdfjs.image.image_selected",
            data: {
              alt_text_modal: this._uiManager.useNewAltTextFlow
            }
          }), this.#b(A);
        }
        C();
      }, {
        signal: g
      }), I.addEventListener("cancel", () => {
        this.remove(), C();
      }, {
        signal: g
      });
    }).finally(() => this.#m()), I.click();
  }
  remove() {
    this.#g && (this.#I = null, this._uiManager.imageManager.deleteId(this.#g), this.#s?.remove(), this.#s = null, this.#c && (clearTimeout(this.#c), this.#c = null)), super.remove();
  }
  rebuild() {
    if (!this.parent) {
      this.#g && this.#t();
      return;
    }
    super.rebuild(), this.div !== null && (this.#g && this.#s === null && this.#t(), this.isAttachedToDOM || this.parent.add(this));
  }
  onceAdded(I) {
    this._isDraggable = !0, I && this.div.focus();
  }
  isEmpty() {
    return !(this.#A || this.#I || this.#C || this.#i || this.#g || this.#d);
  }
  get toolbarButtons() {
    return [["altText", this.createAltText()]];
  }
  get isResizable() {
    return !0;
  }
  render() {
    if (this.div)
      return this.div;
    let I, g;
    return this._isCopy && (I = this.x, g = this.y), super.render(), this.div.hidden = !0, this.createAltText(), this.#d || (this.#I ? this.#a() : this.#t()), this._isCopy && this._moveAfterPaste(I, g), this._uiManager.addShouldRescale(this), this.div;
  }
  setCanvas(I, g) {
    const {
      id: C,
      bitmap: A
    } = this._uiManager.imageManager.getFromCanvas(I, g);
    g.remove(), C && this._uiManager.imageManager.isValidId(C) && (this.#g = C, A && (this.#I = A), this.#d = !1, this.#a());
  }
  _onResized() {
    this.onScaleChanging();
  }
  onScaleChanging() {
    if (!this.parent)
      return;
    this.#c !== null && clearTimeout(this.#c);
    const I = 200;
    this.#c = setTimeout(() => {
      this.#c = null, this.#e();
    }, I);
  }
  #a() {
    const {
      div: I
    } = this;
    let {
      width: g,
      height: C
    } = this.#I;
    const [A, i] = this.pageDimensions, l = 0.75;
    if (this.width)
      g = this.width * A, C = this.height * i;
    else if (g > l * A || C > l * i) {
      const d = Math.min(l * A / g, l * i / C);
      g *= d, C *= d;
    }
    this._uiManager.enableWaiting(!1);
    const s = this.#s = document.createElement("canvas");
    s.setAttribute("role", "img"), this.addContainer(s), this.width = g / A, this.height = C / i, this.setDims(), this._initialOptions?.isCentered ? this.center() : this.fixAndSetPosition(), this._initialOptions = null, (!this._uiManager.useNewAltTextWhenAddingImage || !this._uiManager.useNewAltTextFlow || this.annotationElementId) && (I.hidden = !1), this.#e(), this.#o || (this.parent.addUndoableEditor(this), this.#o = !0), this._reportTelemetry({
      action: "inserted_image"
    }), this.#l && this.div.setAttribute("aria-description", this.#l), this.annotationElementId || this._uiManager.a11yAlert("pdfjs-editor-stamp-added-alert");
  }
  copyCanvas(I, g, C = !1) {
    I || (I = 224);
    const {
      width: A,
      height: i
    } = this.#I, l = new Gg();
    let s = this.#I, d = A, c = i, G = null;
    if (g) {
      if (A > g || i > g) {
        const V = Math.min(g / A, g / i);
        d = Math.floor(A * V), c = Math.floor(i * V);
      }
      G = document.createElement("canvas");
      const o = G.width = Math.ceil(d * l.sx), m = G.height = Math.ceil(c * l.sy);
      this.#Z || (s = this.#G(o, m));
      const e = G.getContext("2d");
      e.filter = this._uiManager.hcmFilter;
      let a = "white", h = "#cfcfd8";
      this._uiManager.hcmFilter !== "none" ? h = "black" : us.isDarkMode && (a = "#8f8f9d", h = "#42414d");
      const t = 15, W = t * l.sx, B = t * l.sy, w = new OffscreenCanvas(W * 2, B * 2), n = w.getContext("2d");
      n.fillStyle = a, n.fillRect(0, 0, W * 2, B * 2), n.fillStyle = h, n.fillRect(0, 0, W, B), n.fillRect(W, B, W, B), e.fillStyle = e.createPattern(w, "repeat"), e.fillRect(0, 0, o, m), e.drawImage(s, 0, 0, s.width, s.height, 0, 0, o, m);
    }
    let b = null;
    if (C) {
      let o, m;
      if (l.symmetric && s.width < I && s.height < I)
        o = s.width, m = s.height;
      else if (s = this.#I, A > I || i > I) {
        const h = Math.min(I / A, I / i);
        o = Math.floor(A * h), m = Math.floor(i * h), this.#Z || (s = this.#G(o, m));
      }
      const a = new OffscreenCanvas(o, m).getContext("2d", {
        willReadFrequently: !0
      });
      a.drawImage(s, 0, 0, s.width, s.height, 0, 0, o, m), b = {
        width: o,
        height: m,
        data: a.getImageData(0, 0, o, m).data
      };
    }
    return {
      canvas: G,
      width: d,
      height: c,
      imageData: b
    };
  }
  #G(I, g) {
    const {
      width: C,
      height: A
    } = this.#I;
    let i = C, l = A, s = this.#I;
    for (; i > 2 * I || l > 2 * g; ) {
      const d = i, c = l;
      i > 2 * I && (i = i >= 16384 ? Math.floor(i / 2) - 1 : Math.ceil(i / 2)), l > 2 * g && (l = l >= 16384 ? Math.floor(l / 2) - 1 : Math.ceil(l / 2));
      const G = new OffscreenCanvas(i, l);
      G.getContext("2d").drawImage(s, 0, 0, d, c, 0, 0, i, l), s = G.transferToImageBitmap();
    }
    return s;
  }
  #e() {
    const [I, g] = this.parentDimensions, {
      width: C,
      height: A
    } = this, i = new Gg(), l = Math.ceil(C * I * i.sx), s = Math.ceil(A * g * i.sy), d = this.#s;
    if (!d || d.width === l && d.height === s)
      return;
    d.width = l, d.height = s;
    const c = this.#Z ? this.#I : this.#G(l, s), G = d.getContext("2d");
    G.filter = this._uiManager.hcmFilter, G.drawImage(c, 0, 0, c.width, c.height, 0, 0, l, s);
  }
  #B(I) {
    if (I) {
      if (this.#Z) {
        const A = this._uiManager.imageManager.getSvgUrl(this.#g);
        if (A)
          return A;
      }
      const g = document.createElement("canvas");
      return {
        width: g.width,
        height: g.height
      } = this.#I, g.getContext("2d").drawImage(this.#I, 0, 0), g.toDataURL();
    }
    if (this.#Z) {
      const [g, C] = this.pageDimensions, A = Math.round(this.width * g * Hg.PDF_TO_CSS_UNITS), i = Math.round(this.height * C * Hg.PDF_TO_CSS_UNITS), l = new OffscreenCanvas(A, i);
      return l.getContext("2d").drawImage(this.#I, 0, 0, this.#I.width, this.#I.height, 0, 0, A, i), l.transferToImageBitmap();
    }
    return structuredClone(this.#I);
  }
  static async deserialize(I, g, C) {
    let A = null, i = !1;
    if (I instanceof pl) {
      const {
        data: {
          rect: a,
          rotation: h,
          id: t,
          structParent: W,
          popupRef: B,
          richText: w,
          contentsObj: n,
          creationDate: V,
          modificationDate: N
        },
        container: R,
        parent: {
          page: {
            pageNumber: Y
          }
        },
        canvas: y
      } = I;
      let X, K;
      y ? (delete I.canvas, {
        id: X,
        bitmap: K
      } = C.imageManager.getFromCanvas(R.id, y), y.remove()) : (i = !0, I._hasNoCanvas = !0);
      const S = (await g._structTree.getAriaAttributes(`${yA}${t}`))?.get("aria-label") || "";
      A = I = {
        annotationType: k.STAMP,
        bitmapId: X,
        bitmap: K,
        pageIndex: Y - 1,
        rect: a.slice(0),
        rotation: h,
        annotationElementId: t,
        id: t,
        deleted: !1,
        accessibilityData: {
          decorative: !1,
          altText: S
        },
        isSvg: !1,
        structParent: W,
        popupRef: B,
        richText: w,
        comment: n?.str || null,
        creationDate: V,
        modificationDate: N
      };
    }
    const l = await super.deserialize(I, g, C), {
      rect: s,
      bitmap: d,
      bitmapUrl: c,
      bitmapId: G,
      isSvg: b,
      accessibilityData: o
    } = I;
    i ? (C.addMissingCanvas(I.id, l), l.#d = !0) : G && C.imageManager.isValidId(G) ? (l.#g = G, d && (l.#I = d)) : l.#C = c, l.#Z = b;
    const [m, e] = l.pageDimensions;
    return l.width = (s[2] - s[0]) / m, l.height = (s[3] - s[1]) / e, o && (l.altTextData = o), l._initialData = A, I.comment && l.setCommentData(I), l.#o = !!A, l;
  }
  serialize(I = !1, g = null) {
    if (this.isEmpty())
      return null;
    if (this.deleted)
      return this.serializeDeleted();
    const C = Object.assign(super.serialize(I), {
      bitmapId: this.#g,
      isSvg: this.#Z
    });
    if (this.addComment(C), I)
      return C.bitmapUrl = this.#B(!0), C.accessibilityData = this.serializeAltText(!0), C.isCopy = !0, C;
    const {
      decorative: A,
      altText: i
    } = this.serializeAltText(!1);
    if (!A && i && (C.accessibilityData = {
      type: "Figure",
      alt: i
    }), this.annotationElementId) {
      const s = this.#W(C);
      return s.isSame ? null : (s.isSameAltText ? delete C.accessibilityData : C.accessibilityData.structParent = this._initialData.structParent ?? -1, C.id = this.annotationElementId, delete C.bitmapId, C);
    }
    if (g === null)
      return C;
    g.stamps ||= /* @__PURE__ */ new Map();
    const l = this.#Z ? (C.rect[2] - C.rect[0]) * (C.rect[3] - C.rect[1]) : null;
    if (!g.stamps.has(this.#g))
      g.stamps.set(this.#g, {
        area: l,
        serialized: C
      }), C.bitmap = this.#B(!1);
    else if (this.#Z) {
      const s = g.stamps.get(this.#g);
      l > s.area && (s.area = l, s.serialized.bitmap.close(), s.serialized.bitmap = this.#B(!1));
    }
    return C;
  }
  #W(I) {
    const {
      pageIndex: g,
      accessibilityData: {
        altText: C
      }
    } = this._initialData, A = I.pageIndex === g, i = (I.accessibilityData?.alt || "") === C;
    return {
      isSame: !this.hasEditedComment && !this._hasBeenMoved && !this._hasBeenResized && A && i,
      isSameAltText: i
    };
  }
  renderAnnotationElement(I) {
    return this.deleted ? (I.hide(), null) : (I.updateEdited({
      rect: this.getPDFRect(),
      popup: this.comment
    }), null);
  }
}
let lZ = class PI {
  #I;
  #g = !1;
  #A = null;
  #C = null;
  #i = null;
  #l = /* @__PURE__ */ new Map();
  #s = !1;
  #d = !1;
  #c = !1;
  #Z = null;
  #o = null;
  #b = null;
  #m = null;
  #t = null;
  #a = -1;
  #G;
  static _initialized = !1;
  static #e = new Map([dI, kA, iZ, gI, pI].map((I) => [I._editorType, I]));
  constructor({
    uiManager: I,
    pageIndex: g,
    div: C,
    structTreeLayer: A,
    accessibilityManager: i,
    annotationLayer: l,
    drawLayer: s,
    textLayer: d,
    viewport: c,
    l10n: G
  }) {
    const b = [...PI.#e.values()];
    if (!PI._initialized) {
      PI._initialized = !0;
      for (const o of b)
        o.initialize(G, I);
    }
    I.registerEditorTypes(b), this.#G = I, this.pageIndex = g, this.div = C, this.#I = i, this.#A = l, this.viewport = c, this.#b = d, this.drawLayer = s, this._structTree = A, this.#G.addLayer(this);
  }
  get isEmpty() {
    return this.#l.size === 0;
  }
  get isInvisible() {
    return this.isEmpty && this.#G.getMode() === k.NONE;
  }
  updateToolbar(I) {
    this.#G.updateToolbar(I);
  }
  updateMode(I = this.#G.getMode()) {
    switch (this.#n(), I) {
      case k.NONE:
        this.div.classList.toggle("nonEditing", !0), this.disableTextSelection(), this.togglePointerEvents(!1), this.toggleAnnotationLayerPointerEvents(!0), this.disableClick();
        return;
      case k.INK:
        this.disableTextSelection(), this.togglePointerEvents(!0), this.enableClick();
        break;
      case k.HIGHLIGHT:
        this.enableTextSelection(), this.togglePointerEvents(!1), this.disableClick();
        break;
      default:
        this.disableTextSelection(), this.togglePointerEvents(!0), this.enableClick();
    }
    this.toggleAnnotationLayerPointerEvents(!1);
    const {
      classList: g
    } = this.div;
    if (g.toggle("nonEditing", !1), I === k.POPUP)
      g.toggle("commentEditing", !0);
    else {
      g.toggle("commentEditing", !1);
      for (const C of PI.#e.values())
        g.toggle(`${C._type}Editing`, I === C._editorType);
    }
    this.div.hidden = !1;
  }
  hasTextLayer(I) {
    return I === this.#b?.div;
  }
  setEditingState(I) {
    this.#G.setEditingState(I);
  }
  addCommands(I) {
    this.#G.addCommands(I);
  }
  cleanUndoStack(I) {
    this.#G.cleanUndoStack(I);
  }
  toggleDrawing(I = !1) {
    this.div.classList.toggle("drawing", !I);
  }
  togglePointerEvents(I = !1) {
    this.div.classList.toggle("disabled", !I);
  }
  toggleAnnotationLayerPointerEvents(I = !1) {
    this.#A?.div.classList.toggle("disabled", !I);
  }
  get #B() {
    return this.#l.size !== 0 ? this.#l.values() : this.#G.getEditors(this.pageIndex);
  }
  async enable() {
    this.#c = !0, this.div.tabIndex = 0, this.togglePointerEvents(!0), this.div.classList.toggle("nonEditing", !1), this.#t?.abort(), this.#t = null;
    const I = /* @__PURE__ */ new Set();
    for (const C of this.#B)
      C.enableEditing(), C.show(!0), C.annotationElementId && (this.#G.removeChangedExistingAnnotation(C), I.add(C.annotationElementId));
    const g = this.#A;
    if (g)
      for (const C of g.getEditableAnnotations()) {
        if (C.hide(), this.#G.isDeletedAnnotationElement(C.data.id) || I.has(C.data.id))
          continue;
        const A = await this.deserialize(C);
        A && (this.addOrRebuild(A), A.enableEditing());
      }
    this.#c = !1, this.#G._eventBus.dispatch("editorsrendered", {
      source: this,
      pageNumber: this.pageIndex + 1
    });
  }
  disable() {
    if (this.#d = !0, this.div.tabIndex = -1, this.togglePointerEvents(!1), this.div.classList.toggle("nonEditing", !0), this.#b && !this.#t) {
      this.#t = new AbortController();
      const C = this.#G.combinedSignal(this.#t);
      this.#b.div.addEventListener("pointerdown", (A) => {
        const {
          clientX: l,
          clientY: s,
          timeStamp: d
        } = A, c = this.#a;
        if (d - c > 500) {
          this.#a = d;
          return;
        }
        this.#a = -1;
        const {
          classList: G
        } = this.div;
        G.toggle("getElements", !0);
        const b = document.elementsFromPoint(l, s);
        if (G.toggle("getElements", !1), !this.div.contains(b[0]))
          return;
        let o;
        const m = new RegExp(`^${Og}[0-9]+$`);
        for (const a of b)
          if (m.test(a.id)) {
            o = a.id;
            break;
          }
        if (!o)
          return;
        const e = this.#l.get(o);
        e?.annotationElementId === null && (A.stopPropagation(), A.preventDefault(), e.dblclick(A));
      }, {
        signal: C,
        capture: !0
      });
    }
    const I = this.#A;
    if (I) {
      const C = /* @__PURE__ */ new Map(), A = /* @__PURE__ */ new Map();
      for (const l of this.#B) {
        if (l.disableEditing(), !l.annotationElementId) {
          l.updateFakeAnnotationElement(I);
          continue;
        }
        if (l.serialize() !== null) {
          C.set(l.annotationElementId, l);
          continue;
        } else
          A.set(l.annotationElementId, l);
        this.getEditableAnnotation(l.annotationElementId)?.show(), l.remove();
      }
      const i = I.getEditableAnnotations();
      for (const l of i) {
        const {
          id: s
        } = l.data;
        if (this.#G.isDeletedAnnotationElement(s)) {
          l.updateEdited({
            deleted: !0
          });
          continue;
        }
        let d = A.get(s);
        if (d) {
          d.resetAnnotationElement(l), d.show(!1), l.show();
          continue;
        }
        d = C.get(s), d && (this.#G.addChangedExistingAnnotation(d), d.renderAnnotationElement(l) && d.show(!1)), l.show();
      }
    }
    this.#n(), this.isEmpty && (this.div.hidden = !0);
    const {
      classList: g
    } = this.div;
    for (const C of PI.#e.values())
      g.remove(`${C._type}Editing`);
    this.disableTextSelection(), this.toggleAnnotationLayerPointerEvents(!0), this.#d = !1;
  }
  getEditableAnnotation(I) {
    return this.#A?.getEditableAnnotation(I) || null;
  }
  setActiveEditor(I) {
    this.#G.getActive() !== I && this.#G.setActiveEditor(I);
  }
  enableTextSelection() {
    if (this.div.tabIndex = -1, this.#b?.div && !this.#m) {
      this.#m = new AbortController();
      const I = this.#G.combinedSignal(this.#m);
      this.#b.div.addEventListener("pointerdown", this.#W.bind(this), {
        signal: I
      }), this.#b.div.classList.add("highlighting");
    }
  }
  disableTextSelection() {
    this.div.tabIndex = 0, this.#b?.div && this.#m && (this.#m.abort(), this.#m = null, this.#b.div.classList.remove("highlighting"));
  }
  #W(I) {
    this.#G.unselectAll();
    const {
      target: g
    } = I;
    if (g === this.#b.div || (g.getAttribute("role") === "img" || g.classList.contains("endOfContent")) && this.#b.div.contains(g)) {
      const {
        isMac: C
      } = GI.platform;
      if (I.button !== 0 || I.ctrlKey && C)
        return;
      this.#G.showAllEditors("highlight", !0, !0), this.#b.div.classList.add("free"), this.toggleDrawing(), gI.startHighlighting(this, this.#G.direction === "ltr", {
        target: this.#b.div,
        x: I.x,
        y: I.y
      }), this.#b.div.addEventListener("pointerup", () => {
        this.#b.div.classList.remove("free"), this.toggleDrawing(!0);
      }, {
        once: !0,
        signal: this.#G._signal
      }), I.preventDefault();
    }
  }
  enableClick() {
    if (this.#C)
      return;
    this.#C = new AbortController();
    const I = this.#G.combinedSignal(this.#C);
    this.div.addEventListener("pointerdown", this.pointerdown.bind(this), {
      signal: I
    });
    const g = this.pointerup.bind(this);
    this.div.addEventListener("pointerup", g, {
      signal: I
    }), this.div.addEventListener("pointercancel", g, {
      signal: I
    });
  }
  disableClick() {
    this.#C?.abort(), this.#C = null;
  }
  attach(I) {
    this.#l.set(I.id, I);
    const {
      annotationElementId: g
    } = I;
    g && this.#G.isDeletedAnnotationElement(g) && this.#G.removeDeletedAnnotationElement(I);
  }
  detach(I) {
    this.#l.delete(I.id), this.#I?.removePointerInTextLayer(I.contentDiv), !this.#d && I.annotationElementId && this.#G.addDeletedAnnotationElement(I);
  }
  remove(I) {
    this.detach(I), this.#G.removeEditor(I), I.div.remove(), I.isAttachedToDOM = !1;
  }
  changeParent(I) {
    I.parent !== this && (I.parent && I.annotationElementId && (this.#G.addDeletedAnnotationElement(I.annotationElementId), F.deleteAnnotationElement(I), I.annotationElementId = null), this.attach(I), I.parent?.detach(I), I.setParent(this), I.div && I.isAttachedToDOM && (I.div.remove(), this.div.append(I.div)));
  }
  add(I) {
    if (!(I.parent === this && I.isAttachedToDOM)) {
      if (this.changeParent(I), this.#G.addEditor(I), this.attach(I), !I.isAttachedToDOM) {
        const g = I.render();
        this.div.append(g), I.isAttachedToDOM = !0;
      }
      I.fixAndSetPosition(), I.onceAdded(!this.#c), this.#G.addToAnnotationStorage(I), I._reportTelemetry(I.telemetryInitialData);
    }
  }
  moveEditorInDOM(I) {
    if (!I.isAttachedToDOM)
      return;
    const {
      activeElement: g
    } = document;
    I.div.contains(g) && !this.#i && (I._focusEventsAllowed = !1, this.#i = setTimeout(() => {
      this.#i = null, I.div.contains(document.activeElement) ? I._focusEventsAllowed = !0 : (I.div.addEventListener("focusin", () => {
        I._focusEventsAllowed = !0;
      }, {
        once: !0,
        signal: this.#G._signal
      }), g.focus());
    }, 0)), I._structTreeParentId = this.#I?.moveElementInDOM(this.div, I.div, I.contentDiv, !0);
  }
  addOrRebuild(I) {
    I.needsToBeRebuilt() ? (I.parent ||= this, I.rebuild(), I.show()) : this.add(I);
  }
  addUndoableEditor(I) {
    const g = () => I._uiManager.rebuild(I), C = () => {
      I.remove();
    };
    this.addCommands({
      cmd: g,
      undo: C,
      mustExec: !1
    });
  }
  getEditorByUID(I) {
    for (const g of this.#l.values())
      if (g.uid === I)
        return g;
    return null;
  }
  getNextId() {
    return this.#G.getId();
  }
  get #h() {
    return PI.#e.get(this.#G.getMode());
  }
  combinedSignal(I) {
    return this.#G.combinedSignal(I);
  }
  #N(I) {
    const g = this.#h;
    return g ? new g.prototype.constructor(I) : null;
  }
  canCreateNewEmptyEditor() {
    return this.#h?.canCreateNewEmptyEditor();
  }
  async pasteEditor(I, g) {
    this.updateToolbar(I), await this.#G.updateMode(I.mode);
    const {
      offsetX: C,
      offsetY: A
    } = this.#w(), i = this.getNextId(), l = this.#N({
      parent: this,
      id: i,
      x: C,
      y: A,
      uiManager: this.#G,
      isCentered: !0,
      ...g
    });
    l && this.add(l);
  }
  async deserialize(I) {
    return await PI.#e.get(I.annotationType ?? I.annotationEditorType)?.deserialize(I, this, this.#G) || null;
  }
  createAndAddNewEditor(I, g, C = {}) {
    const A = this.getNextId(), i = this.#N({
      parent: this,
      id: A,
      x: I.offsetX,
      y: I.offsetY,
      uiManager: this.#G,
      isCentered: g,
      ...C
    });
    return i && this.add(i), i;
  }
  get boundingClientRect() {
    return this.div.getBoundingClientRect();
  }
  #w() {
    const {
      x: I,
      y: g,
      width: C,
      height: A
    } = this.boundingClientRect, i = Math.max(0, I), l = Math.max(0, g), s = Math.min(window.innerWidth, I + C), d = Math.min(window.innerHeight, g + A), c = (i + s) / 2 - I, G = (l + d) / 2 - g, [b, o] = this.viewport.rotation % 180 === 0 ? [c, G] : [G, c];
    return {
      offsetX: b,
      offsetY: o
    };
  }
  addNewEditor(I = {}) {
    this.createAndAddNewEditor(this.#w(), !0, I);
  }
  setSelected(I) {
    this.#G.setSelected(I);
  }
  toggleSelected(I) {
    this.#G.toggleSelected(I);
  }
  unselect(I) {
    this.#G.unselect(I);
  }
  pointerup(I) {
    const {
      isMac: g
    } = GI.platform;
    if (I.button !== 0 || I.ctrlKey && g || I.target !== this.div || !this.#s || (this.#s = !1, this.#h?.isDrawer && this.#h.supportMultipleDrawings))
      return;
    if (!this.#g) {
      this.#g = !0;
      return;
    }
    const C = this.#G.getMode();
    if (C === k.STAMP || C === k.SIGNATURE) {
      this.#G.unselectAll();
      return;
    }
    this.createAndAddNewEditor(I, !1);
  }
  pointerdown(I) {
    if (this.#G.getMode() === k.HIGHLIGHT && this.enableTextSelection(), this.#s) {
      this.#s = !1;
      return;
    }
    const {
      isMac: g
    } = GI.platform;
    if (I.button !== 0 || I.ctrlKey && g || I.target !== this.div)
      return;
    if (this.#s = !0, this.#h?.isDrawer) {
      this.startDrawingSession(I);
      return;
    }
    const C = this.#G.getActive();
    this.#g = !C || C.isEmpty();
  }
  startDrawingSession(I) {
    if (this.div.focus({
      preventScroll: !0
    }), this.#Z) {
      this.#h.startDrawing(this, this.#G, !1, I);
      return;
    }
    this.#G.setCurrentDrawingSession(this), this.#Z = new AbortController();
    const g = this.#G.combinedSignal(this.#Z);
    this.div.addEventListener("blur", ({
      relatedTarget: C
    }) => {
      C && !this.div.contains(C) && (this.#o = null, this.commitOrRemove());
    }, {
      signal: g
    }), this.#h.startDrawing(this, this.#G, !1, I);
  }
  pause(I) {
    if (I) {
      const {
        activeElement: g
      } = document;
      this.div.contains(g) && (this.#o = g);
      return;
    }
    this.#o && setTimeout(() => {
      this.#o?.focus(), this.#o = null;
    }, 0);
  }
  endDrawingSession(I = !1) {
    return this.#Z ? (this.#G.setCurrentDrawingSession(null), this.#Z.abort(), this.#Z = null, this.#o = null, this.#h.endDrawing(I)) : null;
  }
  findNewParent(I, g, C) {
    const A = this.#G.findParent(g, C);
    return A === null || A === this ? !1 : (A.changeParent(I), !0);
  }
  commitOrRemove() {
    return this.#Z ? (this.endDrawingSession(), !0) : !1;
  }
  onScaleChanging() {
    this.#Z && this.#h.onScaleChangingWhenDrawing(this);
  }
  destroy() {
    this.commitOrRemove(), this.#G.getActive()?.parent === this && (this.#G.commitOrRemove(), this.#G.setActiveEditor(null)), this.#i && (clearTimeout(this.#i), this.#i = null);
    for (const I of this.#l.values())
      this.#I?.removePointerInTextLayer(I.contentDiv), I.setParent(null), I.isAttachedToDOM = !1, I.div.remove();
    this.div = null, this.#l.clear(), this.#G.removeLayer(this);
  }
  #n() {
    for (const I of this.#l.values())
      I.isEmpty() && I.remove();
  }
  render({
    viewport: I
  }) {
    this.viewport = I, cg(this.div, I);
    for (const g of this.#G.getEditors(this.pageIndex))
      this.add(g), g.rebuild();
    this.updateMode();
  }
  update({
    viewport: I
  }) {
    this.#G.commitOrRemove(), this.#n();
    const g = this.viewport.rotation, C = I.rotation;
    if (this.viewport = I, cg(this.div, {
      rotation: C
    }), g !== C)
      for (const A of this.#l.values())
        A.rotate(C);
  }
  get pageDimensions() {
    const {
      pageWidth: I,
      pageHeight: g
    } = this.viewport.rawDims;
    return [I, g];
  }
  get scale() {
    return this.#G.viewParameters.realScale;
  }
}, sZ = class bI {
  #I = null;
  #g = /* @__PURE__ */ new Map();
  #A = /* @__PURE__ */ new Map();
  static #C = 0;
  constructor({
    pageIndex: I
  }) {
    this.pageIndex = I;
  }
  setParent(I) {
    if (!this.#I) {
      this.#I = I;
      return;
    }
    if (this.#I !== I) {
      if (this.#g.size > 0)
        for (const g of this.#g.values())
          g.remove(), I.append(g);
      this.#I = I;
    }
  }
  static get _svgFactory() {
    return T(this, "_svgFactory", new XC());
  }
  static #i(I, [g, C, A, i]) {
    const {
      style: l
    } = I;
    l.top = `${100 * C}%`, l.left = `${100 * g}%`, l.width = `${100 * A}%`, l.height = `${100 * i}%`;
  }
  #l() {
    const I = bI._svgFactory.create(1, 1, !0);
    return this.#I.append(I), I.setAttribute("aria-hidden", !0), I;
  }
  #s(I, g) {
    const C = bI._svgFactory.createElement("clipPath");
    I.append(C);
    const A = `clip_${g}`;
    C.setAttribute("id", A), C.setAttribute("clipPathUnits", "objectBoundingBox");
    const i = bI._svgFactory.createElement("use");
    return C.append(i), i.setAttribute("href", `#${g}`), i.classList.add("clip"), A;
  }
  #d(I, g) {
    for (const [C, A] of Object.entries(g))
      A === null ? I.removeAttribute(C) : I.setAttribute(C, A);
  }
  draw(I, g = !1, C = !1) {
    const A = bI.#C++, i = this.#l(), l = bI._svgFactory.createElement("defs");
    i.append(l);
    const s = bI._svgFactory.createElement("path");
    l.append(s);
    const d = `path_p${this.pageIndex}_${A}`;
    s.setAttribute("id", d), s.setAttribute("vector-effect", "non-scaling-stroke"), g && this.#A.set(A, s);
    const c = C ? this.#s(l, d) : null, G = bI._svgFactory.createElement("use");
    return i.append(G), G.setAttribute("href", `#${d}`), this.updateProperties(i, I), this.#g.set(A, i), {
      id: A,
      clipPathId: `url(#${c})`
    };
  }
  drawOutline(I, g) {
    const C = bI.#C++, A = this.#l(), i = bI._svgFactory.createElement("defs");
    A.append(i);
    const l = bI._svgFactory.createElement("path");
    i.append(l);
    const s = `path_p${this.pageIndex}_${C}`;
    l.setAttribute("id", s), l.setAttribute("vector-effect", "non-scaling-stroke");
    let d;
    if (g) {
      const b = bI._svgFactory.createElement("mask");
      i.append(b), d = `mask_p${this.pageIndex}_${C}`, b.setAttribute("id", d), b.setAttribute("maskUnits", "objectBoundingBox");
      const o = bI._svgFactory.createElement("rect");
      b.append(o), o.setAttribute("width", "1"), o.setAttribute("height", "1"), o.setAttribute("fill", "white");
      const m = bI._svgFactory.createElement("use");
      b.append(m), m.setAttribute("href", `#${s}`), m.setAttribute("stroke", "none"), m.setAttribute("fill", "black"), m.setAttribute("fill-rule", "nonzero"), m.classList.add("mask");
    }
    const c = bI._svgFactory.createElement("use");
    A.append(c), c.setAttribute("href", `#${s}`), d && c.setAttribute("mask", `url(#${d})`);
    const G = c.cloneNode();
    return A.append(G), c.classList.add("mainOutline"), G.classList.add("secondaryOutline"), this.updateProperties(A, I), this.#g.set(C, A), C;
  }
  finalizeDraw(I, g) {
    this.#A.delete(I), this.updateProperties(I, g);
  }
  updateProperties(I, g) {
    if (!g)
      return;
    const {
      root: C,
      bbox: A,
      rootClass: i,
      path: l
    } = g, s = typeof I == "number" ? this.#g.get(I) : I;
    if (s) {
      if (C && this.#d(s, C), A && bI.#i(s, A), i) {
        const {
          classList: d
        } = s;
        for (const [c, G] of Object.entries(i))
          d.toggle(c, G);
      }
      if (l) {
        const c = s.firstChild.firstChild;
        this.#d(c, l);
      }
    }
  }
  updateParent(I, g) {
    if (g === this)
      return;
    const C = this.#g.get(I);
    C && (g.#I.append(C), this.#g.delete(I), g.#g.set(I, C));
  }
  remove(I) {
    this.#A.delete(I), this.#I !== null && (this.#g.get(I).remove(), this.#g.delete(I));
  }
  destroy() {
    this.#I = null;
    for (const I of this.#g.values())
      I.remove();
    this.#g.clear(), this.#A.clear();
  }
};
globalThis._pdfjsTestingUtils = {
  HighlightOutliner: hA
};
globalThis.pdfjsLib = {
  AbortException: Ig,
  AnnotationEditorLayer: lZ,
  AnnotationEditorParamsType: j,
  AnnotationEditorType: k,
  AnnotationEditorUIManager: Eg,
  AnnotationLayer: Fl,
  AnnotationMode: _I,
  AnnotationType: iI,
  applyOpacity: ys,
  build: pd,
  ColorPicker: Hl,
  createValidAbsoluteUrl: gl,
  CSSConstants: Rs,
  DOMSVGFactory: XC,
  DrawLayer: sZ,
  FeatureTest: GI,
  fetchData: $g,
  findContrastColor: Xs,
  getDocument: ul,
  getFilenameFromUrl: ws,
  getPdfFilenameFromUrl: ns,
  getRGB: gC,
  getUuid: il,
  getXfaPageViewport: Vs,
  GlobalWorkerOptions: Ng,
  ImageKind: wC,
  InvalidPDFException: lA,
  isDataScheme: FC,
  isPdfFile: HA,
  isValidExplicitDest: Ls,
  MathClamp: eI,
  noContextMenu: RI,
  normalizeUnicode: hs,
  OPS: Ug,
  OutputScale: Gg,
  PasswordResponses: Zs,
  PDFDataRangeTransport: Rl,
  PDFDateString: sA,
  PDFWorker: eA,
  PermissionFlag: ds,
  PixelsPerInch: Hg,
  RenderingCancelledException: XA,
  renderRichText: dl,
  ResponseException: uC,
  setLayerDimensions: cg,
  shadow: T,
  SignatureExtractor: Bg,
  stopEvent: II,
  SupportedImageMimeTypes: ZA,
  TextLayer: yC,
  TouchManager: cl,
  updateUrlHash: Cl,
  Util: M,
  VerbosityLevel: KC,
  version: Sd,
  XfaLayer: sl
};
const dZ = "data:text/javascript;base64,", {
  AbortException: ZZ,
  AnnotationEditorLayer: cZ,
  AnnotationEditorParamsType: pG,
  AnnotationEditorType: WI,
  AnnotationEditorUIManager: GZ,
  AnnotationLayer: bZ,
  AnnotationMode: LI,
  AnnotationType: kl,
  applyOpacity: FG,
  build: zG,
  ColorPicker: JG,
  createValidAbsoluteUrl: rl,
  CSSConstants: LG,
  DOMSVGFactory: kG,
  DrawLayer: oZ,
  FeatureTest: mZ,
  fetchData: ni,
  findContrastColor: rG,
  getDocument: TG,
  getFilenameFromUrl: jG,
  getPdfFilenameFromUrl: aZ,
  getRGB: QG,
  getUuid: xG,
  getXfaPageViewport: OG,
  GlobalWorkerOptions: UG,
  ImageKind: vG,
  InvalidPDFException: EG,
  isDataScheme: PG,
  isPdfFile: eZ,
  isValidExplicitDest: tZ,
  MathClamp: jA,
  noContextMenu: fG,
  normalizeUnicode: hZ,
  OPS: _G,
  OutputScale: VC,
  PasswordResponses: qG,
  PDFDataRangeTransport: $G,
  PDFDateString: Ib,
  PDFWorker: gb,
  PermissionFlag: eg,
  PixelsPerInch: TI,
  RenderingCancelledException: wA,
  renderRichText: Cb,
  ResponseException: Ab,
  setLayerDimensions: Tl,
  shadow: HC,
  SignatureExtractor: ib,
  stopEvent: nA,
  SupportedImageMimeTypes: lb,
  TextLayer: BZ,
  TouchManager: sb,
  updateUrlHash: WZ,
  Util: QA,
  VerbosityLevel: db,
  version: Yi,
  XfaLayer: _C
} = globalThis.pdfjsLib, wZ = "auto", jl = 1, Vi = 1.1, nZ = 0.1, YZ = 10, qC = 0, VZ = 1.25, Ni = 40, ui = 5, O = {
  INITIAL: 0,
  RUNNING: 1,
  PAUSED: 2,
  FINISHED: 3
}, ug = {
  UNKNOWN: 0,
  NORMAL: 1,
  CHANGING: 2,
  FULLSCREEN: 3
}, JI = {
  DISABLE: 0,
  ENABLE: 1,
  ENABLE_PERMISSIONS: 2
}, x = {
  UNKNOWN: -1,
  VERTICAL: 0,
  HORIZONTAL: 1,
  WRAPPED: 2,
  PAGE: 3
}, oI = {
  UNKNOWN: -1,
  NONE: 0,
  ODD: 1,
  EVEN: 2
};
function Ql(Z, I, g = !1) {
  let C = Z.offsetParent;
  if (!C) {
    console.error("offsetParent is not set -- cannot scroll");
    return;
  }
  let A = Z.offsetTop + Z.clientTop, i = Z.offsetLeft + Z.clientLeft;
  for (; C.clientHeight === C.scrollHeight && C.clientWidth === C.scrollWidth || g && (C.classList.contains("markedContent") || getComputedStyle(C).overflow === "hidden"); )
    if (A += C.offsetTop, i += C.offsetLeft, C = C.offsetParent, !C)
      return;
  if (I && (I.top !== void 0 && (A += I.top), I.left !== void 0)) {
    if (g) {
      const l = Z.getBoundingClientRect().width, s = jA((C.clientWidth - l) / 2, 20, 400);
      i += I.left - s;
    } else
      i += I.left;
    C.scrollLeft = i;
  }
  C.scrollTop = A;
}
function NZ(Z, I, g = void 0) {
  const C = function(l) {
    i || (i = window.requestAnimationFrame(function() {
      i = null;
      const d = Z.scrollLeft, c = A.lastX;
      d !== c && (A.right = d > c), A.lastX = d;
      const G = Z.scrollTop, b = A.lastY;
      G !== b && (A.down = G > b), A.lastY = G, I(A);
    }));
  }, A = {
    right: !0,
    down: !0,
    lastX: Z.scrollLeft,
    lastY: Z.scrollTop,
    _eventHandler: C
  };
  let i = null;
  return Z.addEventListener("scroll", C, {
    useCapture: !0,
    signal: g
  }), g?.addEventListener("abort", () => window.cancelAnimationFrame(i), {
    once: !0
  }), A;
}
function LC(Z) {
  const I = /* @__PURE__ */ new Map();
  for (const [g, C] of new URLSearchParams(Z))
    I.set(g.toLowerCase(), C);
  return I;
}
const Ri = /[\x00-\x1F]/g;
function jg(Z, I = !1) {
  return Ri.test(Z) ? I ? Z.replaceAll(Ri, (g) => g === "\0" ? "" : " ") : Z.replaceAll("\0", "") : Z;
}
function fg(Z, I, g = 0) {
  let C = g, A = Z.length - 1;
  if (A < 0 || !I(Z[A]))
    return Z.length;
  if (I(Z[C]))
    return C;
  for (; C < A; ) {
    const i = C + A >> 1, l = Z[i];
    I(l) ? A = i : C = i + 1;
  }
  return C;
}
function yi(Z) {
  if (Math.floor(Z) === Z)
    return [Z, 1];
  const I = 1 / Z, g = 8;
  if (I > g)
    return [1, g];
  if (Math.floor(I) === I)
    return [1, I];
  const C = Z > 1 ? I : Z;
  let A = 0, i = 1, l = 1, s = 1;
  for (; ; ) {
    const c = A + l, G = i + s;
    if (G > g)
      break;
    C <= c / G ? (l = c, s = G) : (A = c, i = G);
  }
  let d;
  return C - A / i < l / s - C ? d = C === Z ? [A, i] : [i, A] : d = C === Z ? [l, s] : [s, l], d;
}
function eC(Z, I) {
  return Z - Z % I;
}
function uZ(Z, I, g) {
  if (Z < 2)
    return Z;
  let C = I[Z].div, A = C.offsetTop + C.clientTop;
  A >= g && (C = I[Z - 1].div, A = C.offsetTop + C.clientTop);
  for (let i = Z - 2; i >= 0 && (C = I[i].div, !(C.offsetTop + C.clientTop + C.clientHeight <= A)); --i)
    Z = i;
  return Z;
}
function RZ({
  scrollEl: Z,
  views: I,
  sortByVisibility: g = !1,
  horizontal: C = !1,
  rtl: A = !1
}) {
  const i = Z.scrollTop, l = i + Z.clientHeight, s = Z.scrollLeft, d = s + Z.clientWidth;
  function c(W) {
    const B = W.div;
    return B.offsetTop + B.clientTop + B.clientHeight > i;
  }
  function G(W) {
    const B = W.div, w = B.offsetLeft + B.clientLeft, n = w + B.clientWidth;
    return A ? w < d : n > s;
  }
  const b = [], o = /* @__PURE__ */ new Set(), m = I.length;
  let e = fg(I, C ? G : c);
  e > 0 && e < m && !C && (e = uZ(e, I, i));
  let a = C ? d : -1;
  for (let W = e; W < m; W++) {
    const B = I[W], w = B.div, n = w.offsetLeft + w.clientLeft, V = w.offsetTop + w.clientTop, N = w.clientWidth, R = w.clientHeight, Y = n + N, y = V + R;
    if (a === -1)
      y >= l && (a = y);
    else if ((C ? n : V) > a)
      break;
    if (y <= i || V >= l || Y <= s || n >= d)
      continue;
    const X = Math.max(0, i - V), K = Math.max(0, s - n), S = X + Math.max(0, y - l), p = K + Math.max(0, Y - d), r = (R - S) / R, D = (N - p) / N, z = r * D * 100 | 0;
    b.push({
      id: B.id,
      x: n,
      y: V,
      visibleArea: z === 100 ? null : {
        minX: K,
        minY: X,
        maxX: Math.min(Y, d) - n,
        maxY: Math.min(y, l) - V
      },
      view: B,
      percent: z,
      widthPercent: D * 100 | 0
    }), o.add(B.id);
  }
  const h = b[0], t = b.at(-1);
  return g && b.sort(function(W, B) {
    const w = W.percent - B.percent;
    return Math.abs(w) > 1e-3 ? -w : W.id - B.id;
  }), {
    first: h,
    last: t,
    views: b,
    ids: o
  };
}
function xl(Z) {
  return Number.isInteger(Z) && Z % 90 === 0;
}
function yZ(Z) {
  return Number.isInteger(Z) && Object.values(x).includes(Z) && Z !== x.UNKNOWN;
}
function XZ(Z) {
  return Number.isInteger(Z) && Object.values(oI).includes(Z) && Z !== oI.UNKNOWN;
}
function Xi(Z) {
  return Z.width <= Z.height;
}
new Promise(function(Z) {
  window.requestAnimationFrame(Z);
});
const HZ = document.documentElement.style;
class MZ {
  #I = null;
  #g = null;
  #A = 0;
  #C = null;
  #i = !0;
  constructor(I) {
    this.#I = I.classList, this.#C = I.style;
  }
  get percent() {
    return this.#A;
  }
  set percent(I) {
    if (this.#A = jA(I, 0, 100), isNaN(I)) {
      this.#I.add("indeterminate");
      return;
    }
    this.#I.remove("indeterminate"), this.#C.setProperty("--progressBar-percent", `${this.#A}%`);
  }
  setWidth(I) {
    if (!I)
      return;
    const C = I.parentNode.offsetWidth - I.offsetWidth;
    C > 0 && this.#C.setProperty("--progressBar-end-offset", `${C}px`);
  }
  setDisableAutoFetch(I = 5e3) {
    this.#A === 100 || isNaN(this.#A) || (this.#g && clearTimeout(this.#g), this.show(), this.#g = setTimeout(() => {
      this.#g = null, this.hide();
    }, I));
  }
  hide() {
    this.#i && (this.#i = !1, this.#I.add("hidden"));
  }
  show() {
    this.#i || (this.#i = !0, this.#I.remove("hidden"));
  }
}
function DZ(Z) {
  let I = x.VERTICAL, g = oI.NONE;
  switch (Z) {
    case "SinglePage":
      I = x.PAGE;
      break;
    case "OneColumn":
      break;
    case "TwoPageLeft":
      I = x.PAGE;
    case "TwoColumnLeft":
      g = oI.ODD;
      break;
    case "TwoPageRight":
      I = x.PAGE;
    case "TwoColumnRight":
      g = oI.EVEN;
      break;
  }
  return {
    scrollMode: I,
    spreadMode: g
  };
}
const tC = (function() {
  const Z = document.createElement("div");
  return Z.style.width = "round(down, calc(1.6666666666666665 * 792px), 1px)", Z.style.width === "calc(1320px)" ? Math.fround : (I) => I;
})(), XI = {
  SPACE: 0,
  ALPHA_LETTER: 1,
  PUNCT: 2,
  HAN_LETTER: 3,
  KATAKANA_LETTER: 4,
  HIRAGANA_LETTER: 5,
  HALFWIDTH_KATAKANA_LETTER: 6,
  THAI_LETTER: 7
};
function KZ(Z) {
  return Z < 11904;
}
function SZ(Z) {
  return (Z & 65408) === 0;
}
function pZ(Z) {
  return Z >= 97 && Z <= 122 || Z >= 65 && Z <= 90;
}
function FZ(Z) {
  return Z >= 48 && Z <= 57;
}
function zZ(Z) {
  return Z === 32 || Z === 9 || Z === 13 || Z === 10;
}
function JZ(Z) {
  return Z >= 13312 && Z <= 40959 || Z >= 63744 && Z <= 64255;
}
function LZ(Z) {
  return Z >= 12448 && Z <= 12543;
}
function kZ(Z) {
  return Z >= 12352 && Z <= 12447;
}
function rZ(Z) {
  return Z >= 65376 && Z <= 65439;
}
function TZ(Z) {
  return (Z & 65408) === 3584;
}
function hC(Z) {
  return KZ(Z) ? SZ(Z) ? zZ(Z) ? XI.SPACE : pZ(Z) || FZ(Z) || Z === 95 ? XI.ALPHA_LETTER : XI.PUNCT : TZ(Z) ? XI.THAI_LETTER : Z === 160 ? XI.SPACE : XI.ALPHA_LETTER : JZ(Z) ? XI.HAN_LETTER : LZ(Z) ? XI.KATAKANA_LETTER : kZ(Z) ? XI.HIRAGANA_LETTER : rZ(Z) ? XI.HALFWIDTH_KATAKANA_LETTER : XI.ALPHA_LETTER;
}
let Hi;
function jZ() {
  return Hi ||= " ¨ª¯²-µ¸-º¼-¾Ĳ-ĳĿ-ŀŉſǄ-ǌǱ-ǳʰ-ʸ˘-˝ˠ-ˤʹͺ;΄-΅·ϐ-ϖϰ-ϲϴ-ϵϹևٵ-ٸक़-य़ড়-ঢ়য়ਲ਼ਸ਼ਖ਼-ਜ਼ਫ਼ଡ଼-ଢ଼ำຳໜ-ໝ༌གྷཌྷདྷབྷཛྷཀྵჼᴬ-ᴮᴰ-ᴺᴼ-ᵍᵏ-ᵪᵸᶛ-ᶿẚ-ẛάέήίόύώΆ᾽-῁ΈΉ῍-῏ΐΊ῝-῟ΰΎ῭-`ΌΏ´-῾ - ‑‗․-… ″-‴‶-‷‼‾⁇-⁉⁗ ⁰-ⁱ⁴-₎ₐ-ₜ₨℀-℃℅-ℇ℉-ℓℕ-№ℙ-ℝ℠-™ℤΩℨK-ℭℯ-ℱℳ-ℹ℻-⅀ⅅ-ⅉ⅐-ⅿ↉∬-∭∯-∰〈-〉①-⓪⨌⩴-⩶⫝̸ⱼ-ⱽⵯ⺟⻳⼀-⿕　〶〸-〺゛-゜ゟヿㄱ-ㆎ㆒-㆟㈀-㈞㈠-㉇㉐-㉾㊀-㏿ꚜ-ꚝꝰꟲ-ꟴꟸ-ꟹꭜ-ꭟꭩ豈-嗀塚晴凞-羽蘒諸逸-都飯-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-זּטּ-לּמּנּ-סּףּ-פּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-﷼︐-︙︰-﹄﹇-﹒﹔-﹦﹨-﹫ﹰ-ﹲﹴﹶ-ﻼ！-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ￠-￦", Hi;
}
const fI = {
  FOUND: 0,
  NOT_FOUND: 1,
  WRAPPED: 2,
  PENDING: 3
}, QZ = 250, xZ = -50, Mi = {
  "‐": "-",
  "‘": "'",
  "’": "'",
  "‚": "'",
  "‛": "'",
  "“": '"',
  "”": '"',
  "„": '"',
  "‟": '"',
  "¼": "1/4",
  "½": "1/2",
  "¾": "3/4"
}, Di = /* @__PURE__ */ new Set([12441, 12442, 2381, 2509, 2637, 2765, 2893, 3021, 3149, 3277, 3387, 3388, 3405, 3530, 3642, 3770, 3972, 4153, 4154, 5908, 5940, 6098, 6752, 6980, 7082, 7083, 7154, 7155, 11647, 43014, 43052, 43204, 43347, 43456, 43766, 44013, 3158, 3953, 3954, 3962, 3963, 3964, 3965, 3968, 3956]);
let Ki;
const OZ = new RegExp("\\p{M}+", "gu"), UZ = new RegExp("([.*+?^${}()|[\\]\\\\])|(\\p{P})|(\\s+)|(\\p{M})|(\\p{L})", "gu"), vZ = new RegExp("([^\\p{M}])\\p{M}*$", "u"), EZ = new RegExp("^\\p{M}*([^\\p{M}])", "u"), PZ = /[\uAC00-\uD7AF\uFA6C\uFACF-\uFAD1\uFAD5-\uFAD7]+/g, Si = /* @__PURE__ */ new Map(), fZ = "[\\u1100-\\u1112\\ud7a4-\\ud7af\\ud84a\\ud84c\\ud850\\ud854\\ud857\\ud85f]", pi = /* @__PURE__ */ new Map();
let $C = null, IA = null;
function NC(Z, I = {}) {
  const g = [];
  let C;
  for (; (C = PZ.exec(Z)) !== null; ) {
    let {
      index: W
    } = C;
    for (const B of C[0]) {
      let w = Si.get(B);
      w || (w = B.normalize("NFD").length, Si.set(B, w)), g.push([w, W++]);
    }
  }
  const A = g.length > 0, i = I.ignoreDashEOL ?? !1;
  let l;
  if (!A && $C)
    l = $C;
  else if (A && IA)
    l = IA;
  else {
    const W = Object.keys(Mi).join(""), B = jZ(), N = [`[${W}]`, `[${B}]`, "(?:゙|゚)\\n", "\\p{M}+(?:-\\n)?", "\\p{Ll}-\\n(?=\\p{Ll})|\\p{Lu}-\\n(?=\\p{L})", "\\S-\\n", "(?:\\p{Ideographic}|[぀-ヿ])\\n", "\\n", A ? fZ : "\\u0000"];
    l = new RegExp(N.map((R) => `(${R})`).join("|"), "gum"), A ? IA = l : $C = l;
  }
  const s = [];
  for (; (C = OZ.exec(Z)) !== null; )
    s.push([C[0].length, C.index]);
  let d = Z.normalize("NFD");
  const c = [0, 0];
  let G = 0, b = 0, o = 0, m = 0, e = 0, a = !1;
  d = d.replace(l, (W, B, w, n, V, N, R, Y, y, X, K) => {
    if (K -= m, B) {
      const S = Mi[B], p = S.length;
      for (let r = 1; r < p; r++)
        c.push(K - o + r, o - r);
      return o -= p - 1, S;
    }
    if (w) {
      let S = pi.get(w);
      S || (S = w.normalize("NFKC"), pi.set(w, S));
      const p = S.length;
      for (let r = 1; r < p; r++)
        c.push(K - o + r, o - r);
      return o -= p - 1, S;
    }
    if (n)
      return a = !0, K + e === s[G]?.[1] ? ++G : (c.push(K - 1 - o + 1, o - 1), o -= 1, m += 1), c.push(K - o + 1, o), m += 1, e += 1, n.charAt(0);
    if (V) {
      const S = V.endsWith(`
`), p = S ? V.length - 2 : V.length;
      a = !0;
      let r = p;
      K + e === s[G]?.[1] && (r -= s[G][0], ++G);
      for (let D = 1; D <= r; D++)
        c.push(K - 1 - o + D, o - D);
      return o -= r, m += r, S ? (K += p - 1, c.push(K - o + 1, 1 + o), o += 1, m += 1, e += 1, V.slice(0, p)) : V;
    }
    if (N) {
      if (i)
        return m += 1, e += 1, N.slice(0, -1);
      const S = N.length - 2;
      return c.push(K - o + S, 1 + o), o += 1, m += 1, e += 1, N.slice(0, -2);
    }
    if (R)
      return m += 1, e += 1, R.slice(0, -1);
    if (Y) {
      const S = Y.length - 1;
      return c.push(K - o + S, o), m += 1, e += 1, Y.slice(0, -1);
    }
    if (y)
      return c.push(K - o + 1, o - 1), o -= 1, m += 1, e += 1, " ";
    if (K + e === g[b]?.[1]) {
      const S = g[b][0] - 1;
      ++b;
      for (let p = 1; p <= S; p++)
        c.push(K - (o - p), o - p);
      o -= S, m += S;
    }
    return X;
  }), c.push(d.length, o);
  const h = new Uint32Array(c.length >> 1), t = new Int32Array(c.length >> 1);
  for (let W = 0, B = c.length; W < B; W += 2)
    h[W >> 1] = c[W], t[W >> 1] = c[W + 1];
  return [d, [h, t], a];
}
function Ol(Z, I, g) {
  if (!Z)
    return [I, g];
  const [C, A] = Z, i = I, l = I + g - 1;
  let s = fg(C, (o) => o >= i);
  C[s] > i && --s;
  let d = fg(C, (o) => o >= l, s);
  C[d] > l && --d;
  const c = i + A[s], b = l + A[d] + 1 - c;
  return [c, b];
}
class _Z {
  #I = null;
  #g = !0;
  #A = 0;
  constructor({
    linkService: I,
    eventBus: g,
    updateMatchesCountOnProgress: C = !0
  }) {
    this._linkService = I, this._eventBus = g, this.#g = C, this.onIsPageVisible = null, this.#i(), g._on("find", this.#C.bind(this)), g._on("findbarclose", this.#W.bind(this));
  }
  get highlightMatches() {
    return this._highlightMatches;
  }
  get pageMatches() {
    return this._pageMatches;
  }
  get pageMatchesLength() {
    return this._pageMatchesLength;
  }
  get selected() {
    return this._selected;
  }
  get state() {
    return this.#I;
  }
  setDocument(I) {
    this._pdfDocument && this.#i(), I && (this._pdfDocument = I, this._firstPageCapability.resolve());
  }
  #C(I) {
    if (!I)
      return;
    const g = this._pdfDocument, {
      type: C
    } = I;
    (this.#I === null || this.#s(I)) && (this._dirtyMatch = !0), this.#I = I, C !== "highlightallchange" && this.#w(fI.PENDING), this._firstPageCapability.promise.then(() => {
      if (!this._pdfDocument || g && this._pdfDocument !== g)
        return;
      this.#o();
      const A = !this._highlightMatches, i = !!this._findTimeout;
      this._findTimeout && (clearTimeout(this._findTimeout), this._findTimeout = null), C ? this._dirtyMatch ? this.#t() : C === "again" ? (this.#t(), A && this.#I.highlightAll && this.#m()) : C === "highlightallchange" ? (i ? this.#t() : this._highlightMatches = !0, this.#m()) : this.#t() : this._findTimeout = setTimeout(() => {
        this.#t(), this._findTimeout = null;
      }, QZ);
    });
  }
  scrollMatchIntoView({
    element: I = null,
    selectedLeft: g = 0,
    pageIndex: C = -1,
    matchIndex: A = -1
  }) {
    if (!this._scrollMatches || !I)
      return;
    if (A === -1 || A !== this._selected.matchIdx)
      return;
    if (C === -1 || C !== this._selected.pageIdx)
      return;
    this._scrollMatches = !1, Ql(I, {
      top: xZ,
      left: g
    }, !0);
  }
  #i() {
    this._highlightMatches = !1, this._scrollMatches = !1, this._pdfDocument = null, this._pageMatches = [], this._pageMatchesLength = [], this.#A = 0, this.#I = null, this._selected = {
      pageIdx: -1,
      matchIdx: -1
    }, this._offset = {
      pageIdx: null,
      matchIdx: null,
      wrapped: !1
    }, this._extractTextPromises = [], this._pageContents = [], this._pageDiffs = [], this._hasDiacritics = [], this._matchesCountTotal = 0, this._pagesToSearch = null, this._pendingFindMatches = /* @__PURE__ */ new Set(), this._resumePageIdx = null, this._dirtyMatch = !1, clearTimeout(this._findTimeout), this._findTimeout = null, this._firstPageCapability = Promise.withResolvers();
  }
  get #l() {
    const {
      query: I
    } = this.#I;
    return typeof I == "string" ? (I !== this._rawQuery && (this._rawQuery = I, [this._normalizedQuery] = NC(I)), this._normalizedQuery) : (I || []).filter((g) => !!g).map((g) => NC(g)[0]);
  }
  #s(I) {
    const g = I.query, C = this.#I.query, A = typeof g;
    if (A !== typeof C)
      return !0;
    if (A === "string") {
      if (g !== C)
        return !0;
    } else if (JSON.stringify(g) !== JSON.stringify(C))
      return !0;
    switch (I.type) {
      case "again":
        const l = this._selected.pageIdx + 1, s = this._linkService;
        return l >= 1 && l <= s.pagesCount && l !== s.page && !(this.onIsPageVisible?.(l) ?? !0);
      case "highlightallchange":
        return !1;
    }
    return !0;
  }
  #d(I, g, C) {
    let A = I.slice(0, g).match(vZ);
    if (A) {
      const i = I.charCodeAt(g), l = A[1].charCodeAt(0);
      if (hC(i) === hC(l))
        return !1;
    }
    if (A = I.slice(g + C).match(EZ), A) {
      const i = I.charCodeAt(g + C - 1), l = A[1].charCodeAt(0);
      if (hC(i) === hC(l))
        return !1;
    }
    return !0;
  }
  #c(I, g) {
    const {
      matchDiacritics: C
    } = this.#I;
    let A = !1;
    I = I.replaceAll(UZ, (l, s, d, c, G, b) => s ? `[ ]*\\${s}[ ]*` : d ? `[ ]*${d}[ ]*` : c ? "[ ]+" : C ? G || b : G ? Di.has(G.charCodeAt(0)) ? G : "" : g ? (A = !0, `${b}\\p{M}*`) : b);
    const i = "[ ]*";
    return I.endsWith(i) && (I = I.slice(0, I.length - i.length)), C && g && (Ki ||= String.fromCharCode(...Di), A = !0, I = `${I}(?=[${Ki}]|[^\\p{M}]|$)`), [A, I];
  }
  #Z(I) {
    if (!this.#I)
      return;
    const g = this.#l;
    if (g.length === 0)
      return;
    const C = this._pageContents[I], A = this.match(g, C, I), i = this._pageMatches[I] = [], l = this._pageMatchesLength[I] = [], s = this._pageDiffs[I];
    A?.forEach(({
      index: c,
      length: G
    }) => {
      const [b, o] = Ol(s, c, G);
      o && (i.push(b), l.push(o));
    }), this.#I.highlightAll && this.#b(I), this._resumePageIdx === I && (this._resumePageIdx = null, this.#G());
    const d = i.length;
    this._matchesCountTotal += d, this.#g ? d > 0 && this.#N() : ++this.#A === this._linkService.pagesCount && this.#N();
  }
  match(I, g, C) {
    const A = this._hasDiacritics[C];
    let i = !1;
    if (typeof I == "string" ? [i, I] = this.#c(I, A) : I = I.sort().reverse().map((b) => {
      const [o, m] = this.#c(b, A);
      return i ||= o, `(${m})`;
    }).join("|"), !I)
      return;
    const {
      caseSensitive: l,
      entireWord: s
    } = this.#I, d = `g${i ? "u" : ""}${l ? "" : "i"}`;
    I = new RegExp(I, d);
    const c = [];
    let G;
    for (; (G = I.exec(g)) !== null; )
      s && !this.#d(g, G.index, G[0].length) || c.push({
        index: G.index,
        length: G[0].length
      });
    return c;
  }
  #o() {
    if (this._extractTextPromises.length > 0)
      return;
    let I = Promise.resolve();
    const g = {
      disableNormalization: !0
    }, C = this._pdfDocument;
    for (let A = 0, i = this._linkService.pagesCount; A < i; A++) {
      const {
        promise: l,
        resolve: s
      } = Promise.withResolvers();
      this._extractTextPromises[A] = l, I = I.then(async () => {
        if (C !== this._pdfDocument) {
          s();
          return;
        }
        await C.getPage(A + 1).then((d) => d.getTextContent(g)).then((d) => {
          const c = [];
          for (const G of d.items)
            c.push(G.str), G.hasEOL && c.push(`
`);
          [this._pageContents[A], this._pageDiffs[A], this._hasDiacritics[A]] = NC(c.join("")), s();
        }, (d) => {
          console.error(`Unable to get text content for page ${A + 1}`, d), this._pageContents[A] = "", this._pageDiffs[A] = null, this._hasDiacritics[A] = !1, s();
        });
      });
    }
  }
  #b(I) {
    this._scrollMatches && this._selected.pageIdx === I && (this._linkService.page = I + 1), this._eventBus.dispatch("updatetextlayermatches", {
      source: this,
      pageIndex: I
    });
  }
  #m() {
    this._eventBus.dispatch("updatetextlayermatches", {
      source: this,
      pageIndex: -1
    });
  }
  #t() {
    const I = this.#I.findPrevious, g = this._linkService.page - 1, C = this._linkService.pagesCount;
    if (this._highlightMatches = !0, this._dirtyMatch) {
      this._dirtyMatch = !1, this._selected.pageIdx = this._selected.matchIdx = -1, this._offset.pageIdx = g, this._offset.matchIdx = null, this._offset.wrapped = !1, this._resumePageIdx = null, this._pageMatches.length = 0, this._pageMatchesLength.length = 0, this.#A = 0, this._matchesCountTotal = 0, this.#m();
      for (let l = 0; l < C; l++)
        this._pendingFindMatches.has(l) || (this._pendingFindMatches.add(l), this._extractTextPromises[l].then(() => {
          this._pendingFindMatches.delete(l), this.#Z(l);
        }));
    }
    if (this.#l.length === 0) {
      this.#w(fI.FOUND);
      return;
    }
    if (this._resumePageIdx)
      return;
    const i = this._offset;
    if (this._pagesToSearch = C, i.matchIdx !== null) {
      const l = this._pageMatches[i.pageIdx].length;
      if (!I && i.matchIdx + 1 < l || I && i.matchIdx > 0) {
        i.matchIdx = I ? i.matchIdx - 1 : i.matchIdx + 1, this.#B(!0);
        return;
      }
      this.#e(I);
    }
    this.#G();
  }
  #a(I) {
    const g = this._offset, C = I.length, A = this.#I.findPrevious;
    return C ? (g.matchIdx = A ? C - 1 : 0, this.#B(!0), !0) : (this.#e(A), g.wrapped && (g.matchIdx = null, this._pagesToSearch < 0) ? (this.#B(!1), !0) : !1);
  }
  #G() {
    this._resumePageIdx !== null && console.error("There can only be one pending page.");
    let I = null;
    do {
      const g = this._offset.pageIdx;
      if (I = this._pageMatches[g], !I) {
        this._resumePageIdx = g;
        break;
      }
    } while (!this.#a(I));
  }
  #e(I) {
    const g = this._offset, C = this._linkService.pagesCount;
    g.pageIdx = I ? g.pageIdx - 1 : g.pageIdx + 1, g.matchIdx = null, this._pagesToSearch--, (g.pageIdx >= C || g.pageIdx < 0) && (g.pageIdx = I ? C - 1 : 0, g.wrapped = !0);
  }
  #B(I = !1) {
    let g = fI.NOT_FOUND;
    const C = this._offset.wrapped;
    if (this._offset.wrapped = !1, I) {
      const A = this._selected.pageIdx;
      this._selected.pageIdx = this._offset.pageIdx, this._selected.matchIdx = this._offset.matchIdx, g = C ? fI.WRAPPED : fI.FOUND, A !== -1 && A !== this._selected.pageIdx && this.#b(A);
    }
    this.#w(g, this.#I.findPrevious), this._selected.pageIdx !== -1 && (this._scrollMatches = !0, this.#b(this._selected.pageIdx));
  }
  #W(I) {
    const g = this._pdfDocument;
    this._firstPageCapability.promise.then(() => {
      !this._pdfDocument || g && this._pdfDocument !== g || (this._findTimeout && (clearTimeout(this._findTimeout), this._findTimeout = null), this._resumePageIdx && (this._resumePageIdx = null, this._dirtyMatch = !0), this.#w(fI.FOUND), this._highlightMatches = !1, this.#m());
    });
  }
  #h() {
    const {
      pageIdx: I,
      matchIdx: g
    } = this._selected;
    let C = 0, A = this._matchesCountTotal;
    if (g !== -1) {
      for (let i = 0; i < I; i++)
        C += this._pageMatches[i]?.length || 0;
      C += g + 1;
    }
    return (C < 1 || C > A) && (C = A = 0), {
      current: C,
      total: A
    };
  }
  #N() {
    this._eventBus.dispatch("updatefindmatchescount", {
      source: this,
      matchesCount: this.#h()
    });
  }
  #w(I, g = !1) {
    !this.#g && (this.#A !== this._linkService.pagesCount || I === fI.PENDING) || this._eventBus.dispatch("updatefindcontrolstate", {
      source: this,
      state: I,
      previous: g,
      entireWord: this.#I?.entireWord ?? null,
      matchesCount: this.#h(),
      rawQuery: this.#I?.query ?? null
    });
  }
}
const qZ = "noopener noreferrer nofollow", Ag = {
  NONE: 0,
  SELF: 1,
  BLANK: 2,
  PARENT: 3,
  TOP: 4
};
class Ul {
  externalLinkEnabled = !0;
  constructor({
    eventBus: I,
    externalLinkTarget: g = null,
    externalLinkRel: C = null,
    ignoreDestinationZoom: A = !1
  } = {}) {
    this.eventBus = I, this.externalLinkTarget = g, this.externalLinkRel = C, this._ignoreDestinationZoom = A, this.baseUrl = null, this.pdfDocument = null, this.pdfViewer = null, this.pdfHistory = null;
  }
  setDocument(I, g = null) {
    this.baseUrl = g, this.pdfDocument = I;
  }
  setViewer(I) {
    this.pdfViewer = I;
  }
  setHistory(I) {
    this.pdfHistory = I;
  }
  get pagesCount() {
    return this.pdfDocument ? this.pdfDocument.numPages : 0;
  }
  get page() {
    return this.pdfDocument ? this.pdfViewer.currentPageNumber : 1;
  }
  set page(I) {
    this.pdfDocument && (this.pdfViewer.currentPageNumber = I);
  }
  get rotation() {
    return this.pdfDocument ? this.pdfViewer.pagesRotation : 0;
  }
  set rotation(I) {
    this.pdfDocument && (this.pdfViewer.pagesRotation = I);
  }
  get isInPresentationMode() {
    return this.pdfDocument ? this.pdfViewer.isInPresentationMode : !1;
  }
  async goToDestination(I) {
    if (!this.pdfDocument)
      return;
    let g, C, A;
    if (typeof I == "string" ? (g = I, C = await this.pdfDocument.getDestination(I)) : (g = null, C = await I), !Array.isArray(C)) {
      console.error(`goToDestination: "${C}" is not a valid destination array, for dest="${I}".`);
      return;
    }
    const [i] = C;
    if (i && typeof i == "object") {
      if (A = this.pdfDocument.cachedPageNumber(i), !A)
        try {
          A = await this.pdfDocument.getPageIndex(i) + 1;
        } catch {
          console.error(`goToDestination: "${i}" is not a valid page reference, for dest="${I}".`);
          return;
        }
    } else Number.isInteger(i) && (A = i + 1);
    if (!A || A < 1 || A > this.pagesCount) {
      console.error(`goToDestination: "${A}" is not a valid page number, for dest="${I}".`);
      return;
    }
    this.pdfHistory && (this.pdfHistory.pushCurrentPosition(), this.pdfHistory.push({
      namedDest: g,
      explicitDest: C,
      pageNumber: A
    })), this.pdfViewer.scrollPageIntoView({
      pageNumber: A,
      destArray: C,
      ignoreDestinationZoom: this._ignoreDestinationZoom
    });
    const l = new AbortController();
    this.eventBus._on("textlayerrendered", (s) => {
      s.pageNumber === A && (s.source.textLayer.div.focus(), l.abort());
    }, {
      signal: l.signal
    });
  }
  goToPage(I) {
    if (!this.pdfDocument)
      return;
    const g = typeof I == "string" && this.pdfViewer.pageLabelToPageNumber(I) || I | 0;
    if (!(Number.isInteger(g) && g > 0 && g <= this.pagesCount)) {
      console.error(`PDFLinkService.goToPage: "${I}" is not a valid page.`);
      return;
    }
    this.pdfHistory && (this.pdfHistory.pushCurrentPosition(), this.pdfHistory.pushPage(g)), this.pdfViewer.scrollPageIntoView({
      pageNumber: g
    });
  }
  goToXY(I, g, C, A = {}) {
    this.pdfViewer.scrollPageIntoView({
      pageNumber: I,
      destArray: [null, {
        name: "XYZ"
      }, g, C],
      ignoreDestinationZoom: !0,
      ...A
    });
  }
  addLinkAttributes(I, g, C = !1) {
    if (!g || typeof g != "string")
      throw new Error('A valid "url" parameter must provided.');
    const A = C ? Ag.BLANK : this.externalLinkTarget, i = this.externalLinkRel;
    this.externalLinkEnabled ? I.href = I.title = g : (I.href = "", I.title = `Disabled: ${g}`, I.onclick = () => !1);
    let l = "";
    switch (A) {
      case Ag.NONE:
        break;
      case Ag.SELF:
        l = "_self";
        break;
      case Ag.BLANK:
        l = "_blank";
        break;
      case Ag.PARENT:
        l = "_parent";
        break;
      case Ag.TOP:
        l = "_top";
        break;
    }
    I.target = l, I.rel = typeof i == "string" ? i : qZ;
  }
  getDestinationHash(I) {
    if (typeof I == "string") {
      if (I.length > 0)
        return this.getAnchorUrl("#" + escape(I));
    } else if (Array.isArray(I)) {
      const g = JSON.stringify(I);
      if (g.length > 0)
        return this.getAnchorUrl("#" + escape(g));
    }
    return this.getAnchorUrl("");
  }
  getAnchorUrl(I) {
    return this.baseUrl ? this.baseUrl + I : I;
  }
  setHash(I) {
    if (!this.pdfDocument)
      return;
    let g, C;
    if (I.includes("=")) {
      const A = LC(I);
      if (A.has("search")) {
        const i = A.get("search").replaceAll('"', ""), l = A.get("phrase") === "true";
        this.eventBus.dispatch("findfromurlhash", {
          source: this,
          query: l ? i : i.match(/\S+/g)
        });
      }
      if (A.has("page") && (g = A.get("page") | 0 || 1), A.has("zoom")) {
        const i = A.get("zoom").split(","), l = i[0], s = parseFloat(l);
        l.includes("Fit") ? l === "Fit" || l === "FitB" ? C = [null, {
          name: l
        }] : l === "FitH" || l === "FitBH" || l === "FitV" || l === "FitBV" ? C = [null, {
          name: l
        }, i.length > 1 ? i[1] | 0 : null] : l === "FitR" ? i.length !== 5 ? console.error('PDFLinkService.setHash: Not enough parameters for "FitR".') : C = [null, {
          name: l
        }, i[1] | 0, i[2] | 0, i[3] | 0, i[4] | 0] : console.error(`PDFLinkService.setHash: "${l}" is not a valid zoom value.`) : C = [null, {
          name: "XYZ"
        }, i.length > 1 ? i[1] | 0 : null, i.length > 2 ? i[2] | 0 : null, s ? s / 100 : l];
      }
      C ? this.pdfViewer.scrollPageIntoView({
        pageNumber: g || this.page,
        destArray: C,
        allowNegativeOffset: !0
      }) : g && (this.page = g), A.has("pagemode") && this.eventBus.dispatch("pagemode", {
        source: this,
        mode: A.get("pagemode")
      }), A.has("nameddest") && this.goToDestination(A.get("nameddest"));
      return;
    }
    C = unescape(I);
    try {
      C = JSON.parse(C), Array.isArray(C) || (C = C.toString());
    } catch {
    }
    if (typeof C == "string" || tZ(C)) {
      this.goToDestination(C);
      return;
    }
    console.error(`PDFLinkService.setHash: "${unescape(I)}" is not a valid destination.`);
  }
  executeNamedAction(I) {
    if (this.pdfDocument) {
      switch (I) {
        case "GoBack":
          this.pdfHistory?.back();
          break;
        case "GoForward":
          this.pdfHistory?.forward();
          break;
        case "NextPage":
          this.pdfViewer.nextPage();
          break;
        case "PrevPage":
          this.pdfViewer.previousPage();
          break;
        case "LastPage":
          this.page = this.pagesCount;
          break;
        case "FirstPage":
          this.page = 1;
          break;
      }
      this.eventBus.dispatch("namedaction", {
        source: this,
        action: I
      });
    }
  }
  async executeSetOCGState(I) {
    if (!this.pdfDocument)
      return;
    const g = this.pdfDocument, C = await this.pdfViewer.optionalContentConfigPromise;
    g === this.pdfDocument && (C.setOCGState(I), this.pdfViewer.optionalContentConfigPromise = Promise.resolve(C));
  }
}
class kC extends Ul {
  setDocument(I, g = null) {
  }
}
class vl {
  #I = null;
  #g = null;
  #A = !1;
  #C = null;
  #i = null;
  #l = !1;
  constructor({
    pdfPage: I,
    linkService: g,
    downloadManager: C,
    annotationStorage: A = null,
    imageResourcesPath: i = "",
    renderForms: l = !0,
    enableComment: s = !1,
    commentManager: d = null,
    enableScripting: c = !1,
    hasJSActionsPromise: G = null,
    fieldObjectsPromise: b = null,
    annotationCanvasMap: o = null,
    accessibilityManager: m = null,
    annotationEditorUIManager: e = null,
    onAppend: a = null
  }) {
    this.pdfPage = I, this.linkService = g, this.downloadManager = C, this.imageResourcesPath = i, this.renderForms = l, this.annotationStorage = A, this.enableComment = s, this.#g = d, this.enableScripting = c, this._hasJSActionsPromise = G || Promise.resolve(!1), this._fieldObjectsPromise = b || Promise.resolve(null), this._annotationCanvasMap = o, this._accessibilityManager = m, this._annotationEditorUIManager = e, this.#C = a, this.annotationLayer = null, this.div = null, this._cancelled = !1, this._eventBus = g.eventBus;
  }
  async render({
    viewport: I,
    intent: g = "display",
    structTreeLayer: C = null
  }) {
    if (this.div) {
      if (this._cancelled || !this.annotationLayer)
        return;
      this.annotationLayer.update({
        viewport: I.clone({
          dontFlip: !0
        })
      });
      return;
    }
    const [A, i, l] = await Promise.all([this.pdfPage.getAnnotations({
      intent: g
    }), this._hasJSActionsPromise, this._fieldObjectsPromise]);
    if (this._cancelled)
      return;
    const s = this.div = document.createElement("div");
    if (s.className = "annotationLayer", this.#C?.(s), this.#s(I, C), A.length === 0) {
      this.#I = A, Tl(this.div, I);
      return;
    }
    await this.annotationLayer.render({
      annotations: A,
      imageResourcesPath: this.imageResourcesPath,
      renderForms: this.renderForms,
      downloadManager: this.downloadManager,
      enableComment: this.enableComment,
      enableScripting: this.enableScripting,
      hasJSActions: i,
      fieldObjects: l
    }), this.#I = A, this.linkService.isInPresentationMode && this.#d(ug.FULLSCREEN), this.#i || (this.#i = new AbortController(), this._eventBus?._on("presentationmodechanged", (d) => {
      this.#d(d.state);
    }, {
      signal: this.#i.signal
    }));
  }
  #s(I, g) {
    this.annotationLayer = new bZ({
      div: this.div,
      accessibilityManager: this._accessibilityManager,
      annotationCanvasMap: this._annotationCanvasMap,
      annotationEditorUIManager: this._annotationEditorUIManager,
      annotationStorage: this.annotationStorage,
      page: this.pdfPage,
      viewport: I.clone({
        dontFlip: !0
      }),
      structTreeLayer: g,
      commentManager: this.#g,
      linkService: this.linkService
    });
  }
  cancel() {
    this._cancelled = !0, this.#i?.abort(), this.#i = null;
  }
  hide(I = !1) {
    this.#A = !I, this.div && (this.div.hidden = !0);
  }
  hasEditableAnnotations() {
    return !!this.annotationLayer?.hasEditableAnnotations();
  }
  async injectLinkAnnotations(I) {
    if (this.#I === null)
      throw new Error("`render` method must be called before `injectLinkAnnotations`.");
    if (this._cancelled || this.#l)
      return;
    this.#l = !0;
    const g = this.#I.length ? this.#c(I) : I;
    g.length && (await this.annotationLayer.addLinkAnnotations(g), this.#A || (this.div.hidden = !1));
  }
  #d(I) {
    if (!this.div)
      return;
    let g = !1;
    switch (I) {
      case ug.FULLSCREEN:
        g = !0;
        break;
      case ug.NORMAL:
        break;
      default:
        return;
    }
    for (const C of this.div.childNodes)
      C.hasAttribute("data-internal-link") || (C.inert = g);
  }
  #c(I) {
    function g(i) {
      if (!i.quadPoints)
        return [i.rect];
      const l = [];
      for (let s = 2, d = i.quadPoints.length; s < d; s += 8) {
        const c = i.quadPoints[s], G = i.quadPoints[s + 1], b = i.quadPoints[s + 2], o = i.quadPoints[s + 3];
        l.push([b, o, c, G]);
      }
      return l;
    }
    function C(i, l) {
      const s = [], d = g(i), c = g(l);
      for (const G of d)
        for (const b of c) {
          const o = QA.intersect(G, b);
          o && s.push(o);
        }
      return s;
    }
    function A(i) {
      let l = 0;
      for (const s of i)
        l += Math.abs((s[2] - s[0]) * (s[3] - s[1]));
      return l;
    }
    return I.filter((i) => {
      let l;
      for (const s of this.#I) {
        if (s.annotationType !== kl.LINK || !s.url)
          continue;
        const d = C(s, i);
        if (d.length !== 0 && (l ??= A(g(i)), A(d) / l > 0.5))
          return !1;
      }
      return !0;
    });
  }
}
function Fi(Z, I) {
  const g = document.createElement("a");
  if (!g.click)
    throw new Error('DownloadManager: "a.click()" is not supported.');
  g.href = Z, g.target = "_parent", "download" in g && (g.download = I), (document.body || document.documentElement).append(g), g.click(), g.remove();
}
class $Z {
  #I = /* @__PURE__ */ new WeakMap();
  downloadData(I, g, C) {
    const A = URL.createObjectURL(new Blob([I], {
      type: C
    }));
    Fi(A, g);
  }
  openOrDownloadData(I, g, C = null) {
    const i = eZ(g) ? "application/pdf" : "";
    return this.downloadData(I, g, i), !1;
  }
  download(I, g, C) {
    let A;
    if (I)
      A = URL.createObjectURL(new Blob([I], {
        type: "application/pdf"
      }));
    else {
      if (!rl(g, "http://example.com")) {
        console.error(`download - not a valid URL: ${g}`);
        return;
      }
      A = g + "#pdfjs.action=download";
    }
    Fi(A, C);
  }
}
const zi = {
  EVENT: "event",
  TIMEOUT: "timeout"
};
async function Ic({
  target: Z,
  name: I,
  delay: g = 0
}) {
  if (typeof Z != "object" || !(Number.isInteger(g) && g >= 0))
    throw new Error("waitOnEventOrTimeout - invalid parameters.");
  const {
    promise: C,
    resolve: A
  } = Promise.withResolvers(), i = new AbortController();
  function l(c) {
    i.abort(), clearTimeout(d), A(c);
  }
  const s = Z instanceof El ? "_on" : "addEventListener";
  Z[s](I, l.bind(null, zi.EVENT), {
    signal: i.signal
  });
  const d = setTimeout(l.bind(null, zi.TIMEOUT), g);
  return C;
}
class El {
  #I = /* @__PURE__ */ Object.create(null);
  on(I, g, C = null) {
    this._on(I, g, {
      external: !0,
      once: C?.once,
      signal: C?.signal
    });
  }
  off(I, g, C = null) {
    this._off(I, g);
  }
  dispatch(I, g) {
    const C = this.#I[I];
    if (!C || C.length === 0)
      return;
    let A;
    for (const {
      listener: i,
      external: l,
      once: s
    } of C.slice(0)) {
      if (s && this._off(I, i), l) {
        (A ||= []).push(i);
        continue;
      }
      i(g);
    }
    if (A) {
      for (const i of A)
        i(g);
      A = null;
    }
  }
  _on(I, g, C = null) {
    let A = null;
    if (C?.signal instanceof AbortSignal) {
      const {
        signal: l
      } = C;
      if (l.aborted) {
        console.error("Cannot use an `aborted` signal.");
        return;
      }
      const s = () => this._off(I, g);
      A = () => l.removeEventListener("abort", s), l.addEventListener("abort", s);
    }
    (this.#I[I] ||= []).push({
      listener: g,
      external: C?.external === !0,
      once: C?.once === !0,
      rmAbort: A
    });
  }
  _off(I, g, C = null) {
    const A = this.#I[I];
    if (A)
      for (let i = 0, l = A.length; i < l; i++) {
        const s = A[i];
        if (s.listener === g) {
          s.rmAbort?.(), A.splice(i, 1);
          return;
        }
      }
  }
}
class Rg {
  constructor(I) {
    this.value = I;
  }
  valueOf() {
    return this.value;
  }
}
class lI extends Rg {
  constructor(I = "???") {
    super(I);
  }
  toString(I) {
    return `{${this.value}}`;
  }
}
class OI extends Rg {
  constructor(I, g = {}) {
    super(I), this.opts = g;
  }
  toString(I) {
    if (I)
      try {
        return I.memoizeIntlObject(Intl.NumberFormat, this.opts).format(this.value);
      } catch (g) {
        I.reportError(g);
      }
    return this.value.toString(10);
  }
}
class gg extends Rg {
  static supportsValue(I) {
    if (typeof I == "number" || I instanceof Date) return !0;
    if (I instanceof Rg) return gg.supportsValue(I.valueOf());
    if ("Temporal" in globalThis) {
      const g = globalThis.Temporal;
      if (I instanceof g.Instant || I instanceof g.PlainDateTime || I instanceof g.PlainDate || I instanceof g.PlainMonthDay || I instanceof g.PlainTime || I instanceof g.PlainYearMonth)
        return !0;
    }
    return !1;
  }
  constructor(I, g = {}) {
    I instanceof gg ? (g = {
      ...I.opts,
      ...g
    }, I = I.value) : I instanceof Rg && (I = I.valueOf()), typeof I == "object" && "calendarId" in I && g.calendar === void 0 && (g = {
      ...g,
      calendar: I.calendarId
    }), super(I), this.opts = g;
  }
  [Symbol.toPrimitive](I) {
    return I === "string" ? this.toString() : this.toNumber();
  }
  toNumber() {
    const I = this.value;
    if (typeof I == "number") return I;
    if (I instanceof Date) return I.getTime();
    if ("epochMilliseconds" in I)
      return I.epochMilliseconds;
    if ("toZonedDateTime" in I)
      return I.toZonedDateTime("UTC").epochMilliseconds;
    throw new TypeError("Unwrapping a non-number value as a number");
  }
  toString(I) {
    if (I)
      try {
        return I.memoizeIntlObject(Intl.DateTimeFormat, this.opts).format(this.value);
      } catch (g) {
        I.reportError(g);
      }
    return typeof this.value == "number" || this.value instanceof Date ? new Date(this.value).toISOString() : this.value.toString();
  }
}
const Ji = 100, gc = "⁨", Cc = "⁩";
function Ac(Z, I, g) {
  if (g === I || g instanceof OI && I instanceof OI && g.value === I.value)
    return !0;
  if (I instanceof OI && typeof g == "string") {
    let C = Z.memoizeIntlObject(Intl.PluralRules, I.opts).select(I.value);
    if (g === C)
      return !0;
  }
  return !1;
}
function Li(Z, I, g) {
  return I[g] ? Mg(Z, I[g].value) : (Z.reportError(new RangeError("No default")), new lI());
}
function YA(Z, I) {
  const g = [], C = /* @__PURE__ */ Object.create(null);
  for (const A of I)
    A.type === "narg" ? C[A.name] = _g(Z, A.value) : g.push(_g(Z, A));
  return {
    positional: g,
    named: C
  };
}
function _g(Z, I) {
  switch (I.type) {
    case "str":
      return I.value;
    case "num":
      return new OI(I.value, {
        minimumFractionDigits: I.precision
      });
    case "var":
      return ic(Z, I);
    case "mesg":
      return lc(Z, I);
    case "term":
      return sc(Z, I);
    case "func":
      return dc(Z, I);
    case "select":
      return Zc(Z, I);
    default:
      return new lI();
  }
}
function ic(Z, {
  name: I
}) {
  let g;
  if (Z.params)
    if (Object.prototype.hasOwnProperty.call(Z.params, I))
      g = Z.params[I];
    else
      return new lI(`$${I}`);
  else if (Z.args && Object.prototype.hasOwnProperty.call(Z.args, I))
    g = Z.args[I];
  else
    return Z.reportError(new ReferenceError(`Unknown variable: $${I}`)), new lI(`$${I}`);
  if (g instanceof Rg)
    return g;
  switch (typeof g) {
    case "string":
      return g;
    case "number":
      return new OI(g);
    case "object":
      if (gg.supportsValue(g))
        return new gg(g);
    default:
      return Z.reportError(new TypeError(`Variable type not supported: $${I}, ${typeof g}`)), new lI(`$${I}`);
  }
}
function lc(Z, {
  name: I,
  attr: g
}) {
  const C = Z.bundle._messages.get(I);
  if (!C)
    return Z.reportError(new ReferenceError(`Unknown message: ${I}`)), new lI(I);
  if (g) {
    const A = C.attributes[g];
    return A ? Mg(Z, A) : (Z.reportError(new ReferenceError(`Unknown attribute: ${g}`)), new lI(`${I}.${g}`));
  }
  return C.value ? Mg(Z, C.value) : (Z.reportError(new ReferenceError(`No value: ${I}`)), new lI(I));
}
function sc(Z, {
  name: I,
  attr: g,
  args: C
}) {
  const A = `-${I}`, i = Z.bundle._terms.get(A);
  if (!i)
    return Z.reportError(new ReferenceError(`Unknown term: ${A}`)), new lI(A);
  if (g) {
    const s = i.attributes[g];
    if (s) {
      Z.params = YA(Z, C).named;
      const d = Mg(Z, s);
      return Z.params = null, d;
    }
    return Z.reportError(new ReferenceError(`Unknown attribute: ${g}`)), new lI(`${A}.${g}`);
  }
  Z.params = YA(Z, C).named;
  const l = Mg(Z, i.value);
  return Z.params = null, l;
}
function dc(Z, {
  name: I,
  args: g
}) {
  let C = Z.bundle._functions[I];
  if (!C)
    return Z.reportError(new ReferenceError(`Unknown function: ${I}()`)), new lI(`${I}()`);
  if (typeof C != "function")
    return Z.reportError(new TypeError(`Function ${I}() is not callable`)), new lI(`${I}()`);
  try {
    let A = YA(Z, g);
    return C(A.positional, A.named);
  } catch (A) {
    return Z.reportError(A), new lI(`${I}()`);
  }
}
function Zc(Z, {
  selector: I,
  variants: g,
  star: C
}) {
  let A = _g(Z, I);
  if (A instanceof lI)
    return Li(Z, g, C);
  for (const i of g) {
    const l = _g(Z, i.key);
    if (Ac(Z, A, l))
      return Mg(Z, i.value);
  }
  return Li(Z, g, C);
}
function Pl(Z, I) {
  if (Z.dirty.has(I))
    return Z.reportError(new RangeError("Cyclic reference")), new lI();
  Z.dirty.add(I);
  const g = [], C = Z.bundle._useIsolating && I.length > 1;
  for (const A of I) {
    if (typeof A == "string") {
      g.push(Z.bundle._transform(A));
      continue;
    }
    if (Z.placeables++, Z.placeables > Ji)
      throw Z.dirty.delete(I), new RangeError(`Too many placeables expanded: ${Z.placeables}, max allowed is ${Ji}`);
    C && g.push(gc), g.push(_g(Z, A).toString(Z)), C && g.push(Cc);
  }
  return Z.dirty.delete(I), g.join("");
}
function Mg(Z, I) {
  return typeof I == "string" ? Z.bundle._transform(I) : Pl(Z, I);
}
class cc {
  constructor(I, g, C) {
    this.dirty = /* @__PURE__ */ new WeakSet(), this.params = null, this.placeables = 0, this.bundle = I, this.errors = g, this.args = C;
  }
  reportError(I) {
    if (!this.errors || !(I instanceof Error))
      throw I;
    this.errors.push(I);
  }
  memoizeIntlObject(I, g) {
    let C = this.bundle._intls.get(I);
    C || (C = {}, this.bundle._intls.set(I, C));
    let A = JSON.stringify(g);
    return C[A] || (C[A] = new I(this.bundle.locales, g)), C[A];
  }
}
function VA(Z, I) {
  const g = /* @__PURE__ */ Object.create(null);
  for (const [C, A] of Object.entries(Z))
    I.includes(C) && (g[C] = A.valueOf());
  return g;
}
const ki = ["unitDisplay", "currencyDisplay", "useGrouping", "minimumIntegerDigits", "minimumFractionDigits", "maximumFractionDigits", "minimumSignificantDigits", "maximumSignificantDigits"];
function Gc(Z, I) {
  let g = Z[0];
  if (g instanceof lI)
    return new lI(`NUMBER(${g.valueOf()})`);
  if (g instanceof OI)
    return new OI(g.valueOf(), {
      ...g.opts,
      ...VA(I, ki)
    });
  if (g instanceof gg)
    return new OI(g.toNumber(), {
      ...VA(I, ki)
    });
  throw new TypeError("Invalid argument to NUMBER");
}
const bc = ["dateStyle", "timeStyle", "fractionalSecondDigits", "dayPeriod", "hour12", "weekday", "era", "year", "month", "day", "hour", "minute", "second", "timeZoneName"];
function oc(Z, I) {
  let g = Z[0];
  if (g instanceof lI)
    return new lI(`DATETIME(${g.valueOf()})`);
  if (g instanceof gg || g instanceof OI)
    return new gg(g, VA(I, bc));
  throw new TypeError("Invalid argument to DATETIME");
}
const ri = /* @__PURE__ */ new Map();
function mc(Z) {
  const I = Array.isArray(Z) ? Z.join(" ") : Z;
  let g = ri.get(I);
  return g === void 0 && (g = /* @__PURE__ */ new Map(), ri.set(I, g)), g;
}
class ac {
  constructor(I, {
    functions: g,
    useIsolating: C = !0,
    transform: A = (i) => i
  } = {}) {
    this._terms = /* @__PURE__ */ new Map(), this._messages = /* @__PURE__ */ new Map(), this.locales = Array.isArray(I) ? I : [I], this._functions = {
      NUMBER: Gc,
      DATETIME: oc,
      ...g
    }, this._useIsolating = C, this._transform = A, this._intls = mc(I);
  }
  hasMessage(I) {
    return this._messages.has(I);
  }
  getMessage(I) {
    return this._messages.get(I);
  }
  addResource(I, {
    allowOverrides: g = !1
  } = {}) {
    const C = [];
    for (let A = 0; A < I.body.length; A++) {
      let i = I.body[A];
      if (i.id.startsWith("-")) {
        if (g === !1 && this._terms.has(i.id)) {
          C.push(new Error(`Attempt to override an existing term: "${i.id}"`));
          continue;
        }
        this._terms.set(i.id, i);
      } else {
        if (g === !1 && this._messages.has(i.id)) {
          C.push(new Error(`Attempt to override an existing message: "${i.id}"`));
          continue;
        }
        this._messages.set(i.id, i);
      }
    }
    return C;
  }
  formatPattern(I, g = null, C = null) {
    if (typeof I == "string")
      return this._transform(I);
    let A = new cc(this, C, g);
    try {
      return Pl(A, I).toString(A);
    } catch (i) {
      if (A.errors && i instanceof Error)
        return A.errors.push(i), new lI().toString(A);
      throw i;
    }
  }
}
const gA = /^(-?[a-zA-Z][\w-]*) *= */gm, Ti = /\.([a-zA-Z][\w-]*) *= */y, ec = /\*?\[/y, CA = /(-?[0-9]+(?:\.([0-9]+))?)/y, tc = /([a-zA-Z][\w-]*)/y, ji = /([$-])?([a-zA-Z][\w-]*)(?:\.([a-zA-Z][\w-]*))?/y, hc = /^[A-Z][A-Z0-9_-]*$/, BC = /([^{}\n\r]+)/y, Bc = /([^\\"\n\r]*)/y, Qi = /\\([\\"])/y, xi = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{6})/y, Wc = /^\n+/, Oi = / +$/, wc = / *\r?\n/g, nc = /( *)$/, Yc = /{\s*/y, Ui = /\s*}/y, Vc = /\[\s*/y, Nc = /\s*] */y, uc = /\s*\(\s*/y, Rc = /\s*->\s*/y, yc = /\s*:\s*/y, Xc = /\s*,?\s*/y, Hc = /\s+/y;
class Mc {
  constructor(I) {
    this.body = [], gA.lastIndex = 0;
    let g = 0;
    for (; ; ) {
      let Y = gA.exec(I);
      if (Y === null)
        break;
      g = gA.lastIndex;
      try {
        this.body.push(d(Y[1]));
      } catch (y) {
        if (y instanceof SyntaxError)
          continue;
        throw y;
      }
    }
    function C(Y) {
      return Y.lastIndex = g, Y.test(I);
    }
    function A(Y, y) {
      if (I[g] === Y)
        return g++, !0;
      if (y)
        throw new y(`Expected ${Y}`);
      return !1;
    }
    function i(Y, y) {
      if (C(Y))
        return g = Y.lastIndex, !0;
      if (y)
        throw new y(`Expected ${Y.toString()}`);
      return !1;
    }
    function l(Y) {
      Y.lastIndex = g;
      let y = Y.exec(I);
      if (y === null)
        throw new SyntaxError(`Expected ${Y.toString()}`);
      return g = Y.lastIndex, y;
    }
    function s(Y) {
      return l(Y)[1];
    }
    function d(Y) {
      let y = G(), X = c();
      if (y === null && Object.keys(X).length === 0)
        throw new SyntaxError("Expected message value or attributes");
      return {
        id: Y,
        value: y,
        attributes: X
      };
    }
    function c() {
      let Y = /* @__PURE__ */ Object.create(null);
      for (; C(Ti); ) {
        let y = s(Ti), X = G();
        if (X === null)
          throw new SyntaxError("Expected attribute value");
        Y[y] = X;
      }
      return Y;
    }
    function G() {
      let Y;
      if (C(BC) && (Y = s(BC)), I[g] === "{" || I[g] === "}")
        return b(Y ? [Y] : [], 1 / 0);
      let y = V();
      return y ? Y ? b([Y, y], y.length) : (y.value = N(y.value, Wc), b([y], y.length)) : Y ? N(Y, Oi) : null;
    }
    function b(Y = [], y) {
      for (; ; ) {
        if (C(BC)) {
          Y.push(s(BC));
          continue;
        }
        if (I[g] === "{") {
          Y.push(o());
          continue;
        }
        if (I[g] === "}")
          throw new SyntaxError("Unbalanced closing brace");
        let p = V();
        if (p) {
          Y.push(p), y = Math.min(y, p.length);
          continue;
        }
        break;
      }
      let X = Y.length - 1, K = Y[X];
      typeof K == "string" && (Y[X] = N(K, Oi));
      let S = [];
      for (let p of Y)
        p instanceof vi && (p = p.value.slice(0, p.value.length - y)), p && S.push(p);
      return S;
    }
    function o() {
      i(Yc, SyntaxError);
      let Y = m();
      if (i(Ui))
        return Y;
      if (i(Rc)) {
        let y = h();
        return i(Ui, SyntaxError), {
          type: "select",
          selector: Y,
          ...y
        };
      }
      throw new SyntaxError("Unclosed placeable");
    }
    function m() {
      if (I[g] === "{")
        return o();
      if (C(ji)) {
        let [, Y, y, X = null] = l(ji);
        if (Y === "$")
          return {
            type: "var",
            name: y
          };
        if (i(uc)) {
          let K = e();
          if (Y === "-")
            return {
              type: "term",
              name: y,
              attr: X,
              args: K
            };
          if (hc.test(y))
            return {
              type: "func",
              name: y,
              args: K
            };
          throw new SyntaxError("Function names must be all upper-case");
        }
        return Y === "-" ? {
          type: "term",
          name: y,
          attr: X,
          args: []
        } : {
          type: "mesg",
          name: y,
          attr: X
        };
      }
      return W();
    }
    function e() {
      let Y = [];
      for (; ; ) {
        switch (I[g]) {
          case ")":
            return g++, Y;
          case void 0:
            throw new SyntaxError("Unclosed argument list");
        }
        Y.push(a()), i(Xc);
      }
    }
    function a() {
      let Y = m();
      return Y.type !== "mesg" ? Y : i(yc) ? {
        type: "narg",
        name: Y.name,
        value: W()
      } : Y;
    }
    function h() {
      let Y = [], y = 0, X;
      for (; C(ec); ) {
        A("*") && (X = y);
        let K = t(), S = G();
        if (S === null)
          throw new SyntaxError("Expected variant value");
        Y[y++] = {
          key: K,
          value: S
        };
      }
      if (y === 0)
        return null;
      if (X === void 0)
        throw new SyntaxError("Expected default variant");
      return {
        variants: Y,
        star: X
      };
    }
    function t() {
      i(Vc, SyntaxError);
      let Y;
      return C(CA) ? Y = B() : Y = {
        type: "str",
        value: s(tc)
      }, i(Nc, SyntaxError), Y;
    }
    function W() {
      if (C(CA))
        return B();
      if (I[g] === '"')
        return w();
      throw new SyntaxError("Invalid expression");
    }
    function B() {
      let [, Y, y = ""] = l(CA), X = y.length;
      return {
        type: "num",
        value: parseFloat(Y),
        precision: X
      };
    }
    function w() {
      A('"', SyntaxError);
      let Y = "";
      for (; ; ) {
        if (Y += s(Bc), I[g] === "\\") {
          Y += n();
          continue;
        }
        if (A('"'))
          return {
            type: "str",
            value: Y
          };
        throw new SyntaxError("Unclosed string literal");
      }
    }
    function n() {
      if (C(Qi))
        return s(Qi);
      if (C(xi)) {
        let [, Y, y] = l(xi), X = parseInt(Y || y, 16);
        return X <= 55295 || 57344 <= X ? String.fromCodePoint(X) : "�";
      }
      throw new SyntaxError("Unknown escape sequence");
    }
    function V() {
      let Y = g;
      switch (i(Hc), I[g]) {
        case ".":
        case "[":
        case "*":
        case "}":
        case void 0:
          return !1;
        case "{":
          return R(I.slice(Y, g));
      }
      return I[g - 1] === " " ? R(I.slice(Y, g)) : !1;
    }
    function N(Y, y) {
      return Y.replace(y, "");
    }
    function R(Y) {
      let y = Y.replace(wc, `
`), X = nc.exec(Y)[1].length;
      return new vi(y, X);
    }
  }
}
class vi {
  constructor(I, g) {
    this.value = I, this.length = g;
  }
}
const Dc = /<|&#?\w+;/, Kc = {
  "http://www.w3.org/1999/xhtml": ["em", "strong", "small", "s", "cite", "q", "dfn", "abbr", "data", "time", "code", "var", "samp", "kbd", "sub", "sup", "i", "b", "u", "mark", "bdi", "bdo", "span", "br", "wbr"]
}, Sc = {
  "http://www.w3.org/1999/xhtml": {
    global: ["title", "aria-description", "aria-label", "aria-valuetext"],
    a: ["download"],
    area: ["download", "alt"],
    input: ["alt", "placeholder"],
    menuitem: ["label"],
    menu: ["label"],
    optgroup: ["label"],
    option: ["label"],
    track: ["label"],
    img: ["alt"],
    textarea: ["placeholder"],
    th: ["abbr"]
  },
  "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul": {
    global: ["accesskey", "aria-label", "aria-valuetext", "label", "title", "tooltiptext"],
    description: ["value"],
    key: ["key", "keycode"],
    label: ["value"],
    textbox: ["placeholder", "value"]
  }
};
function pc(Z, I) {
  const {
    value: g
  } = I;
  if (typeof g == "string")
    if (Z.localName === "title" && Z.namespaceURI === "http://www.w3.org/1999/xhtml")
      Z.textContent = g;
    else if (!Dc.test(g))
      Z.textContent = g;
    else {
      const C = Z.ownerDocument.createElementNS("http://www.w3.org/1999/xhtml", "template");
      C.innerHTML = g, Fc(C.content, Z);
    }
  fl(I, Z);
}
function Fc(Z, I) {
  for (const g of Z.childNodes)
    if (g.nodeType !== g.TEXT_NODE) {
      if (g.hasAttribute("data-l10n-name")) {
        const C = Jc(I, g);
        Z.replaceChild(C, g);
        continue;
      }
      if (kc(g)) {
        const C = Lc(g);
        Z.replaceChild(C, g);
        continue;
      }
      console.warn(`An element of forbidden type "${g.localName}" was found in the translation. Only safe text-level elements and elements with data-l10n-name are allowed.`), Z.replaceChild(NA(g), g);
    }
  I.textContent = "", I.appendChild(Z);
}
function zc(Z, I) {
  if (!Z)
    return !1;
  for (let g of Z)
    if (g.name === I)
      return !0;
  return !1;
}
function fl(Z, I) {
  const g = I.hasAttribute("data-l10n-attrs") ? I.getAttribute("data-l10n-attrs").split(",").map((C) => C.trim()) : null;
  for (const C of Array.from(I.attributes))
    Ei(C.name, I, g) && !zc(Z.attributes, C.name) && I.removeAttribute(C.name);
  if (Z.attributes)
    for (const C of Array.from(Z.attributes))
      Ei(C.name, I, g) && I.getAttribute(C.name) !== C.value && I.setAttribute(C.name, C.value);
}
function Jc(Z, I) {
  const g = I.getAttribute("data-l10n-name"), C = Z.querySelector(`[data-l10n-name="${g}"]`);
  if (!C)
    return console.warn(`An element named "${g}" wasn't found in the source.`), NA(I);
  if (C.localName !== I.localName)
    return console.warn(`An element named "${g}" was found in the translation but its type ${I.localName} didn't match the element found in the source (${C.localName}).`), NA(I);
  Z.removeChild(C);
  const A = C.cloneNode(!1);
  return _l(I, A);
}
function Lc(Z) {
  const I = Z.ownerDocument.createElement(Z.localName);
  return _l(Z, I);
}
function NA(Z) {
  return Z.ownerDocument.createTextNode(Z.textContent);
}
function kc(Z) {
  const I = Kc[Z.namespaceURI];
  return I && I.includes(Z.localName);
}
function Ei(Z, I, g = null) {
  if (g && g.includes(Z))
    return !0;
  const C = Sc[I.namespaceURI];
  if (!C)
    return !1;
  const A = Z.toLowerCase(), i = I.localName;
  if (C.global.includes(A))
    return !0;
  if (!C[i])
    return !1;
  if (C[i].includes(A))
    return !0;
  if (I.namespaceURI === "http://www.w3.org/1999/xhtml" && i === "input" && A === "value") {
    const l = I.type.toLowerCase();
    if (l === "submit" || l === "button" || l === "reset")
      return !0;
  }
  return !1;
}
function _l(Z, I) {
  return I.textContent = Z.textContent, fl(Z, I), I;
}
class rc extends Array {
  static from(I) {
    return I instanceof this ? I : new this(I);
  }
}
class Tc extends rc {
  constructor(I) {
    if (super(), Symbol.asyncIterator in Object(I))
      this.iterator = I[Symbol.asyncIterator]();
    else if (Symbol.iterator in Object(I))
      this.iterator = I[Symbol.iterator]();
    else
      throw new TypeError("Argument must implement the iteration protocol.");
  }
  [Symbol.asyncIterator]() {
    const I = this;
    let g = 0;
    return {
      async next() {
        return I.length <= g && I.push(I.iterator.next()), I[g++];
      }
    };
  }
  async touchNext(I = 1) {
    let g = 0;
    for (; g++ < I; ) {
      const C = this[this.length - 1];
      if (C && (await C).done)
        break;
      this.push(this.iterator.next());
    }
    return this[this.length - 1];
  }
}
class jc {
  constructor(I = [], g) {
    this.resourceIds = I, this.generateBundles = g, this.onChange(!0);
  }
  addResourceIds(I, g = !1) {
    return this.resourceIds.push(...I), this.onChange(g), this.resourceIds.length;
  }
  removeResourceIds(I) {
    return this.resourceIds = this.resourceIds.filter((g) => !I.includes(g)), this.onChange(), this.resourceIds.length;
  }
  async formatWithFallback(I, g) {
    const C = [];
    let A = !1;
    for await (const i of this.bundles) {
      A = !0;
      const l = Oc(g, i, I, C);
      if (l.size === 0)
        break;
      if (typeof console < "u") {
        const s = i.locales[0], d = Array.from(l).join(", ");
        console.warn(`[fluent] Missing translations in ${s}: ${d}`);
      }
    }
    return !A && typeof console < "u" && console.warn(`[fluent] Request for keys failed because no resource bundles got generated.
  keys: ${JSON.stringify(I)}.
  resourceIds: ${JSON.stringify(this.resourceIds)}.`), C;
  }
  formatMessages(I) {
    return this.formatWithFallback(I, xc);
  }
  formatValues(I) {
    return this.formatWithFallback(I, Qc);
  }
  async formatValue(I, g) {
    const [C] = await this.formatValues([{
      id: I,
      args: g
    }]);
    return C;
  }
  handleEvent() {
    this.onChange();
  }
  onChange(I = !1) {
    this.bundles = Tc.from(this.generateBundles(this.resourceIds)), I && this.bundles.touchNext(2);
  }
}
function Qc(Z, I, g, C) {
  return g.value ? Z.formatPattern(g.value, C, I) : null;
}
function xc(Z, I, g, C) {
  const A = {
    value: null,
    attributes: null
  };
  g.value && (A.value = Z.formatPattern(g.value, C, I));
  let i = Object.keys(g.attributes);
  if (i.length > 0) {
    A.attributes = new Array(i.length);
    for (let [l, s] of i.entries()) {
      let d = Z.formatPattern(g.attributes[s], C, I);
      A.attributes[l] = {
        name: s,
        value: d
      };
    }
  }
  return A;
}
function Oc(Z, I, g, C) {
  const A = [], i = /* @__PURE__ */ new Set();
  return g.forEach(({
    id: l,
    args: s
  }, d) => {
    if (C[d] !== void 0)
      return;
    let c = I.getMessage(l);
    if (c) {
      if (A.length = 0, C[d] = Z(I, A, c, s), A.length > 0 && typeof console < "u") {
        const G = I.locales[0], b = A.join(", ");
        console.warn(`[fluent][resolver] errors in ${G}/${l}: ${b}.`);
      }
    } else
      i.add(l);
  }), i;
}
const ig = "data-l10n-id", Jg = "data-l10n-args", Uc = `[${ig}]`;
class vc extends jc {
  constructor(I, g) {
    super(I, g), this.roots = /* @__PURE__ */ new Set(), this.pendingrAF = null, this.pendingElements = /* @__PURE__ */ new Set(), this.windowElement = null, this.mutationObserver = null, this.observerConfig = {
      attributes: !0,
      characterData: !1,
      childList: !0,
      subtree: !0,
      attributeFilter: [ig, Jg]
    };
  }
  onChange(I = !1) {
    super.onChange(I), this.roots && this.translateRoots();
  }
  setAttributes(I, g, C) {
    return I.setAttribute(ig, g), C ? I.setAttribute(Jg, JSON.stringify(C)) : I.removeAttribute(Jg), I;
  }
  getAttributes(I) {
    return {
      id: I.getAttribute(ig),
      args: JSON.parse(I.getAttribute(Jg) || null)
    };
  }
  connectRoot(I) {
    for (const g of this.roots)
      if (g === I || g.contains(I) || I.contains(g))
        throw new Error("Cannot add a root that overlaps with existing root.");
    if (this.windowElement) {
      if (this.windowElement !== I.ownerDocument.defaultView)
        throw new Error(`Cannot connect a root:
          DOMLocalization already has a root from a different window.`);
    } else
      this.windowElement = I.ownerDocument.defaultView, this.mutationObserver = new this.windowElement.MutationObserver((g) => this.translateMutations(g));
    this.roots.add(I), this.mutationObserver.observe(I, this.observerConfig);
  }
  disconnectRoot(I) {
    return this.roots.delete(I), this.pauseObserving(), this.roots.size === 0 ? (this.mutationObserver = null, this.windowElement && this.pendingrAF && this.windowElement.cancelAnimationFrame(this.pendingrAF), this.windowElement = null, this.pendingrAF = null, this.pendingElements.clear(), !0) : (this.resumeObserving(), !1);
  }
  translateRoots() {
    const I = Array.from(this.roots);
    return Promise.all(I.map((g) => this.translateFragment(g)));
  }
  pauseObserving() {
    this.mutationObserver && (this.translateMutations(this.mutationObserver.takeRecords()), this.mutationObserver.disconnect());
  }
  resumeObserving() {
    if (this.mutationObserver)
      for (const I of this.roots)
        this.mutationObserver.observe(I, this.observerConfig);
  }
  translateMutations(I) {
    for (const g of I)
      switch (g.type) {
        case "attributes":
          g.target.hasAttribute("data-l10n-id") && this.pendingElements.add(g.target);
          break;
        case "childList":
          for (const C of g.addedNodes)
            if (C.nodeType === C.ELEMENT_NODE)
              if (C.childElementCount)
                for (const A of this.getTranslatables(C))
                  this.pendingElements.add(A);
              else C.hasAttribute(ig) && this.pendingElements.add(C);
          break;
      }
    this.pendingElements.size > 0 && this.pendingrAF === null && (this.pendingrAF = this.windowElement.requestAnimationFrame(() => {
      this.translateElements(Array.from(this.pendingElements)), this.pendingElements.clear(), this.pendingrAF = null;
    }));
  }
  translateFragment(I) {
    return this.translateElements(this.getTranslatables(I));
  }
  async translateElements(I) {
    if (!I.length)
      return;
    const g = I.map(this.getKeysForElement), C = await this.formatMessages(g);
    return this.applyTranslations(I, C);
  }
  applyTranslations(I, g) {
    this.pauseObserving();
    for (let C = 0; C < I.length; C++)
      g[C] !== void 0 && pc(I[C], g[C]);
    this.resumeObserving();
  }
  getTranslatables(I) {
    const g = Array.from(I.querySelectorAll(Uc));
    return typeof I.hasAttribute == "function" && I.hasAttribute(ig) && g.push(I), g;
  }
  getKeysForElement(I) {
    return {
      id: I.getAttribute(ig),
      args: JSON.parse(I.getAttribute(Jg) || null)
    };
  }
}
class MC {
  #I;
  #g;
  #A;
  #C;
  constructor({
    lang: I,
    isRTL: g
  }, C = null) {
    this.#A = MC.#i(I), this.#C = C, this.#I = g ?? MC.#l(this.#A) ? "rtl" : "ltr";
  }
  _setL10n(I) {
    this.#C = I;
  }
  getLanguage() {
    return this.#A;
  }
  getDirection() {
    return this.#I;
  }
  async get(I, g = null, C) {
    return Array.isArray(I) ? (I = I.map((l) => ({
      id: l
    })), (await this.#C.formatMessages(I)).map((l) => l.value)) : (await this.#C.formatMessages([{
      id: I,
      args: g
    }]))[0]?.value || C;
  }
  async translate(I) {
    (this.#g ||= /* @__PURE__ */ new Set()).add(I);
    try {
      this.#C.connectRoot(I), await this.#C.translateRoots();
    } catch {
    }
  }
  async translateOnce(I) {
    try {
      await this.#C.translateElements([I]);
    } catch (g) {
      console.error("translateOnce:", g);
    }
  }
  async destroy() {
    if (this.#g) {
      for (const I of this.#g)
        this.#C.disconnectRoot(I);
      this.#g.clear(), this.#g = null;
    }
    this.#C.pauseObserving();
  }
  pause() {
    this.#C.pauseObserving();
  }
  resume() {
    this.#C.resumeObserving();
  }
  static #i(I) {
    return I = I?.toLowerCase() || "en-us", {
      en: "en-us",
      es: "es-es",
      fy: "fy-nl",
      ga: "ga-ie",
      gu: "gu-in",
      hi: "hi-in",
      hy: "hy-am",
      nb: "nb-no",
      ne: "ne-np",
      nn: "nn-no",
      pa: "pa-in",
      pt: "pt-pt",
      sv: "sv-se",
      zh: "zh-cn"
    }[I] || I;
  }
  static #l(I) {
    const g = I.split("-", 1)[0];
    return ["ar", "he", "fa", "ps", "ur"].includes(g);
  }
}
function Ec() {
  const {
    isAndroid: Z,
    isLinux: I,
    isMac: g,
    isWindows: C
  } = mZ.platform;
  return I ? "linux" : C ? "windows" : g ? "macos" : Z ? "android" : "other";
}
function Pi(Z, I) {
  const g = new Mc(I), C = new ac(Z, {
    functions: {
      PLATFORM: Ec
    }
  }), A = C.addResource(g);
  return A.length && console.error("L10n errors", A), C;
}
class xI extends MC {
  constructor(I) {
    super({
      lang: I
    });
    const g = I ? xI.#I.bind(xI, "en-us", this.getLanguage()) : xI.#C.bind(xI, this.getLanguage());
    this._setL10n(new vc([], g));
  }
  static async *#I(I, g) {
    const {
      baseURL: C,
      paths: A
    } = await this.#A(), i = [g];
    if (I !== g) {
      const s = g.split("-", 1)[0];
      s !== g && i.push(s), i.push(I);
    }
    const l = i.map((s) => [s, this.#g(s, C, A)]);
    for (const [s, d] of l) {
      const c = await d;
      c ? yield c : s === "en-us" && (yield this.#i(s));
    }
  }
  static async #g(I, g, C) {
    const A = C[I];
    if (!A)
      return null;
    const i = new URL(A, g), l = await ni(i, "text");
    return Pi(I, l);
  }
  static async #A() {
    try {
      const {
        href: I
      } = document.querySelector('link[type="application/l10n"]'), g = await ni(I, "json");
      return {
        baseURL: I.substring(0, I.lastIndexOf("/") + 1) || "./",
        paths: g
      };
    } catch {
    }
    return {
      baseURL: "./",
      paths: /* @__PURE__ */ Object.create(null)
    };
  }
  static async *#C(I) {
    yield this.#i(I);
  }
  static async #i(I) {
    return Pi(I, `pdfjs-previous-button =
    .title = Previous Page
pdfjs-previous-button-label = Previous
pdfjs-next-button =
    .title = Next Page
pdfjs-next-button-label = Next
pdfjs-page-input =
    .title = Page
pdfjs-of-pages = of { $pagesCount }
pdfjs-page-of-pages = ({ $pageNumber } of { $pagesCount })
pdfjs-zoom-out-button =
    .title = Zoom Out
pdfjs-zoom-out-button-label = Zoom Out
pdfjs-zoom-in-button =
    .title = Zoom In
pdfjs-zoom-in-button-label = Zoom In
pdfjs-zoom-select =
    .title = Zoom
pdfjs-presentation-mode-button =
    .title = Switch to Presentation Mode
pdfjs-presentation-mode-button-label = Presentation Mode
pdfjs-open-file-button =
    .title = Open File
pdfjs-open-file-button-label = Open
pdfjs-print-button =
    .title = Print
pdfjs-print-button-label = Print
pdfjs-save-button =
    .title = Save
pdfjs-save-button-label = Save
pdfjs-download-button =
    .title = Download
pdfjs-download-button-label = Download
pdfjs-bookmark-button =
    .title = Current Page (View URL from Current Page)
pdfjs-bookmark-button-label = Current Page
pdfjs-tools-button =
    .title = Tools
pdfjs-tools-button-label = Tools
pdfjs-first-page-button =
    .title = Go to First Page
pdfjs-first-page-button-label = Go to First Page
pdfjs-last-page-button =
    .title = Go to Last Page
pdfjs-last-page-button-label = Go to Last Page
pdfjs-page-rotate-cw-button =
    .title = Rotate Clockwise
pdfjs-page-rotate-cw-button-label = Rotate Clockwise
pdfjs-page-rotate-ccw-button =
    .title = Rotate Counterclockwise
pdfjs-page-rotate-ccw-button-label = Rotate Counterclockwise
pdfjs-cursor-text-select-tool-button =
    .title = Enable Text Selection Tool
pdfjs-cursor-text-select-tool-button-label = Text Selection Tool
pdfjs-cursor-hand-tool-button =
    .title = Enable Hand Tool
pdfjs-cursor-hand-tool-button-label = Hand Tool
pdfjs-scroll-page-button =
    .title = Use Page Scrolling
pdfjs-scroll-page-button-label = Page Scrolling
pdfjs-scroll-vertical-button =
    .title = Use Vertical Scrolling
pdfjs-scroll-vertical-button-label = Vertical Scrolling
pdfjs-scroll-horizontal-button =
    .title = Use Horizontal Scrolling
pdfjs-scroll-horizontal-button-label = Horizontal Scrolling
pdfjs-scroll-wrapped-button =
    .title = Use Wrapped Scrolling
pdfjs-scroll-wrapped-button-label = Wrapped Scrolling
pdfjs-spread-none-button =
    .title = Do not join page spreads
pdfjs-spread-none-button-label = No Spreads
pdfjs-spread-odd-button =
    .title = Join page spreads starting with odd-numbered pages
pdfjs-spread-odd-button-label = Odd Spreads
pdfjs-spread-even-button =
    .title = Join page spreads starting with even-numbered pages
pdfjs-spread-even-button-label = Even Spreads
pdfjs-document-properties-button =
    .title = Document Properties…
pdfjs-document-properties-button-label = Document Properties…
pdfjs-document-properties-file-name = File name:
pdfjs-document-properties-file-size = File size:
pdfjs-document-properties-size-kb = { NUMBER($kb, maximumSignificantDigits: 3) } KB ({ $b } bytes)
pdfjs-document-properties-size-mb = { NUMBER($mb, maximumSignificantDigits: 3) } MB ({ $b } bytes)
pdfjs-document-properties-title = Title:
pdfjs-document-properties-author = Author:
pdfjs-document-properties-subject = Subject:
pdfjs-document-properties-keywords = Keywords:
pdfjs-document-properties-creation-date = Creation Date:
pdfjs-document-properties-modification-date = Modification Date:
pdfjs-document-properties-date-time-string = { DATETIME($dateObj, dateStyle: "short", timeStyle: "medium") }
pdfjs-document-properties-creator = Creator:
pdfjs-document-properties-producer = PDF Producer:
pdfjs-document-properties-version = PDF Version:
pdfjs-document-properties-page-count = Page Count:
pdfjs-document-properties-page-size = Page Size:
pdfjs-document-properties-page-size-unit-inches = in
pdfjs-document-properties-page-size-unit-millimeters = mm
pdfjs-document-properties-page-size-orientation-portrait = portrait
pdfjs-document-properties-page-size-orientation-landscape = landscape
pdfjs-document-properties-page-size-name-a-three = A3
pdfjs-document-properties-page-size-name-a-four = A4
pdfjs-document-properties-page-size-name-letter = Letter
pdfjs-document-properties-page-size-name-legal = Legal
pdfjs-document-properties-page-size-dimension-string = { $width } × { $height } { $unit } ({ $orientation })
pdfjs-document-properties-page-size-dimension-name-string = { $width } × { $height } { $unit } ({ $name }, { $orientation })
pdfjs-document-properties-linearized = Fast Web View:
pdfjs-document-properties-linearized-yes = Yes
pdfjs-document-properties-linearized-no = No
pdfjs-document-properties-close-button = Close
pdfjs-print-progress-message = Preparing document for printing…
pdfjs-print-progress-percent = { $progress }%
pdfjs-print-progress-close-button = Cancel
pdfjs-printing-not-supported = Warning: Printing is not fully supported by this browser.
pdfjs-printing-not-ready = Warning: The PDF is not fully loaded for printing.
pdfjs-toggle-sidebar-button =
    .title = Toggle Sidebar
pdfjs-toggle-sidebar-notification-button =
    .title = Toggle Sidebar (document contains outline/attachments/layers)
pdfjs-toggle-sidebar-button-label = Toggle Sidebar
pdfjs-document-outline-button =
    .title = Show Document Outline (double-click to expand/collapse all items)
pdfjs-document-outline-button-label = Document Outline
pdfjs-attachments-button =
    .title = Show Attachments
pdfjs-attachments-button-label = Attachments
pdfjs-layers-button =
    .title = Show Layers (double-click to reset all layers to the default state)
pdfjs-layers-button-label = Layers
pdfjs-thumbs-button =
    .title = Show Thumbnails
pdfjs-thumbs-button-label = Thumbnails
pdfjs-current-outline-item-button =
    .title = Find Current Outline Item
pdfjs-current-outline-item-button-label = Current Outline Item
pdfjs-findbar-button =
    .title = Find in Document
pdfjs-findbar-button-label = Find
pdfjs-additional-layers = Additional Layers
pdfjs-thumb-page-title =
    .title = Page { $page }
pdfjs-thumb-page-canvas =
    .aria-label = Thumbnail of Page { $page }
pdfjs-find-input =
    .title = Find
    .placeholder = Find in document…
pdfjs-find-previous-button =
    .title = Find the previous occurrence of the phrase
pdfjs-find-previous-button-label = Previous
pdfjs-find-next-button =
    .title = Find the next occurrence of the phrase
pdfjs-find-next-button-label = Next
pdfjs-find-highlight-checkbox = Highlight All
pdfjs-find-match-case-checkbox-label = Match Case
pdfjs-find-match-diacritics-checkbox-label = Match Diacritics
pdfjs-find-entire-word-checkbox-label = Whole Words
pdfjs-find-reached-top = Reached top of document, continued from bottom
pdfjs-find-reached-bottom = Reached end of document, continued from top
pdfjs-find-match-count =
    { $total ->
        [one] { $current } of { $total } match
       *[other] { $current } of { $total } matches
    }
pdfjs-find-match-count-limit =
    { $limit ->
        [one] More than { $limit } match
       *[other] More than { $limit } matches
    }
pdfjs-find-not-found = Phrase not found
pdfjs-page-scale-width = Page Width
pdfjs-page-scale-fit = Page Fit
pdfjs-page-scale-auto = Automatic Zoom
pdfjs-page-scale-actual = Actual Size
pdfjs-page-scale-percent = { $scale }%
pdfjs-page-landmark =
    .aria-label = Page { $page }
pdfjs-loading-error = An error occurred while loading the PDF.
pdfjs-invalid-file-error = Invalid or corrupted PDF file.
pdfjs-missing-file-error = Missing PDF file.
pdfjs-unexpected-response-error = Unexpected server response.
pdfjs-rendering-error = An error occurred while rendering the page.
pdfjs-annotation-date-time-string = { DATETIME($dateObj, dateStyle: "short", timeStyle: "medium") }
pdfjs-text-annotation-type =
    .alt = [{ $type } Annotation]
pdfjs-password-label = Enter the password to open this PDF file.
pdfjs-password-invalid = Invalid password. Please try again.
pdfjs-password-ok-button = OK
pdfjs-password-cancel-button = Cancel
pdfjs-web-fonts-disabled = Web fonts are disabled: unable to use embedded PDF fonts.
pdfjs-editor-free-text-button =
    .title = Text
pdfjs-editor-color-picker-free-text-input =
    .title = Change text color
pdfjs-editor-free-text-button-label = Text
pdfjs-editor-ink-button =
    .title = Draw
pdfjs-editor-color-picker-ink-input =
    .title = Change drawing color
pdfjs-editor-ink-button-label = Draw
pdfjs-editor-stamp-button =
    .title = Add or edit images
pdfjs-editor-stamp-button-label = Add or edit images
pdfjs-editor-highlight-button =
    .title = Highlight
pdfjs-editor-highlight-button-label = Highlight
pdfjs-highlight-floating-button1 =
    .title = Highlight
    .aria-label = Highlight
pdfjs-highlight-floating-button-label = Highlight
pdfjs-comment-floating-button =
    .title = Comment
    .aria-label = Comment
pdfjs-comment-floating-button-label = Comment
pdfjs-editor-comment-button =
    .title = Comment
    .aria-label = Comment
pdfjs-editor-comment-button-label = Comment
pdfjs-editor-signature-button =
    .title = Add signature
pdfjs-editor-signature-button-label = Add signature
pdfjs-editor-highlight-editor =
    .aria-label = Highlight editor
pdfjs-editor-ink-editor =
    .aria-label = Drawing editor
pdfjs-editor-signature-editor1 =
    .aria-description = Signature editor: { $description }
pdfjs-editor-stamp-editor =
    .aria-label = Image editor
pdfjs-editor-remove-ink-button =
    .title = Remove drawing
pdfjs-editor-remove-freetext-button =
    .title = Remove text
pdfjs-editor-remove-stamp-button =
    .title = Remove image
pdfjs-editor-remove-highlight-button =
    .title = Remove highlight
pdfjs-editor-remove-signature-button =
    .title = Remove signature
pdfjs-editor-free-text-color-input = Color
pdfjs-editor-free-text-size-input = Size
pdfjs-editor-ink-color-input = Color
pdfjs-editor-ink-thickness-input = Thickness
pdfjs-editor-ink-opacity-input = Opacity
pdfjs-editor-stamp-add-image-button =
    .title = Add image
pdfjs-editor-stamp-add-image-button-label = Add image
pdfjs-editor-free-highlight-thickness-input = Thickness
pdfjs-editor-free-highlight-thickness-title =
    .title = Change thickness when highlighting items other than text
pdfjs-editor-add-signature-container =
    .aria-label = Signature controls and saved signatures
pdfjs-editor-signature-add-signature-button =
    .title = Add new signature
pdfjs-editor-signature-add-signature-button-label = Add new signature
pdfjs-editor-add-saved-signature-button =
    .title = Saved signature: { $description }
pdfjs-free-text2 =
    .aria-label = Text Editor
    .default-content = Start typing…
pdfjs-editor-comments-sidebar-title =
    { $count ->
        [one] Comment
       *[other] Comments
    }
pdfjs-editor-comments-sidebar-close-button =
    .title = Close the sidebar
    .aria-label = Close the sidebar
pdfjs-editor-comments-sidebar-close-button-label = Close the sidebar
pdfjs-editor-comments-sidebar-no-comments1 = See something noteworthy? Highlight it and leave a comment.
pdfjs-editor-comments-sidebar-no-comments-link = Learn more
pdfjs-editor-alt-text-button =
    .aria-label = Alt text
pdfjs-editor-alt-text-button-label = Alt text
pdfjs-editor-alt-text-edit-button =
    .aria-label = Edit alt text
pdfjs-editor-alt-text-dialog-label = Choose an option
pdfjs-editor-alt-text-dialog-description = Alt text (alternative text) helps when people can’t see the image or when it doesn’t load.
pdfjs-editor-alt-text-add-description-label = Add a description
pdfjs-editor-alt-text-add-description-description = Aim for 1-2 sentences that describe the subject, setting, or actions.
pdfjs-editor-alt-text-mark-decorative-label = Mark as decorative
pdfjs-editor-alt-text-mark-decorative-description = This is used for ornamental images, like borders or watermarks.
pdfjs-editor-alt-text-cancel-button = Cancel
pdfjs-editor-alt-text-save-button = Save
pdfjs-editor-alt-text-decorative-tooltip = Marked as decorative
pdfjs-editor-alt-text-textarea =
    .placeholder = For example, “A young man sits down at a table to eat a meal”
pdfjs-editor-resizer-top-left =
    .aria-label = Top left corner — resize
pdfjs-editor-resizer-top-middle =
    .aria-label = Top middle — resize
pdfjs-editor-resizer-top-right =
    .aria-label = Top right corner — resize
pdfjs-editor-resizer-middle-right =
    .aria-label = Middle right — resize
pdfjs-editor-resizer-bottom-right =
    .aria-label = Bottom right corner — resize
pdfjs-editor-resizer-bottom-middle =
    .aria-label = Bottom middle — resize
pdfjs-editor-resizer-bottom-left =
    .aria-label = Bottom left corner — resize
pdfjs-editor-resizer-middle-left =
    .aria-label = Middle left — resize
pdfjs-editor-highlight-colorpicker-label = Highlight color
pdfjs-editor-colorpicker-button =
    .title = Change color
pdfjs-editor-colorpicker-dropdown =
    .aria-label = Color choices
pdfjs-editor-colorpicker-yellow =
    .title = Yellow
pdfjs-editor-colorpicker-green =
    .title = Green
pdfjs-editor-colorpicker-blue =
    .title = Blue
pdfjs-editor-colorpicker-pink =
    .title = Pink
pdfjs-editor-colorpicker-red =
    .title = Red
pdfjs-editor-highlight-show-all-button-label = Show all
pdfjs-editor-highlight-show-all-button =
    .title = Show all
pdfjs-editor-new-alt-text-dialog-edit-label = Edit alt text (image description)
pdfjs-editor-new-alt-text-dialog-add-label = Add alt text (image description)
pdfjs-editor-new-alt-text-textarea =
    .placeholder = Write your description here…
pdfjs-editor-new-alt-text-description = Short description for people who can’t see the image or when the image doesn’t load.
pdfjs-editor-new-alt-text-disclaimer1 = This alt text was created automatically and may be inaccurate.
pdfjs-editor-new-alt-text-disclaimer-learn-more-url = Learn more
pdfjs-editor-new-alt-text-create-automatically-button-label = Create alt text automatically
pdfjs-editor-new-alt-text-not-now-button = Not now
pdfjs-editor-new-alt-text-error-title = Couldn’t create alt text automatically
pdfjs-editor-new-alt-text-error-description = Please write your own alt text or try again later.
pdfjs-editor-new-alt-text-error-close-button = Close
pdfjs-editor-new-alt-text-ai-model-downloading-progress = Downloading alt text AI model ({ $downloadedSize } of { $totalSize } MB)
    .aria-valuetext = Downloading alt text AI model ({ $downloadedSize } of { $totalSize } MB)
pdfjs-editor-new-alt-text-added-button =
    .aria-label = Alt text added
pdfjs-editor-new-alt-text-added-button-label = Alt text added
pdfjs-editor-new-alt-text-missing-button =
    .aria-label = Missing alt text
pdfjs-editor-new-alt-text-missing-button-label = Missing alt text
pdfjs-editor-new-alt-text-to-review-button =
    .aria-label = Review alt text
pdfjs-editor-new-alt-text-to-review-button-label = Review alt text
pdfjs-editor-new-alt-text-generated-alt-text-with-disclaimer = Created automatically: { $generatedAltText }
pdfjs-image-alt-text-settings-button =
    .title = Image alt text settings
pdfjs-image-alt-text-settings-button-label = Image alt text settings
pdfjs-editor-alt-text-settings-dialog-label = Image alt text settings
pdfjs-editor-alt-text-settings-automatic-title = Automatic alt text
pdfjs-editor-alt-text-settings-create-model-button-label = Create alt text automatically
pdfjs-editor-alt-text-settings-create-model-description = Suggests descriptions to help people who can’t see the image or when the image doesn’t load.
pdfjs-editor-alt-text-settings-download-model-label = Alt text AI model ({ $totalSize } MB)
pdfjs-editor-alt-text-settings-ai-model-description = Runs locally on your device so your data stays private. Required for automatic alt text.
pdfjs-editor-alt-text-settings-delete-model-button = Delete
pdfjs-editor-alt-text-settings-download-model-button = Download
pdfjs-editor-alt-text-settings-downloading-model-button = Downloading…
pdfjs-editor-alt-text-settings-editor-title = Alt text editor
pdfjs-editor-alt-text-settings-show-dialog-button-label = Show alt text editor right away when adding an image
pdfjs-editor-alt-text-settings-show-dialog-description = Helps you make sure all your images have alt text.
pdfjs-editor-alt-text-settings-close-button = Close
pdfjs-editor-highlight-added-alert = Highlight added
pdfjs-editor-freetext-added-alert = Text added
pdfjs-editor-ink-added-alert = Drawing added
pdfjs-editor-stamp-added-alert = Image added
pdfjs-editor-signature-added-alert = Signature added
pdfjs-editor-undo-bar-message-highlight = Highlight removed
pdfjs-editor-undo-bar-message-freetext = Text removed
pdfjs-editor-undo-bar-message-ink = Drawing removed
pdfjs-editor-undo-bar-message-stamp = Image removed
pdfjs-editor-undo-bar-message-signature = Signature removed
pdfjs-editor-undo-bar-message-multiple =
    { $count ->
        [one] { $count } annotation removed
       *[other] { $count } annotations removed
    }
pdfjs-editor-undo-bar-undo-button =
    .title = Undo
pdfjs-editor-undo-bar-undo-button-label = Undo
pdfjs-editor-undo-bar-close-button =
    .title = Close
pdfjs-editor-undo-bar-close-button-label = Close
pdfjs-editor-add-signature-dialog-label = This modal allows the user to create a signature to add to a PDF document. The user can edit the name (which also serves as the alt text), and optionally save the signature for repeated use.
pdfjs-editor-add-signature-dialog-title = Add a signature
pdfjs-editor-add-signature-type-button = Type
    .title = Type
pdfjs-editor-add-signature-draw-button = Draw
    .title = Draw
pdfjs-editor-add-signature-image-button = Image
    .title = Image
pdfjs-editor-add-signature-type-input =
    .aria-label = Type your signature
    .placeholder = Type your signature
pdfjs-editor-add-signature-draw-placeholder = Draw your signature
pdfjs-editor-add-signature-draw-thickness-range-label = Thickness
pdfjs-editor-add-signature-draw-thickness-range =
    .title = Drawing thickness: { $thickness }
pdfjs-editor-add-signature-image-placeholder = Drag a file here to upload
pdfjs-editor-add-signature-image-browse-link =
    { PLATFORM() ->
        [macos] Or choose image files
       *[other] Or browse image files
    }
pdfjs-editor-add-signature-description-label = Description (alt text)
pdfjs-editor-add-signature-description-input =
    .title = Description (alt text)
pdfjs-editor-add-signature-description-default-when-drawing = Signature
pdfjs-editor-add-signature-clear-button-label = Clear signature
pdfjs-editor-add-signature-clear-button =
    .title = Clear signature
pdfjs-editor-add-signature-save-checkbox = Save signature
pdfjs-editor-add-signature-save-warning-message = You’ve reached the limit of 5 saved signatures. Remove one to save more.
pdfjs-editor-add-signature-image-upload-error-title = Couldn’t upload image
pdfjs-editor-add-signature-image-upload-error-description = Check your network connection or try another image.
pdfjs-editor-add-signature-image-no-data-error-title = Can’t convert this image into a signature
pdfjs-editor-add-signature-image-no-data-error-description = Please try uploading a different image.
pdfjs-editor-add-signature-error-close-button = Close
pdfjs-editor-add-signature-cancel-button = Cancel
pdfjs-editor-add-signature-add-button = Add
pdfjs-editor-delete-signature-button1 =
    .title = Remove saved signature
pdfjs-editor-delete-signature-button-label1 = Remove saved signature
pdfjs-editor-add-signature-edit-button-label = Edit description
pdfjs-editor-edit-signature-dialog-title = Edit description
pdfjs-editor-edit-signature-update-button = Update
pdfjs-show-comment-button =
    .title = Show comment
pdfjs-editor-edit-comment-popup-button-label = Edit comment
pdfjs-editor-edit-comment-popup-button =
    .title = Edit comment
pdfjs-editor-delete-comment-popup-button-label = Remove comment
pdfjs-editor-delete-comment-popup-button =
    .title = Remove comment
pdfjs-editor-edit-comment-dialog-title-when-editing = Edit comment
pdfjs-editor-edit-comment-dialog-save-button-when-editing = Update
pdfjs-editor-edit-comment-dialog-title-when-adding = Add comment
pdfjs-editor-edit-comment-dialog-save-button-when-adding = Add
pdfjs-editor-edit-comment-dialog-text-input =
    .placeholder = Start typing…
pdfjs-editor-edit-comment-dialog-cancel-button = Cancel
pdfjs-editor-edit-comment-button =
    .title = Edit comment`);
  }
}
const Pc = 1e3, fc = 50, _c = 1e3;
function AA() {
  return document.location.hash;
}
class qc {
  #I = null;
  constructor({
    linkService: I,
    eventBus: g
  }) {
    this.linkService = I, this.eventBus = g, this._initialized = !1, this._fingerprint = "", this.reset(), this.eventBus._on("pagesinit", () => {
      this._isPagesLoaded = !1, this.eventBus._on("pagesloaded", (C) => {
        this._isPagesLoaded = !!C.pagesCount;
      }, {
        once: !0
      });
    });
  }
  initialize({
    fingerprint: I,
    resetHistory: g = !1,
    updateUrl: C = !1
  }) {
    if (!I || typeof I != "string") {
      console.error('PDFHistory.initialize: The "fingerprint" must be a non-empty string.');
      return;
    }
    this._initialized && this.reset();
    const A = this._fingerprint !== "" && this._fingerprint !== I;
    this._fingerprint = I, this._updateUrl = C === !0, this._initialized = !0, this.#o();
    const i = window.history.state;
    if (this._popStateInProgress = !1, this._blockHashChange = 0, this._currentHash = AA(), this._numPositionUpdates = 0, this._uid = this._maxUid = 0, this._destination = null, this._position = null, !this.#i(i, !0) || g) {
      const {
        hash: s,
        page: d,
        rotation: c
      } = this.#s(!0);
      if (!s || A || g) {
        this.#g(null, !0);
        return;
      }
      this.#g({
        hash: s,
        page: d,
        rotation: c
      }, !0);
      return;
    }
    const l = i.destination;
    this.#l(l, i.uid, !0), l.rotation !== void 0 && (this._initialRotation = l.rotation), l.dest ? (this._initialBookmark = JSON.stringify(l.dest), this._destination.page = null) : l.hash ? this._initialBookmark = l.hash : l.page && (this._initialBookmark = `page=${l.page}`);
  }
  reset() {
    this._initialized && (this.#Z(), this._initialized = !1, this.#b()), this._updateViewareaTimeout && (clearTimeout(this._updateViewareaTimeout), this._updateViewareaTimeout = null), this._initialBookmark = null, this._initialRotation = null;
  }
  push({
    namedDest: I = null,
    explicitDest: g,
    pageNumber: C
  }) {
    if (!this._initialized)
      return;
    if (I && typeof I != "string") {
      console.error(`PDFHistory.push: "${I}" is not a valid namedDest parameter.`);
      return;
    } else if (Array.isArray(g)) {
      if (!this.#C(C) && (C !== null || this._destination)) {
        console.error(`PDFHistory.push: "${C}" is not a valid pageNumber parameter.`);
        return;
      }
    } else {
      console.error(`PDFHistory.push: "${g}" is not a valid explicitDest parameter.`);
      return;
    }
    const A = I || JSON.stringify(g);
    if (!A)
      return;
    let i = !1;
    if (this._destination && ($c(this._destination.hash, A) || IG(this._destination.dest, g))) {
      if (this._destination.page)
        return;
      i = !0;
    }
    this._popStateInProgress && !i || (this.#g({
      dest: g,
      hash: A,
      page: C,
      rotation: this.linkService.rotation
    }, i), this._popStateInProgress || (this._popStateInProgress = !0, Promise.resolve().then(() => {
      this._popStateInProgress = !1;
    })));
  }
  pushPage(I) {
    if (this._initialized) {
      if (!this.#C(I)) {
        console.error(`PDFHistory.pushPage: "${I}" is not a valid page number.`);
        return;
      }
      this._destination?.page !== I && (this._popStateInProgress || (this.#g({
        dest: null,
        hash: `page=${I}`,
        page: I,
        rotation: this.linkService.rotation
      }), this._popStateInProgress || (this._popStateInProgress = !0, Promise.resolve().then(() => {
        this._popStateInProgress = !1;
      }))));
    }
  }
  pushCurrentPosition() {
    !this._initialized || this._popStateInProgress || this.#A();
  }
  back() {
    if (!this._initialized || this._popStateInProgress)
      return;
    const I = window.history.state;
    this.#i(I) && I.uid > 0 && window.history.back();
  }
  forward() {
    if (!this._initialized || this._popStateInProgress)
      return;
    const I = window.history.state;
    this.#i(I) && I.uid < this._maxUid && window.history.forward();
  }
  get popStateInProgress() {
    return this._initialized && (this._popStateInProgress || this._blockHashChange > 0);
  }
  get initialBookmark() {
    return this._initialized ? this._initialBookmark : null;
  }
  get initialRotation() {
    return this._initialized ? this._initialRotation : null;
  }
  #g(I, g = !1) {
    const C = g || !this._destination, A = {
      fingerprint: this._fingerprint,
      uid: C ? this._uid : this._uid + 1,
      destination: I
    };
    this.#l(I, A.uid);
    let i;
    if (this._updateUrl && I?.hash) {
      const {
        href: l,
        protocol: s
      } = document.location;
      s !== "file:" && (i = WZ(l, I.hash));
    }
    C ? window.history.replaceState(A, "", i) : window.history.pushState(A, "", i);
  }
  #A(I = !1) {
    if (!this._position)
      return;
    let g = this._position;
    if (I && (g = Object.assign(/* @__PURE__ */ Object.create(null), this._position), g.temporary = !0), !this._destination) {
      this.#g(g);
      return;
    }
    if (this._destination.temporary) {
      this.#g(g, !0);
      return;
    }
    if (this._destination.hash === g.hash || !this._destination.page && this._numPositionUpdates <= fc)
      return;
    let C = !1;
    if (this._destination.page >= g.first && this._destination.page <= g.page) {
      if (this._destination.dest !== void 0 || !this._destination.first)
        return;
      C = !0;
    }
    this.#g(g, C);
  }
  #C(I) {
    return Number.isInteger(I) && I > 0 && I <= this.linkService.pagesCount;
  }
  #i(I, g = !1) {
    if (!I)
      return !1;
    if (I.fingerprint !== this._fingerprint)
      if (g) {
        if (typeof I.fingerprint != "string" || I.fingerprint.length !== this._fingerprint.length)
          return !1;
        const [C] = performance.getEntriesByType("navigation");
        if (C?.type !== "reload")
          return !1;
      } else
        return !1;
    return !(!Number.isInteger(I.uid) || I.uid < 0 || I.destination === null || typeof I.destination != "object");
  }
  #l(I, g, C = !1) {
    this._updateViewareaTimeout && (clearTimeout(this._updateViewareaTimeout), this._updateViewareaTimeout = null), C && I?.temporary && delete I.temporary, this._destination = I, this._uid = g, this._maxUid = Math.max(this._maxUid, g), this._numPositionUpdates = 0;
  }
  #s(I = !1) {
    const g = unescape(AA()).substring(1), C = LC(g), A = C.get("nameddest") || "";
    let i = C.get("page") | 0;
    return (!this.#C(i) || I && A.length > 0) && (i = null), {
      hash: g,
      page: i,
      rotation: this.linkService.rotation
    };
  }
  #d({
    location: I
  }) {
    this._updateViewareaTimeout && (clearTimeout(this._updateViewareaTimeout), this._updateViewareaTimeout = null), this._position = {
      hash: I.pdfOpenParams.substring(1),
      page: this.linkService.page,
      first: I.pageNumber,
      rotation: I.rotation
    }, !this._popStateInProgress && (this._isPagesLoaded && this._destination && !this._destination.page && this._numPositionUpdates++, this._updateViewareaTimeout = setTimeout(() => {
      this._popStateInProgress || this.#A(!0), this._updateViewareaTimeout = null;
    }, _c));
  }
  #c({
    state: I
  }) {
    const g = AA(), C = this._currentHash !== g;
    if (this._currentHash = g, !I) {
      this._uid++;
      const {
        hash: i,
        page: l,
        rotation: s
      } = this.#s();
      this.#g({
        hash: i,
        page: l,
        rotation: s
      }, !0);
      return;
    }
    if (!this.#i(I))
      return;
    this._popStateInProgress = !0, C && (this._blockHashChange++, Ic({
      target: window,
      name: "hashchange",
      delay: Pc
    }).then(() => {
      this._blockHashChange--;
    }));
    const A = I.destination;
    this.#l(A, I.uid, !0), xl(A.rotation) && (this.linkService.rotation = A.rotation), A.dest ? this.linkService.goToDestination(A.dest) : A.hash ? this.linkService.setHash(A.hash) : A.page && (this.linkService.page = A.page), Promise.resolve().then(() => {
      this._popStateInProgress = !1;
    });
  }
  #Z() {
    (!this._destination || this._destination.temporary) && this.#A();
  }
  #o() {
    if (this.#I)
      return;
    this.#I = new AbortController();
    const {
      signal: I
    } = this.#I;
    this.eventBus._on("updateviewarea", this.#d.bind(this), {
      signal: I
    }), window.addEventListener("popstate", this.#c.bind(this), {
      signal: I
    }), window.addEventListener("pagehide", this.#Z.bind(this), {
      signal: I
    });
  }
  #b() {
    this.#I?.abort(), this.#I = null;
  }
}
function $c(Z, I) {
  return typeof Z != "string" || typeof I != "string" ? !1 : Z === I || LC(Z).get("nameddest") === I;
}
function IG(Z, I) {
  function g(C, A) {
    if (typeof C != typeof A || Array.isArray(C) || Array.isArray(A))
      return !1;
    if (C !== null && typeof C == "object" && A !== null) {
      if (Object.keys(C).length !== Object.keys(A).length)
        return !1;
      for (const i in C)
        if (!g(C[i], A[i]))
          return !1;
      return !0;
    }
    return C === A || Number.isNaN(C) && Number.isNaN(A);
  }
  if (!(Array.isArray(Z) && Array.isArray(I)) || Z.length !== I.length)
    return !1;
  for (let C = 0, A = Z.length; C < A; C++)
    if (!g(Z[C], I[C]))
      return !1;
  return !0;
}
class gG {
  #I = null;
  #g = null;
  #A = null;
  #C = null;
  #i = null;
  #l;
  constructor(I) {
    this.pdfPage = I.pdfPage, this.accessibilityManager = I.accessibilityManager, this.l10n = I.l10n, this.l10n ||= new xI(), this.annotationEditorLayer = null, this.div = null, this._cancelled = !1, this.#l = I.uiManager, this.#I = I.annotationLayer || null, this.#i = I.textLayer || null, this.#g = I.drawLayer || null, this.#A = I.onAppend || null, this.#C = I.structTreeLayer || null;
  }
  async render({
    viewport: I,
    intent: g = "display"
  }) {
    if (g !== "display" || this._cancelled)
      return;
    const C = I.clone({
      dontFlip: !0
    });
    if (this.div) {
      this.annotationEditorLayer.update({
        viewport: C
      }), this.show();
      return;
    }
    const A = this.div = document.createElement("div");
    A.className = "annotationEditorLayer", A.hidden = !0, A.dir = this.#l.direction, this.#A?.(A), this.annotationEditorLayer = new cZ({
      uiManager: this.#l,
      div: A,
      structTreeLayer: this.#C,
      accessibilityManager: this.accessibilityManager,
      pageIndex: this.pdfPage.pageNumber - 1,
      l10n: this.l10n,
      viewport: C,
      annotationLayer: this.#I,
      textLayer: this.#i,
      drawLayer: this.#g
    });
    const i = {
      viewport: C,
      div: A,
      annotations: null,
      intent: g
    };
    this.annotationEditorLayer.render(i), this.show();
  }
  cancel() {
    this._cancelled = !0, this.div && this.annotationEditorLayer.destroy();
  }
  hide() {
    this.div && (this.annotationEditorLayer.pause(!0), this.div.hidden = !0);
  }
  show() {
    !this.div || this.annotationEditorLayer.isInvisible || (this.div.hidden = !1, this.annotationEditorLayer.pause(!1));
  }
}
{
  var uA = /* @__PURE__ */ new Map();
  const {
    maxTouchPoints: Z,
    platform: I,
    userAgent: g
  } = navigator, C = /Android/.test(g), A = /\b(iPad|iPhone|iPod)(?=;)/.test(g) || I === "MacIntel" && Z > 1;
  (function() {
    (A || C) && uA.set("maxCanvasPixels", 5242880);
  })(), (function() {
    C && uA.set("useSystemFonts", !1);
  })();
}
const u = {
  BROWSER: 1,
  VIEWER: 2,
  API: 4,
  WORKER: 8,
  EVENT_DISPATCH: 16,
  PREFERENCE: 128
}, RA = {
  BOOLEAN: 1,
  NUMBER: 2,
  OBJECT: 4,
  STRING: 8,
  UNDEFINED: 16
}, QI = {
  allowedGlobalEvents: {
    value: null,
    kind: u.BROWSER
  },
  canvasMaxAreaInBytes: {
    value: -1,
    kind: u.BROWSER + u.API
  },
  isInAutomation: {
    value: !1,
    kind: u.BROWSER
  },
  localeProperties: {
    value: {
      lang: navigator.language || "en-US"
    },
    kind: u.BROWSER
  },
  maxCanvasDim: {
    value: 32767,
    kind: u.BROWSER + u.VIEWER
  },
  nimbusDataStr: {
    value: "",
    kind: u.BROWSER
  },
  supportsCaretBrowsingMode: {
    value: !1,
    kind: u.BROWSER
  },
  supportsDocumentFonts: {
    value: !0,
    kind: u.BROWSER
  },
  supportsIntegratedFind: {
    value: !1,
    kind: u.BROWSER
  },
  supportsMouseWheelZoomCtrlKey: {
    value: !0,
    kind: u.BROWSER
  },
  supportsMouseWheelZoomMetaKey: {
    value: !0,
    kind: u.BROWSER
  },
  supportsPinchToZoom: {
    value: !0,
    kind: u.BROWSER
  },
  supportsPrinting: {
    value: !0,
    kind: u.BROWSER
  },
  toolbarDensity: {
    value: 0,
    kind: u.BROWSER + u.EVENT_DISPATCH
  },
  altTextLearnMoreUrl: {
    value: "",
    kind: u.VIEWER + u.PREFERENCE
  },
  annotationEditorMode: {
    value: 0,
    kind: u.VIEWER + u.PREFERENCE
  },
  annotationMode: {
    value: 2,
    kind: u.VIEWER + u.PREFERENCE
  },
  capCanvasAreaFactor: {
    value: 200,
    kind: u.VIEWER + u.PREFERENCE
  },
  commentLearnMoreUrl: {
    value: "",
    kind: u.VIEWER + u.PREFERENCE
  },
  cursorToolOnLoad: {
    value: 0,
    kind: u.VIEWER + u.PREFERENCE
  },
  debuggerSrc: {
    value: "./debugger.mjs",
    kind: u.VIEWER
  },
  defaultZoomDelay: {
    value: 400,
    kind: u.VIEWER + u.PREFERENCE
  },
  defaultZoomValue: {
    value: "",
    kind: u.VIEWER + u.PREFERENCE
  },
  disableHistory: {
    value: !1,
    kind: u.VIEWER
  },
  disablePageLabels: {
    value: !1,
    kind: u.VIEWER + u.PREFERENCE
  },
  enableAltText: {
    value: !1,
    kind: u.VIEWER + u.PREFERENCE
  },
  enableAltTextModelDownload: {
    value: !0,
    kind: u.VIEWER + u.PREFERENCE + u.EVENT_DISPATCH
  },
  enableAutoLinking: {
    value: !0,
    kind: u.VIEWER + u.PREFERENCE
  },
  enableComment: {
    value: !1,
    kind: u.VIEWER + u.PREFERENCE
  },
  enableDetailCanvas: {
    value: !0,
    kind: u.VIEWER
  },
  enableGuessAltText: {
    value: !0,
    kind: u.VIEWER + u.PREFERENCE + u.EVENT_DISPATCH
  },
  enableHighlightFloatingButton: {
    value: !1,
    kind: u.VIEWER + u.PREFERENCE
  },
  enableNewAltTextWhenAddingImage: {
    value: !0,
    kind: u.VIEWER + u.PREFERENCE
  },
  enableOptimizedPartialRendering: {
    value: !1,
    kind: u.VIEWER + u.PREFERENCE
  },
  enablePermissions: {
    value: !1,
    kind: u.VIEWER + u.PREFERENCE
  },
  enablePrintAutoRotate: {
    value: !0,
    kind: u.VIEWER + u.PREFERENCE
  },
  enableScripting: {
    value: !0,
    kind: u.VIEWER + u.PREFERENCE
  },
  enableSignatureEditor: {
    value: !1,
    kind: u.VIEWER + u.PREFERENCE
  },
  enableUpdatedAddImage: {
    value: !1,
    kind: u.VIEWER + u.PREFERENCE
  },
  externalLinkRel: {
    value: "noopener noreferrer nofollow",
    kind: u.VIEWER
  },
  externalLinkTarget: {
    value: 0,
    kind: u.VIEWER + u.PREFERENCE
  },
  highlightEditorColors: {
    value: "yellow=#FFFF98,green=#53FFBC,blue=#80EBFF,pink=#FFCBE6,red=#FF4F5F,yellow_HCM=#FFFFCC,green_HCM=#53FFBC,blue_HCM=#80EBFF,pink_HCM=#F6B8FF,red_HCM=#C50043",
    kind: u.VIEWER + u.PREFERENCE
  },
  historyUpdateUrl: {
    value: !1,
    kind: u.VIEWER + u.PREFERENCE
  },
  ignoreDestinationZoom: {
    value: !1,
    kind: u.VIEWER + u.PREFERENCE
  },
  imageResourcesPath: {
    value: "./images/",
    kind: u.VIEWER
  },
  maxCanvasPixels: {
    value: 2 ** 25,
    kind: u.VIEWER
  },
  minDurationToUpdateCanvas: {
    value: 500,
    kind: u.VIEWER
  },
  forcePageColors: {
    value: !1,
    kind: u.VIEWER + u.PREFERENCE
  },
  pageColorsBackground: {
    value: "Canvas",
    kind: u.VIEWER + u.PREFERENCE
  },
  pageColorsForeground: {
    value: "CanvasText",
    kind: u.VIEWER + u.PREFERENCE
  },
  pdfBugEnabled: {
    value: !1,
    kind: u.VIEWER + u.PREFERENCE
  },
  printResolution: {
    value: 150,
    kind: u.VIEWER
  },
  sidebarViewOnLoad: {
    value: -1,
    kind: u.VIEWER + u.PREFERENCE
  },
  scrollModeOnLoad: {
    value: -1,
    kind: u.VIEWER + u.PREFERENCE
  },
  spreadModeOnLoad: {
    value: -1,
    kind: u.VIEWER + u.PREFERENCE
  },
  textLayerMode: {
    value: 1,
    kind: u.VIEWER + u.PREFERENCE
  },
  viewerCssTheme: {
    value: 0,
    kind: u.VIEWER + u.PREFERENCE
  },
  viewOnLoad: {
    value: 0,
    kind: u.VIEWER + u.PREFERENCE
  },
  cMapPacked: {
    value: !0,
    kind: u.API
  },
  cMapUrl: {
    value: "../web/cmaps/",
    kind: u.API
  },
  disableAutoFetch: {
    value: !1,
    kind: u.API + u.PREFERENCE
  },
  disableFontFace: {
    value: !1,
    kind: u.API + u.PREFERENCE
  },
  disableRange: {
    value: !1,
    kind: u.API + u.PREFERENCE
  },
  disableStream: {
    value: !1,
    kind: u.API + u.PREFERENCE
  },
  docBaseUrl: {
    value: "",
    kind: u.API
  },
  enableHWA: {
    value: !0,
    kind: u.API + u.VIEWER + u.PREFERENCE
  },
  enableXfa: {
    value: !0,
    kind: u.API + u.PREFERENCE
  },
  fontExtraProperties: {
    value: !1,
    kind: u.API
  },
  iccUrl: {
    value: "../web/iccs/",
    kind: u.API
  },
  isEvalSupported: {
    value: !0,
    kind: u.API
  },
  isOffscreenCanvasSupported: {
    value: !0,
    kind: u.API
  },
  maxImageSize: {
    value: -1,
    kind: u.API
  },
  pdfBug: {
    value: !1,
    kind: u.API
  },
  standardFontDataUrl: {
    value: "../web/standard_fonts/",
    kind: u.API
  },
  useSystemFonts: {
    value: void 0,
    kind: u.API,
    type: RA.BOOLEAN + RA.UNDEFINED
  },
  verbosity: {
    value: 1,
    kind: u.API
  },
  wasmUrl: {
    value: "../web/wasm/",
    kind: u.API
  },
  workerPort: {
    value: null,
    kind: u.WORKER
  },
  workerSrc: {
    value: "../build/pdf.worker.mjs",
    kind: u.WORKER
  }
};
QI.defaultUrl = {
  value: "compressed.tracemonkey-pldi-09.pdf",
  kind: u.VIEWER
}, QI.sandboxBundleSrc = {
  value: "../build/pdf.sandbox.mjs",
  kind: u.VIEWER
}, QI.enableFakeMLManager = {
  value: !0,
  kind: u.VIEWER
};
QI.disablePreferences = {
  value: !1,
  kind: u.VIEWER
};
var $I;
const FI = class FI {
  static get(I) {
    return v(this, $I).get(I);
  }
  static getAll(I = null, g = !1) {
    const C = /* @__PURE__ */ Object.create(null);
    for (const A in QI) {
      const i = QI[A];
      I && !(I & i.kind) || (C[A] = g ? i.value : v(this, $I).get(A));
    }
    return C;
  }
  static set(I, g) {
    this.setAll({
      [I]: g
    });
  }
  static setAll(I, g = !1) {
    this._hasInvokedSet ||= !0;
    let C;
    for (const A in I) {
      const i = QI[A], l = I[A];
      if (!i || !(typeof l == typeof i.value || RA[(typeof l).toUpperCase()] & i.type))
        continue;
      const {
        kind: s
      } = i;
      g && !(s & u.BROWSER || s & u.PREFERENCE) || (this.eventBus && s & u.EVENT_DISPATCH && (C ||= /* @__PURE__ */ new Map()).set(A, l), v(this, $I).set(A, l));
    }
    if (C)
      for (const [A, i] of C)
        this.eventBus.dispatch(A.toLowerCase(), {
          source: this,
          value: i
        });
  }
};
$I = new WeakMap(), UA(FI, "eventBus"), yI(FI, $I, /* @__PURE__ */ new Map()), (() => {
  for (const I in QI)
    v(FI, $I).set(I, QI[I].value);
  for (const [I, g] of uA)
    v(FI, $I).set(I, g);
  FI._hasInvokedSet = !1, FI._checkDisablePreferences = () => FI.get("disablePreferences") ? !0 : (FI._hasInvokedSet && console.warn('The Preferences may override manually set AppOptions; please use the "disablePreferences"-option to prevent that.'), !1);
})();
let Qg = FI;
function fi({
  width: Z,
  height: I,
  left: g,
  top: C
}, A) {
  if (Z === 0 || I === 0)
    return null;
  const i = A.textLayer.div.getBoundingClientRect(), l = A.getPagePoint(g - i.left, C - i.top), s = A.getPagePoint(g - i.left + Z, C - i.top + I);
  return QA.normalizeRect([l[0], l[1], s[0], s[1]]);
}
function CG(Z, I) {
  const g = Z.getClientRects();
  if (g.length === 1)
    return {
      rect: fi(g[0], I)
    };
  const C = [1 / 0, 1 / 0, -1 / 0, -1 / 0], A = [];
  let i = 0;
  for (const l of g) {
    const s = fi(l, I);
    s !== null && (A[i] = A[i + 4] = s[0], A[i + 1] = A[i + 3] = s[3], A[i + 2] = A[i + 6] = s[2], A[i + 5] = A[i + 7] = s[1], QA.rectBoundingBox(...s, C), i += 8);
  }
  return {
    quadPoints: A,
    rect: C
  };
}
function _i(Z, I) {
  let g = Z;
  do {
    if (g.nodeType === Node.TEXT_NODE) {
      const C = g.textContent.length;
      if (I <= C)
        return [g, I];
      I -= C;
    } else if (g.firstChild) {
      g = g.firstChild;
      continue;
    }
    for (; !g.nextSibling && g !== Z; )
      g = g.parentNode;
    g !== Z && (g = g.nextSibling);
  } while (g !== Z);
  throw new Error("Offset is bigger than container's contents length.");
}
function AG({
  url: Z,
  index: I,
  length: g
}, C, A) {
  const i = C._textHighlighter, [{
    begin: l,
    end: s
  }] = i._convertMatches([I], [g]), d = new Range();
  return d.setStart(..._i(i.textDivs[l.divIdx], l.offset)), d.setEnd(..._i(i.textDivs[s.divIdx], s.offset)), {
    id: `inferred_link_${A}`,
    unsafeUrl: Z,
    url: Z,
    annotationType: kl.LINK,
    rotation: 0,
    ...CG(d, C),
    borderStyle: null
  };
}
class iG {
  static #I = 0;
  static #g;
  static findLinks(I) {
    this.#g ??= new RegExp("\\b(?:https?:\\/\\/|mailto:|www\\.)(?:[\\S--[\\p{P}<>]]|\\/|[\\S--[\\[\\]]]+[\\S--[\\p{P}<>]])+|\\b[\\S--[@\\p{Ps}\\p{Pe}<>]]+@([\\S--[\\p{P}<>]]+(?:\\.[\\S--[\\p{P}<>]]+)+)", "gmv");
    const [g, C] = NC(I, {
      ignoreDashEOL: !0
    }), A = g.matchAll(this.#g), i = [];
    for (const l of A) {
      const [s, d] = l;
      let c;
      if (s.startsWith("www.") || s.startsWith("http://") || s.startsWith("https://"))
        c = s;
      else if (URL.canParse(`http://${d}`))
        c = s.startsWith("mailto:") ? s : `mailto:${s}`;
      else
        continue;
      const G = rl(c, null, {
        addDefaultProtocol: !0
      });
      if (G) {
        const [b, o] = Ol(C, l.index, s.length);
        i.push({
          url: G.href,
          index: b,
          length: o
        });
      }
    }
    return i;
  }
  static processLinks(I) {
    return this.findLinks(I._textHighlighter.textContentItemsStr.join(`
`)).map((g) => AG(g, I, this.#I++));
  }
}
class ql {
  #I = null;
  #g = 0;
  #A = null;
  #C = O.INITIAL;
  #i = null;
  #l = 0;
  #s = null;
  canvas = null;
  div = null;
  enableOptimizedPartialRendering = !1;
  eventBus = null;
  id = null;
  pageColors = null;
  recordedBBoxes = null;
  renderingQueue = null;
  renderTask = null;
  resume = null;
  constructor(I) {
    this.eventBus = I.eventBus, this.id = I.id, this.pageColors = I.pageColors || null, this.renderingQueue = I.renderingQueue, this.enableOptimizedPartialRendering = I.enableOptimizedPartialRendering ?? !1, this.#g = I.minDurationToUpdateCanvas ?? 500;
  }
  get renderingState() {
    return this.#C;
  }
  set renderingState(I) {
    if (I !== this.#C)
      switch (this.#C = I, this.#I && (clearTimeout(this.#I), this.#I = null), I) {
        case O.PAUSED:
          this.div.classList.remove("loading"), this.#l = 0, this.#i?.(!1);
          break;
        case O.RUNNING:
          this.div.classList.add("loadingIcon"), this.#I = setTimeout(() => {
            this.div.classList.add("loading"), this.#I = null;
          }, 0), this.#l = Date.now();
          break;
        case O.INITIAL:
        case O.FINISHED:
          this.div.classList.remove("loadingIcon", "loading"), this.#l = 0;
          break;
      }
  }
  _createCanvas(I, g = !1) {
    const {
      pageColors: C
    } = this, A = !!(C?.background && C?.foreground), i = this.canvas, l = !i && !A && !g;
    let s = this.canvas = document.createElement("canvas");
    return this.#i = (d) => {
      if (l) {
        let c = this.#s;
        if (!d && this.#g > 0) {
          if (Date.now() - this.#l < this.#g)
            return;
          c || (c = this.#s = s, s = this.canvas = s.cloneNode(!1), I(s));
        }
        if (c) {
          s.getContext("2d", {
            alpha: !1
          }).drawImage(c, 0, 0), d ? this.#c() : this.#l = Date.now();
          return;
        }
        I(s), this.#i = null;
        return;
      }
      d && (i ? (i.replaceWith(s), i.width = i.height = 0) : I(s));
    }, {
      canvas: s,
      prevCanvas: i
    };
  }
  #d = (I) => {
    if (this.#i?.(!1), this.renderingQueue && !this.renderingQueue.isHighestPriority(this)) {
      this.renderingState = O.PAUSED, this.resume = () => {
        this.renderingState = O.RUNNING, I();
      };
      return;
    }
    I();
  };
  _resetCanvas() {
    const {
      canvas: I
    } = this;
    I && (I.remove(), I.width = I.height = 0, this.canvas = null, this.#c());
  }
  #c() {
    this.#s && (this.#s.width = this.#s.height = 0, this.#s = null);
  }
  async _drawCanvas(I, g, C) {
    const A = this.renderTask = this.pdfPage.render(I);
    A.onContinue = this.#d, A.onError = (l) => {
      l instanceof wA && (g(), this.#A = null);
    };
    let i = null;
    try {
      await A.promise, this.#i?.(!0);
    } catch (l) {
      if (l instanceof wA)
        return;
      i = l, this.#i?.(!0);
    } finally {
      this.#A = i, A === this.renderTask && (this.renderTask = null, this.enableOptimizedPartialRendering && (this.recordedBBoxes ??= A.recordedBBoxes));
    }
    if (this.renderingState = O.FINISHED, C(A), i)
      throw i;
  }
  cancelRendering({
    cancelExtraDelay: I = 0
  } = {}) {
    this.renderTask && (this.renderTask.cancel(I), this.renderTask = null), this.resume = null;
  }
  dispatchPageRender() {
    this.eventBus.dispatch("pagerender", {
      source: this,
      pageNumber: this.id
    });
  }
  dispatchPageRendered(I, g) {
    this.eventBus.dispatch("pagerendered", {
      source: this,
      pageNumber: this.id,
      cssTransform: I,
      isDetailView: g,
      timestamp: performance.now(),
      error: this.#A
    });
  }
}
class lG {
  #I = null;
  constructor(I) {
    this.pageIndex = I.pageIndex;
  }
  async render({
    intent: I = "display"
  }) {
    I !== "display" || this.#I || this._cancelled || (this.#I = new oZ({
      pageIndex: this.pageIndex
    }));
  }
  cancel() {
    this._cancelled = !0, this.#I && (this.#I.destroy(), this.#I = null);
  }
  setParent(I) {
    this.#I?.setParent(I);
  }
  getDrawLayer() {
    return this.#I;
  }
}
class sG extends ql {
  #I = null;
  renderingCancelled = !1;
  constructor({
    pageView: I
  }) {
    super(I), this.pageView = I, this.renderingId = "detail" + this.id, this.div = I.div;
  }
  setPdfPage(I) {
    this.pageView.setPdfPage(I);
  }
  get pdfPage() {
    return this.pageView.pdfPage;
  }
  get renderingState() {
    return super.renderingState;
  }
  set renderingState(I) {
    this.renderingCancelled = !1, super.renderingState = I;
  }
  reset({
    keepCanvas: I = !1
  } = {}) {
    const g = this.renderingCancelled || this.renderingState === O.RUNNING || this.renderingState === O.PAUSED;
    this.cancelRendering(), this.renderingState = O.INITIAL, this.renderingCancelled = g, I || this._resetCanvas();
  }
  #g(I) {
    if (!this.#I)
      return !0;
    const g = this.#I.minX, C = this.#I.minY, A = this.#I.width + g, i = this.#I.height + C;
    if (I.minX < g || I.minY < C || I.maxX > A || I.maxY > i)
      return !0;
    const {
      width: l,
      height: s,
      scale: d
    } = this.pageView.viewport;
    if (this.#I.scale !== d)
      return !0;
    const c = I.minX - g, G = A - I.maxX, b = I.minY - C, o = i - I.maxY, m = 0.5, e = (1 + m) / m;
    return g > 0 && G / c > e || A < l && c / G > e || C > 0 && o / b > e || i < s && b / o > e;
  }
  update({
    visibleArea: I = null,
    underlyingViewUpdated: g = !1
  } = {}) {
    if (g) {
      this.cancelRendering(), this.renderingState = O.INITIAL;
      return;
    }
    if (!this.#g(I))
      return;
    const {
      viewport: C,
      maxCanvasPixels: A,
      capCanvasAreaFactor: i
    } = this.pageView, l = I.maxX - I.minX, s = I.maxY - I.minY, d = l * s * VC.pixelRatio ** 2, G = (Math.sqrt(VC.capPixels(A, i) / d) - 1) / 2;
    let b = Math.min(1, G);
    b < 0 && (b = 0);
    const o = l * b, m = s * b, e = Math.max(0, I.minX - o), a = Math.min(C.width, I.maxX + o), h = Math.max(0, I.minY - m), t = Math.min(C.height, I.maxY + m), W = a - e, B = t - h;
    this.#I = {
      minX: e,
      minY: h,
      width: W,
      height: B,
      scale: C.scale
    }, this.reset({
      keepCanvas: !0
    });
  }
  _getRenderingContext(I, g) {
    const C = this.pageView._getRenderingContext(I, g, !1), A = this.pdfPage.recordedBBoxes;
    if (!A || !this.enableOptimizedPartialRendering)
      return C;
    const {
      viewport: {
        width: i,
        height: l
      }
    } = this.pageView, {
      width: s,
      height: d,
      minX: c,
      minY: G
    } = this.#I, b = c / i, o = G / l, m = (c + s) / i, e = (G + d) / l;
    return {
      ...C,
      operationsFilter(a) {
        return A.isEmpty(a) ? !1 : A.minX(a) <= m && A.maxX(a) >= b && A.minY(a) <= e && A.maxY(a) >= o;
      }
    };
  }
  async draw() {
    if (this.pageView.detailView !== this)
      return;
    const I = this.pageView.renderingState === O.FINISHED || this.renderingState === O.FINISHED;
    this.renderingState !== O.INITIAL && (console.error("Must be in new state before drawing"), this.reset());
    const {
      div: g,
      pdfPage: C,
      viewport: A
    } = this.pageView;
    if (!C)
      throw this.renderingState = O.FINISHED, new Error("pdfPage is not loaded");
    this.renderingState = O.RUNNING;
    const i = this.pageView._ensureCanvasWrapper(), {
      canvas: l,
      prevCanvas: s
    } = this._createCanvas((a) => {
      i.firstElementChild?.tagName === "CANVAS" ? i.firstElementChild.after(a) : i.prepend(a);
    }, I);
    l.ariaHidden = !0, this.enableOptimizedPartialRendering && (l.className = "detailView");
    const {
      width: d,
      height: c
    } = A, G = this.#I, {
      pixelRatio: b
    } = VC, o = [b, 0, 0, b, -G.minX * b, -G.minY * b];
    l.width = G.width * b, l.height = G.height * b;
    const {
      style: m
    } = l;
    m.width = `${G.width * 100 / d}%`, m.height = `${G.height * 100 / c}%`, m.top = `${G.minY * 100 / c}%`, m.left = `${G.minX * 100 / d}%`;
    const e = this._drawCanvas(this._getRenderingContext(l, o), () => {
      this.canvas?.remove(), this.canvas = s;
    }, () => {
      this.dispatchPageRendered(!1, !0);
    });
    return g.setAttribute("data-loaded", !0), this.dispatchPageRender(), e;
  }
}
const qi = {
  Document: null,
  DocumentFragment: null,
  Part: "group",
  Sect: "group",
  Div: "group",
  Aside: "note",
  NonStruct: "none",
  P: null,
  H: "heading",
  Title: null,
  FENote: "note",
  Sub: "group",
  Lbl: null,
  Span: null,
  Em: null,
  Strong: null,
  Link: "link",
  Annot: "note",
  Form: "form",
  Ruby: null,
  RB: null,
  RT: null,
  RP: null,
  Warichu: null,
  WT: null,
  WP: null,
  L: "list",
  LI: "listitem",
  LBody: null,
  Table: "table",
  TR: "row",
  TH: "columnheader",
  TD: "cell",
  THead: "columnheader",
  TBody: null,
  TFoot: null,
  Caption: null,
  Figure: "figure",
  Formula: null,
  Artifact: null
}, dG = /^H(\d+)$/;
class $l {
  #I;
  #g = null;
  #A;
  #C = /* @__PURE__ */ new Map();
  #i;
  #l = null;
  constructor(I, g) {
    this.#I = I.getStructTree(), this.#i = g;
  }
  async render() {
    if (this.#A)
      return this.#A;
    const {
      promise: I,
      resolve: g,
      reject: C
    } = Promise.withResolvers();
    this.#A = I;
    try {
      this.#g = this.#c(await this.#I);
    } catch (A) {
      C(A);
    }
    return this.#I = null, this.#g?.classList.add("structTree"), g(this.#g), I;
  }
  async getAriaAttributes(I) {
    try {
      return await this.render(), this.#C.get(I);
    } catch {
    }
    return null;
  }
  hide() {
    this.#g && !this.#g.hidden && (this.#g.hidden = !0);
  }
  show() {
    this.#g?.hidden && (this.#g.hidden = !1);
  }
  #s(I, g) {
    const {
      alt: C,
      id: A,
      lang: i
    } = I;
    if (C !== void 0) {
      let l = !1;
      const s = jg(C);
      for (const d of I.children)
        if (d.type === "annotation") {
          let c = this.#C.get(d.id);
          c || (c = /* @__PURE__ */ new Map(), this.#C.set(d.id, c)), c.set("aria-label", s), l = !0;
        }
      l || g.setAttribute("aria-label", s);
    }
    A !== void 0 && g.setAttribute("aria-owns", A), i !== void 0 && g.setAttribute("lang", jg(i, !0));
  }
  #d(I, g) {
    const {
      alt: C,
      bbox: A,
      children: i
    } = I, l = i?.[0];
    if (!this.#i || !C || !A || l?.type !== "content")
      return !1;
    const {
      id: s
    } = l;
    if (!s)
      return !1;
    g.setAttribute("aria-owns", s);
    const d = document.createElement("span");
    (this.#l ||= /* @__PURE__ */ new Map()).set(s, d), d.setAttribute("role", "img"), d.setAttribute("aria-label", jg(C));
    const {
      pageHeight: c,
      pageX: G,
      pageY: b
    } = this.#i, o = "calc(var(--total-scale-factor) *", {
      style: m
    } = d;
    return m.width = `${o}${A[2] - A[0]}px)`, m.height = `${o}${A[3] - A[1]}px)`, m.left = `${o}${A[0] - G}px)`, m.top = `${o}${c - A[3] + b}px)`, !0;
  }
  addElementsToTextLayer() {
    if (this.#l) {
      for (const [I, g] of this.#l)
        document.getElementById(I)?.append(g);
      this.#l.clear(), this.#l = null;
    }
  }
  #c(I) {
    if (!I)
      return null;
    const g = document.createElement("span");
    if ("role" in I) {
      const {
        role: C
      } = I, A = C.match(dG);
      if (A ? (g.setAttribute("role", "heading"), g.setAttribute("aria-level", A[1])) : qi[C] && g.setAttribute("role", qi[C]), C === "Figure" && this.#d(I, g))
        return g;
    }
    if (this.#s(I, g), I.children)
      if (I.children.length === 1 && "id" in I.children[0])
        this.#s(I.children[0], g);
      else
        for (const C of I.children)
          g.append(this.#c(C));
    return g;
  }
}
class xg {
  #I = !1;
  #g = null;
  #A = /* @__PURE__ */ new Map();
  #C = /* @__PURE__ */ new Map();
  setTextMapping(I) {
    this.#g = I;
  }
  static #i(I, g) {
    const C = I.getBoundingClientRect(), A = g.getBoundingClientRect();
    if (C.width === 0 && C.height === 0)
      return 1;
    if (A.width === 0 && A.height === 0)
      return -1;
    const i = C.y, l = C.y + C.height, s = C.y + C.height / 2, d = A.y, c = A.y + A.height, G = A.y + A.height / 2;
    if (s <= d && G >= l)
      return -1;
    if (G <= i && s >= c)
      return 1;
    const b = C.x + C.width / 2, o = A.x + A.width / 2;
    return b - o;
  }
  enable() {
    if (this.#I)
      throw new Error("TextAccessibilityManager is already enabled.");
    if (!this.#g)
      throw new Error("Text divs and strings have not been set.");
    if (this.#I = !0, this.#g = this.#g.slice(), this.#g.sort(xg.#i), this.#A.size > 0) {
      const I = this.#g;
      for (const [g, C] of this.#A) {
        if (!document.getElementById(g)) {
          this.#A.delete(g);
          continue;
        }
        this.#l(g, I[C]);
      }
    }
    for (const [I, g] of this.#C)
      this.addPointerInTextLayer(I, g);
    this.#C.clear();
  }
  disable() {
    this.#I && (this.#C.clear(), this.#g = null, this.#I = !1);
  }
  removePointerInTextLayer(I) {
    if (!this.#I) {
      this.#C.delete(I);
      return;
    }
    const g = this.#g;
    if (!g || g.length === 0)
      return;
    const {
      id: C
    } = I, A = this.#A.get(C);
    if (A === void 0)
      return;
    const i = g[A];
    this.#A.delete(C);
    let l = i.getAttribute("aria-owns");
    l?.includes(C) && (l = l.split(" ").filter((s) => s !== C).join(" "), l ? i.setAttribute("aria-owns", l) : (i.removeAttribute("aria-owns"), i.setAttribute("role", "presentation")));
  }
  #l(I, g) {
    const C = g.getAttribute("aria-owns");
    C?.includes(I) || g.setAttribute("aria-owns", C ? `${C} ${I}` : I), g.removeAttribute("role");
  }
  addPointerInTextLayer(I, g) {
    const {
      id: C
    } = I;
    if (!C)
      return null;
    if (!this.#I)
      return this.#C.set(I, g), null;
    g && this.removePointerInTextLayer(I);
    const A = this.#g;
    if (!A || A.length === 0)
      return null;
    const i = fg(A, (c) => xg.#i(I, c) < 0), l = Math.max(0, i - 1), s = A[l];
    this.#l(C, s), this.#A.set(C, l);
    const d = s.parentNode;
    return d?.classList.contains("markedContent") ? d.id : null;
  }
  moveElementInDOM(I, g, C, A) {
    const i = this.addPointerInTextLayer(C, A);
    if (!I.hasChildNodes())
      return I.append(g), i;
    const l = Array.from(I.childNodes).filter((c) => c !== g);
    if (l.length === 0)
      return i;
    const s = C || g, d = fg(l, (c) => xg.#i(s, c) < 0);
    return d === 0 ? l[0].before(g) : l[d - 1].after(g), i;
  }
}
class ZG {
  #I = null;
  constructor({
    findController: I,
    eventBus: g,
    pageIndex: C
  }) {
    this.findController = I, this.matches = [], this.eventBus = g, this.pageIdx = C, this.textDivs = null, this.textContentItemsStr = null, this.enabled = !1;
  }
  setTextMapping(I, g) {
    this.textDivs = I, this.textContentItemsStr = g;
  }
  enable() {
    if (!this.textDivs || !this.textContentItemsStr)
      throw new Error("Text divs and strings have not been set.");
    if (this.enabled)
      throw new Error("TextHighlighter is already enabled.");
    this.enabled = !0, this.#I || (this.#I = new AbortController(), this.eventBus._on("updatetextlayermatches", (I) => {
      (I.pageIndex === this.pageIdx || I.pageIndex === -1) && this._updateMatches();
    }, {
      signal: this.#I.signal
    })), this._updateMatches();
  }
  disable() {
    this.enabled && (this.enabled = !1, this.#I?.abort(), this.#I = null, this._updateMatches(!0));
  }
  _convertMatches(I, g) {
    if (!I)
      return [];
    const {
      textContentItemsStr: C
    } = this;
    let A = 0, i = 0;
    const l = C.length - 1, s = [];
    for (let d = 0, c = I.length; d < c; d++) {
      let G = I[d];
      for (; A !== l && G >= i + C[A].length; )
        i += C[A].length, A++;
      A === C.length && console.error("Could not find a matching mapping");
      const b = {
        begin: {
          divIdx: A,
          offset: G - i
        }
      };
      for (G += g[d]; A !== l && G > i + C[A].length; )
        i += C[A].length, A++;
      b.end = {
        divIdx: A,
        offset: G - i
      }, s.push(b);
    }
    return s;
  }
  _renderMatches(I) {
    if (I.length === 0)
      return;
    const {
      findController: g,
      pageIdx: C
    } = this, {
      textContentItemsStr: A,
      textDivs: i
    } = this, l = C === g.selected.pageIdx, s = g.selected.matchIdx, d = g.state.highlightAll;
    let c = null;
    const G = {
      offset: void 0
    };
    function b(t, W) {
      const B = t.divIdx;
      return i[B].textContent = "", o(B, 0, t.offset, W);
    }
    function o(t, W, B, w) {
      let n = i[t];
      if (n.nodeType === Node.TEXT_NODE) {
        const R = document.createElement("span");
        n.before(R), R.append(n), i[t] = R, n = R;
      }
      const V = A[t].substring(W, B), N = document.createTextNode(V);
      if (w) {
        const R = document.createElement("span");
        if (R.className = `${w} appended`, R.append(N), n.append(R), w.includes("selected")) {
          const {
            left: Y
          } = R.getClientRects()[0], y = n.getBoundingClientRect().left;
          return Y - y;
        }
        return 0;
      }
      return n.append(N), 0;
    }
    let m = s, e = m + 1;
    if (d)
      m = 0, e = I.length;
    else if (!l)
      return;
    let a = -1, h = -1;
    for (let t = m; t < e; t++) {
      const W = I[t], B = W.begin;
      if (B.divIdx === a && B.offset === h)
        continue;
      a = B.divIdx, h = B.offset;
      const w = W.end, n = l && t === s, V = n ? " selected" : "";
      let N = 0;
      if (!c || B.divIdx !== c.divIdx ? (c !== null && o(c.divIdx, c.offset, G.offset), b(B)) : o(c.divIdx, c.offset, B.offset), B.divIdx === w.divIdx)
        N = o(B.divIdx, B.offset, w.offset, "highlight" + V);
      else {
        N = o(B.divIdx, B.offset, G.offset, "highlight begin" + V);
        for (let R = B.divIdx + 1, Y = w.divIdx; R < Y; R++)
          i[R].className = "highlight middle" + V;
        b(w, "highlight end" + V);
      }
      c = w, n && g.scrollMatchIntoView({
        element: i[B.divIdx],
        selectedLeft: N,
        pageIndex: C,
        matchIndex: s
      });
    }
    c && o(c.divIdx, c.offset, G.offset);
  }
  _updateMatches(I = !1) {
    if (!this.enabled && !I)
      return;
    const {
      findController: g,
      matches: C,
      pageIdx: A
    } = this, {
      textContentItemsStr: i,
      textDivs: l
    } = this;
    let s = -1;
    for (const G of C) {
      const b = Math.max(s, G.begin.divIdx);
      for (let o = b, m = G.end.divIdx; o <= m; o++) {
        const e = l[o];
        e.textContent = i[o], e.className = "";
      }
      s = G.end.divIdx + 1;
    }
    if (!g?.highlightMatches || I)
      return;
    const d = g.pageMatches[A] || null, c = g.pageMatchesLength[A] || null;
    this.matches = this._convertMatches(d, c), this._renderMatches(this.matches);
  }
}
class yg {
  #I = !1;
  #g = null;
  #A = !1;
  #C = null;
  static #i = /* @__PURE__ */ new Map();
  static #l = null;
  constructor({
    pdfPage: I,
    highlighter: g = null,
    accessibilityManager: C = null,
    enablePermissions: A = !1,
    onAppend: i = null
  }) {
    this.pdfPage = I, this.highlighter = g, this.accessibilityManager = C, this.#I = A === !0, this.#g = i, this.div = document.createElement("div"), this.div.tabIndex = 0, this.div.className = "textLayer";
  }
  async render({
    viewport: I,
    textContentParams: g = null
  }) {
    if (this.#A && this.#C) {
      this.#C.update({
        viewport: I,
        onBefore: this.hide.bind(this)
      }), this.show();
      return;
    }
    this.cancel(), this.#C = new BZ({
      textContentSource: this.pdfPage.streamTextContent(g || {
        includeMarkedContent: !0,
        disableNormalization: !0
      }),
      container: this.div,
      viewport: I
    });
    const {
      textDivs: C,
      textContentItemsStr: A
    } = this.#C;
    this.highlighter?.setTextMapping(C, A), this.accessibilityManager?.setTextMapping(C), await this.#C.render(), this.#A = !0;
    const i = document.createElement("div");
    i.className = "endOfContent", this.div.append(i), this.#s(i), this.#g?.(this.div), this.highlighter?.enable(), this.accessibilityManager?.enable();
  }
  hide() {
    !this.div.hidden && this.#A && (this.highlighter?.disable(), this.div.hidden = !0);
  }
  show() {
    this.div.hidden && this.#A && (this.div.hidden = !1, this.highlighter?.enable());
  }
  cancel() {
    this.#C?.cancel(), this.#C = null, this.highlighter?.disable(), this.accessibilityManager?.disable(), yg.#d(this.div);
  }
  #s(I) {
    const {
      div: g
    } = this;
    g.addEventListener("mousedown", () => {
      g.classList.add("selecting");
    }), g.addEventListener("copy", (C) => {
      if (!this.#I) {
        const A = document.getSelection();
        C.clipboardData.setData("text/plain", jg(hZ(A.toString())));
      }
      nA(C);
    }), yg.#i.set(g, I), yg.#c();
  }
  static #d(I) {
    this.#i.delete(I), this.#i.size === 0 && (this.#l?.abort(), this.#l = null);
  }
  static #c() {
    if (this.#l)
      return;
    this.#l = new AbortController();
    const {
      signal: I
    } = this.#l, g = (l, s) => {
      s.append(l), l.style.width = "", l.style.height = "", s.classList.remove("selecting");
    };
    let C = !1;
    document.addEventListener("pointerdown", () => {
      C = !0;
    }, {
      signal: I
    }), document.addEventListener("pointerup", () => {
      C = !1, this.#i.forEach(g);
    }, {
      signal: I
    }), window.addEventListener("blur", () => {
      C = !1, this.#i.forEach(g);
    }, {
      signal: I
    }), document.addEventListener("keyup", () => {
      C || this.#i.forEach(g);
    }, {
      signal: I
    });
    var A, i;
    document.addEventListener("selectionchange", () => {
      const l = document.getSelection();
      if (l.rangeCount === 0) {
        this.#i.forEach(g);
        return;
      }
      const s = /* @__PURE__ */ new Set();
      for (let m = 0; m < l.rangeCount; m++) {
        const e = l.getRangeAt(m);
        for (const a of this.#i.keys())
          !s.has(a) && e.intersectsNode(a) && s.add(a);
      }
      for (const [m, e] of this.#i)
        s.has(m) ? m.classList.add("selecting") : g(e, m);
      if (A ??= getComputedStyle(this.#i.values().next().value).getPropertyValue("-moz-user-select") === "none", A)
        return;
      const d = l.getRangeAt(0), c = i && (d.compareBoundaryPoints(Range.END_TO_END, i) === 0 || d.compareBoundaryPoints(Range.START_TO_END, i) === 0);
      let G = c ? d.startContainer : d.endContainer;
      if (G.nodeType === Node.TEXT_NODE && (G = G.parentNode), !c && d.endOffset === 0)
        do {
          for (; !G.previousSibling; )
            G = G.parentNode;
          G = G.previousSibling;
        } while (!G.childNodes.length);
      const b = G.parentElement?.closest(".textLayer"), o = this.#i.get(b);
      o && (o.style.width = b.style.width, o.style.height = b.style.height, G.parentElement.insertBefore(o, c ? G : G.nextSibling)), i = d.cloneRange();
    }, {
      signal: I
    });
  }
}
class Is {
  constructor({
    pdfPage: I,
    annotationStorage: g = null,
    linkService: C,
    xfaHtml: A = null
  }) {
    this.pdfPage = I, this.annotationStorage = g, this.linkService = C, this.xfaHtml = A, this.div = null, this._cancelled = !1;
  }
  async render({
    viewport: I,
    intent: g = "display"
  }) {
    if (g === "print") {
      const i = {
        viewport: I.clone({
          dontFlip: !0
        }),
        div: this.div,
        xfaHtml: this.xfaHtml,
        annotationStorage: this.annotationStorage,
        linkService: this.linkService,
        intent: g
      };
      return this.div = document.createElement("div"), i.div = this.div, _C.render(i);
    }
    const C = await this.pdfPage.getXfa();
    if (this._cancelled || !C)
      return {
        textDivs: []
      };
    const A = {
      viewport: I.clone({
        dontFlip: !0
      }),
      div: this.div,
      xfaHtml: C,
      annotationStorage: this.annotationStorage,
      linkService: this.linkService,
      intent: g
    };
    return this.div ? _C.update(A) : (this.div = document.createElement("div"), A.div = this.div, _C.render(A));
  }
  cancel() {
    this._cancelled = !0;
  }
  hide() {
    this.div && (this.div.hidden = !0);
  }
}
const cG = {
  annotationEditorUIManager: null,
  annotationStorage: null,
  downloadManager: null,
  enableScripting: !1,
  fieldObjectsPromise: null,
  findController: null,
  hasJSActionsPromise: null,
  get linkService() {
    return new kC();
  }
}, GG = /* @__PURE__ */ new Map([["canvasWrapper", 0], ["textLayer", 1], ["annotationLayer", 2], ["annotationEditorLayer", 3], ["xfaLayer", 3]]);
class gs extends ql {
  #I = LI.ENABLE_FORMS;
  #g = null;
  #A = null;
  #C = !0;
  #i = !1;
  #l = !1;
  #s = null;
  #d = !1;
  #c = null;
  #Z = null;
  #o = 1;
  #b = 1;
  #m = JI.ENABLE;
  #t = 1;
  #a = {
    directDrawing: !0,
    initialOptionalContent: !0,
    regularAnnotations: !0
  };
  #G = [null, null, null, null];
  constructor(I) {
    super(I);
    const g = I.container, C = I.defaultViewport;
    this.renderingId = "page" + this.id, this.#s = I.layerProperties || cG, this.pdfPage = null, this.pageLabel = null, this.rotation = 0, this.scale = I.scale || jl, this.viewport = C, this.pdfPageRotate = C.rotation, this._optionalContentConfigPromise = I.optionalContentConfigPromise || null, this.#m = I.textLayerMode ?? JI.ENABLE, this.#I = I.annotationMode ?? LI.ENABLE_FORMS, this.imageResourcesPath = I.imageResourcesPath || "", this.enableDetailCanvas = I.enableDetailCanvas ?? !0, this.maxCanvasPixels = I.maxCanvasPixels ?? Qg.get("maxCanvasPixels"), this.maxCanvasDim = I.maxCanvasDim || Qg.get("maxCanvasDim"), this.capCanvasAreaFactor = I.capCanvasAreaFactor ?? Qg.get("capCanvasAreaFactor"), this.#C = I.enableAutoLinking !== !1, this.#A = I.commentManager || null, this.l10n = I.l10n, this.l10n ||= new xI(), this._isStandalone = !this.renderingQueue?.hasViewer(), this._container = g, this._annotationCanvasMap = null, this.annotationLayer = null, this.annotationEditorLayer = null, this.textLayer = null, this.xfaLayer = null, this.structTreeLayer = null, this.drawLayer = null, this.detailView = null;
    const A = document.createElement("div");
    if (A.className = "page", A.setAttribute("data-page-number", this.id), A.setAttribute("role", "region"), A.setAttribute("data-l10n-id", "pdfjs-page-landmark"), A.setAttribute("data-l10n-args", JSON.stringify({
      page: this.id
    })), this.div = A, this.#B(), g?.append(A), this._isStandalone) {
      g?.style.setProperty("--scale-factor", this.scale * TI.PDF_TO_CSS_UNITS), this.pageColors?.background && g?.style.setProperty("--page-bg-color", this.pageColors.background);
      const {
        optionalContentConfigPromise: i
      } = I;
      i && i.then((l) => {
        i === this._optionalContentConfigPromise && (this.#a.initialOptionalContent = l.hasInitialVisibility);
      }), I.l10n || this.l10n.translate(this.div);
    }
  }
  #e(I, g) {
    const C = GG.get(g), A = this.#G[C];
    if (this.#G[C] = I, A) {
      A.replaceWith(I);
      return;
    }
    for (let i = C - 1; i >= 0; i--) {
      const l = this.#G[i];
      if (l) {
        l.after(I);
        return;
      }
    }
    this.div.prepend(I);
  }
  #B() {
    const {
      div: I,
      viewport: g
    } = this;
    if (g.userUnit !== this.#t && (g.userUnit !== 1 ? I.style.setProperty("--user-unit", g.userUnit) : I.style.removeProperty("--user-unit"), this.#t = g.userUnit), this.pdfPage) {
      if (this.#Z === g.rotation)
        return;
      this.#Z = g.rotation;
    }
    Tl(I, g, !0, !1);
  }
  setPdfPage(I) {
    this._isStandalone && (this.pageColors?.foreground === "CanvasText" || this.pageColors?.background === "Canvas") && (this._container?.style.setProperty("--hcm-highlight-filter", I.filterFactory.addHighlightHCMFilter("highlight", "CanvasText", "Canvas", "HighlightText", "Highlight")), this._container?.style.setProperty("--hcm-highlight-selected-filter", I.filterFactory.addHighlightHCMFilter("highlight_selected", "CanvasText", "Canvas", "HighlightText", "Highlight"))), this.pdfPage = I, this.pdfPageRotate = I.rotate;
    const g = (this.rotation + this.pdfPageRotate) % 360;
    this.viewport = I.getViewport({
      scale: this.scale * TI.PDF_TO_CSS_UNITS,
      rotation: g
    }), this.#B(), this.reset();
  }
  destroy() {
    this.reset(), this.pdfPage?.cleanup();
  }
  hasEditableAnnotations() {
    return !!this.annotationLayer?.hasEditableAnnotations();
  }
  get _textHighlighter() {
    return HC(this, "_textHighlighter", new ZG({
      pageIndex: this.id - 1,
      eventBus: this.eventBus,
      findController: this.#s.findController
    }));
  }
  #W(I, g) {
    this.eventBus.dispatch(I, {
      source: this,
      pageNumber: this.id,
      error: g
    });
  }
  async #h() {
    let I = null;
    try {
      await this.annotationLayer.render({
        viewport: this.viewport,
        intent: "display",
        structTreeLayer: this.structTreeLayer
      });
    } catch (g) {
      console.error("#renderAnnotationLayer:", g), I = g;
    } finally {
      this.#W("annotationlayerrendered", I);
    }
  }
  async #N() {
    let I = null;
    try {
      await this.annotationEditorLayer.render({
        viewport: this.viewport,
        intent: "display"
      });
    } catch (g) {
      console.error("#renderAnnotationEditorLayer:", g), I = g;
    } finally {
      this.#W("annotationeditorlayerrendered", I);
    }
  }
  async #w() {
    try {
      await this.drawLayer.render({
        intent: "display"
      });
    } catch (I) {
      console.error("#renderDrawLayer:", I);
    }
  }
  async #n() {
    let I = null;
    try {
      const g = await this.xfaLayer.render({
        viewport: this.viewport,
        intent: "display"
      });
      g?.textDivs && this._textHighlighter && this.#u(g.textDivs);
    } catch (g) {
      console.error("#renderXfaLayer:", g), I = g;
    } finally {
      this.xfaLayer?.div && (this.l10n.pause(), this.#e(this.xfaLayer.div, "xfaLayer"), this.l10n.resume()), this.#W("xfalayerrendered", I);
    }
  }
  async #R() {
    if (!this.textLayer)
      return;
    let I = null;
    try {
      await this.textLayer.render({
        viewport: this.viewport
      });
    } catch (g) {
      if (g instanceof ZZ)
        return;
      console.error("#renderTextLayer:", g), I = g;
    }
    this.#W("textlayerrendered", I), this.#Y();
  }
  async #Y() {
    if (!this.textLayer)
      return;
    const I = await this.structTreeLayer?.render();
    I && (this.l10n.pause(), this.structTreeLayer?.addElementsToTextLayer(), this.canvas && I.parentNode !== this.canvas && this.canvas.append(I), this.l10n.resume()), this.structTreeLayer?.show();
  }
  async #u(I) {
    const g = await this.pdfPage.getTextContent(), C = [];
    for (const A of g.items)
      C.push(A.str);
    this._textHighlighter.setTextMapping(I, C), this._textHighlighter.enable();
  }
  async #M(I) {
    try {
      if (await I, !this.annotationLayer)
        return;
      await this.annotationLayer.injectLinkAnnotations(iG.processLinks(this));
    } catch (g) {
      console.error("#injectLinkAnnotations:", g);
    }
  }
  _resetCanvas() {
    super._resetCanvas(), this.#c = null;
  }
  reset({
    keepAnnotationLayer: I = !1,
    keepAnnotationEditorLayer: g = !1,
    keepXfaLayer: C = !1,
    keepTextLayer: A = !1,
    keepCanvasWrapper: i = !1,
    preserveDetailViewState: l = !1
  } = {}) {
    const s = this.pdfPage?._pdfBug ?? !1;
    this.cancelRendering({
      keepAnnotationLayer: I,
      keepAnnotationEditorLayer: g,
      keepXfaLayer: C,
      keepTextLayer: A
    }), this.renderingState = O.INITIAL;
    const d = this.div, c = d.childNodes, G = I && this.annotationLayer?.div || null, b = g && this.annotationEditorLayer?.div || null, o = C && this.xfaLayer?.div || null, m = A && this.textLayer?.div || null, e = i && this.#g || null;
    for (let a = c.length - 1; a >= 0; a--) {
      const h = c[a];
      switch (h) {
        case G:
        case b:
        case o:
        case m:
        case e:
          continue;
      }
      if (s && h.classList.contains("pdfBugGroupsLayer"))
        continue;
      h.remove();
      const t = this.#G.indexOf(h);
      t >= 0 && (this.#G[t] = null);
    }
    d.removeAttribute("data-loaded"), G && this.annotationLayer.hide(), b && this.annotationEditorLayer.hide(), o && this.xfaLayer.hide(), m && this.textLayer.hide(), this.structTreeLayer?.hide(), !i && this.#g && (this.#g = null, this._resetCanvas()), l || (this.detailView?.reset({
      keepCanvas: i
    }), i || (this.detailView = null));
  }
  toggleEditingMode(I) {
    this.#l = I, this.hasEditableAnnotations() && this.reset({
      keepAnnotationLayer: !0,
      keepAnnotationEditorLayer: !0,
      keepXfaLayer: !0,
      keepTextLayer: !0,
      keepCanvasWrapper: !0
    });
  }
  updateVisibleArea(I) {
    this.enableDetailCanvas && (this.#d && this.maxCanvasPixels > 0 && I ? (this.detailView ??= new sG({
      pageView: this,
      enableOptimizedPartialRendering: this.enableOptimizedPartialRendering
    }), this.detailView.update({
      visibleArea: I
    })) : this.detailView && (this.detailView.reset(), this.detailView = null));
  }
  update({
    scale: I = 0,
    rotation: g = null,
    optionalContentConfigPromise: C = null,
    drawingDelay: A = -1
  }) {
    this.scale = I || this.scale, typeof g == "number" && (this.rotation = g), C instanceof Promise && (this._optionalContentConfigPromise = C, C.then((l) => {
      C === this._optionalContentConfigPromise && (this.#a.initialOptionalContent = l.hasInitialVisibility);
    })), this.#a.directDrawing = !0;
    const i = (this.rotation + this.pdfPageRotate) % 360;
    if (this.viewport = this.viewport.clone({
      scale: this.scale * TI.PDF_TO_CSS_UNITS,
      rotation: i
    }), this.#B(), this._isStandalone && this._container?.style.setProperty("--scale-factor", this.viewport.scale), this.#y(), this.canvas) {
      const l = this.#i && this.#d, s = A >= 0 && A < 1e3;
      if (s || l) {
        s && !l && this.renderingState !== O.FINISHED && (this.cancelRendering({
          keepAnnotationLayer: !0,
          keepAnnotationEditorLayer: !0,
          keepXfaLayer: !0,
          keepTextLayer: !0,
          cancelExtraDelay: A
        }), this.renderingState = O.FINISHED, this.#a.directDrawing = !1), this.cssTransform({
          redrawAnnotationLayer: !0,
          redrawAnnotationEditorLayer: !0,
          redrawXfaLayer: !0,
          redrawTextLayer: !s,
          hideTextLayer: s
        }), s || (this.detailView?.update({
          underlyingViewUpdated: !0
        }), this.dispatchPageRendered(!0, !1));
        return;
      }
    }
    this.cssTransform({}), this.reset({
      keepAnnotationLayer: !0,
      keepAnnotationEditorLayer: !0,
      keepXfaLayer: !0,
      keepTextLayer: !0,
      keepCanvasWrapper: !0,
      preserveDetailViewState: !0
    }), this.detailView?.update({
      underlyingViewUpdated: !0
    });
  }
  #y() {
    const {
      width: I,
      height: g
    } = this.viewport, C = this.outputScale = new VC();
    if (this.maxCanvasPixels === 0) {
      const A = 1 / this.scale;
      C.sx *= A, C.sy *= A, this.#d = !0;
    } else if (this.#d = C.limitCanvas(I, g, this.maxCanvasPixels, this.maxCanvasDim, this.capCanvasAreaFactor), this.#d && this.enableDetailCanvas) {
      const A = this.enableOptimizedPartialRendering ? 4 : 2;
      C.sx /= A, C.sy /= A;
    }
  }
  cancelRendering({
    keepAnnotationLayer: I = !1,
    keepAnnotationEditorLayer: g = !1,
    keepXfaLayer: C = !1,
    keepTextLayer: A = !1,
    cancelExtraDelay: i = 0
  } = {}) {
    super.cancelRendering({
      cancelExtraDelay: i
    }), this.textLayer && (!A || !this.textLayer.div) && (this.textLayer.cancel(), this.textLayer = null), this.annotationLayer && (!I || !this.annotationLayer.div) && (this.annotationLayer.cancel(), this.annotationLayer = null, this._annotationCanvasMap = null), this.structTreeLayer && !this.textLayer && (this.structTreeLayer = null), this.annotationEditorLayer && (!g || !this.annotationEditorLayer.div) && (this.drawLayer && (this.drawLayer.cancel(), this.drawLayer = null), this.annotationEditorLayer.cancel(), this.annotationEditorLayer = null), this.xfaLayer && (!C || !this.xfaLayer.div) && (this.xfaLayer.cancel(), this.xfaLayer = null, this._textHighlighter?.disable());
  }
  cssTransform({
    redrawAnnotationLayer: I = !1,
    redrawAnnotationEditorLayer: g = !1,
    redrawXfaLayer: C = !1,
    redrawTextLayer: A = !1,
    hideTextLayer: i = !1
  }) {
    const {
      canvas: l
    } = this;
    if (!l)
      return;
    const s = this.#c;
    if (this.viewport !== s) {
      const d = (360 + this.viewport.rotation - s.rotation) % 360;
      if (d === 90 || d === 270) {
        const {
          width: c,
          height: G
        } = this.viewport, b = G / c, o = c / G;
        l.style.transform = `rotate(${d}deg) scale(${b},${o})`;
      } else
        l.style.transform = d === 0 ? "" : `rotate(${d}deg)`;
    }
    I && this.annotationLayer && this.#h(), g && this.annotationEditorLayer && (this.drawLayer && this.#w(), this.#N()), C && this.xfaLayer && this.#n(), this.textLayer && (i ? (this.textLayer.hide(), this.structTreeLayer?.hide()) : A && this.#R());
  }
  get width() {
    return this.viewport.width;
  }
  get height() {
    return this.viewport.height;
  }
  getPagePoint(I, g) {
    return this.viewport.convertToPdfPoint(I, g);
  }
  _ensureCanvasWrapper() {
    let I = this.#g;
    return I || (I = this.#g = document.createElement("div"), I.classList.add("canvasWrapper"), this.#e(I, "canvasWrapper")), I;
  }
  _getRenderingContext(I, g, C) {
    return {
      canvas: I,
      transform: g,
      viewport: this.viewport,
      annotationMode: this.#I,
      optionalContentConfigPromise: this._optionalContentConfigPromise,
      annotationCanvasMap: this._annotationCanvasMap,
      pageColors: this.pageColors,
      isEditing: this.#l,
      recordOperations: C
    };
  }
  async draw() {
    this.renderingState !== O.INITIAL && (console.error("Must be in new state before drawing"), this.reset());
    const {
      div: I,
      l10n: g,
      pdfPage: C,
      viewport: A
    } = this;
    if (!C)
      throw this.renderingState = O.FINISHED, new Error("pdfPage is not loaded");
    this.renderingState = O.RUNNING;
    const i = this._ensureCanvasWrapper();
    if (!this.textLayer && this.#m !== JI.DISABLE && !C.isPureXfa && (this._accessibilityManager ||= new xg(), this.textLayer = new yg({
      pdfPage: C,
      highlighter: this._textHighlighter,
      accessibilityManager: this._accessibilityManager,
      enablePermissions: this.#m === JI.ENABLE_PERMISSIONS,
      onAppend: (w) => {
        this.l10n.pause(), this.#e(w, "textLayer"), this.l10n.resume();
      }
    })), !this.annotationLayer && this.#I !== LI.DISABLE) {
      const {
        annotationStorage: w,
        annotationEditorUIManager: n,
        downloadManager: V,
        enableComment: N,
        enableScripting: R,
        fieldObjectsPromise: Y,
        hasJSActionsPromise: y,
        linkService: X
      } = this.#s;
      this._annotationCanvasMap ||= /* @__PURE__ */ new Map(), this.annotationLayer = new vl({
        pdfPage: C,
        annotationStorage: w,
        imageResourcesPath: this.imageResourcesPath,
        renderForms: this.#I === LI.ENABLE_FORMS,
        linkService: X,
        downloadManager: V,
        enableComment: N,
        enableScripting: R,
        hasJSActionsPromise: y,
        fieldObjectsPromise: Y,
        annotationCanvasMap: this._annotationCanvasMap,
        accessibilityManager: this._accessibilityManager,
        annotationEditorUIManager: n,
        commentManager: this.#A,
        onAppend: (K) => {
          this.#e(K, "annotationLayer");
        }
      });
    }
    const {
      width: l,
      height: s
    } = A;
    this.#c = A;
    const {
      canvas: d,
      prevCanvas: c
    } = this._createCanvas((w) => {
      i.prepend(w);
    });
    d.setAttribute("role", "presentation"), this.outputScale || this.#y();
    const {
      outputScale: G
    } = this;
    this.#i = this.#d;
    const b = yi(G.sx), o = yi(G.sy), m = d.width = eC(tC(l * G.sx), b[0]), e = d.height = eC(tC(s * G.sy), o[0]), a = eC(tC(l), b[1]), h = eC(tC(s), o[1]);
    G.sx = m / a, G.sy = e / h, this.#o !== b[1] && (I.style.setProperty("--scale-round-x", `${b[1]}px`), this.#o = b[1]), this.#b !== o[1] && (I.style.setProperty("--scale-round-y", `${o[1]}px`), this.#b = o[1]);
    const t = this.enableOptimizedPartialRendering && this.#i && !this.recordedBBoxes, W = G.scaled ? [G.sx, 0, 0, G.sy, 0, 0] : null, B = this._drawCanvas(this._getRenderingContext(d, W, t), () => {
      c?.remove(), this._resetCanvas();
    }, (w) => {
      this.#a.regularAnnotations = !w.separateAnnots, this.dispatchPageRendered(!1, !1);
    }).then(async () => {
      if (this.renderingState !== O.FINISHED)
        return;
      this.structTreeLayer ||= new $l(C, A.rawDims);
      const w = this.#R();
      this.annotationLayer && (await this.#h(), this.#C && this.annotationLayer && this.textLayer && await this.#M(w));
      const {
        annotationEditorUIManager: n
      } = this.#s;
      n && (this.drawLayer ||= new lG({
        pageIndex: this.id
      }), await this.#w(), this.drawLayer.setParent(i), (this.annotationLayer || this.#I === LI.DISABLE) && (this.annotationEditorLayer ||= new gG({
        uiManager: n,
        pdfPage: C,
        l10n: g,
        structTreeLayer: this.structTreeLayer,
        accessibilityManager: this._accessibilityManager,
        annotationLayer: this.annotationLayer?.annotationLayer,
        textLayer: this.textLayer,
        drawLayer: this.drawLayer.getDrawLayer(),
        onAppend: (V) => {
          this.#e(V, "annotationEditorLayer");
        }
      }), this.#N()));
    });
    if (C.isPureXfa) {
      if (!this.xfaLayer) {
        const {
          annotationStorage: w,
          linkService: n
        } = this.#s;
        this.xfaLayer = new Is({
          pdfPage: C,
          annotationStorage: w,
          linkService: n
        });
      }
      this.#n();
    }
    return I.setAttribute("data-loaded", !0), this.dispatchPageRender(), B;
  }
  setPageLabel(I) {
    this.pageLabel = typeof I == "string" ? I : null, this.div.setAttribute("data-l10n-args", JSON.stringify({
      page: this.pageLabel ?? this.id
    })), this.pageLabel !== null ? this.div.setAttribute("data-page-label", this.pageLabel) : this.div.removeAttribute("data-page-label");
  }
  get thumbnailCanvas() {
    const {
      directDrawing: I,
      initialOptionalContent: g,
      regularAnnotations: C
    } = this.#a;
    return I && g && C ? this.canvas : null;
  }
}
async function bG(Z) {
  const {
    info: C,
    metadata: A,
    contentDispositionFilename: i,
    contentLength: l
  } = await Z.getMetadata();
  return {
    ...C,
    baseURL: "",
    filesize: l || (await Z.getDownloadInfo()).length,
    filename: i || aZ(""),
    metadata: A?.getRaw(),
    authors: A?.get("dc:creator"),
    numPages: Z.numPages,
    URL: ""
  };
}
class oG {
  constructor(I) {
    this._ready = new Promise((g, C) => {
      import(
        /*webpackIgnore: true*/
        /*@vite-ignore*/
        I
      ).then((i) => {
        g(i.QuickJSSandbox());
      }).catch(C);
    });
  }
  async createSandbox(I) {
    (await this._ready).create(I);
  }
  async dispatchEventInSandbox(I) {
    const g = await this._ready;
    setTimeout(() => g.dispatchEvent(I), 0);
  }
  async destroySandbox() {
    (await this._ready).nukeSandbox();
  }
}
class mG {
  #I = null;
  #g = null;
  #A = null;
  #C = null;
  #i = null;
  #l = null;
  #s = null;
  #d = null;
  #c = !1;
  #Z = null;
  #o = null;
  constructor({
    eventBus: I,
    externalServices: g = null,
    docProperties: C = null
  }) {
    this.#i = I, this.#l = g, this.#A = C;
  }
  setViewer(I) {
    this.#d = I;
  }
  async setDocument(I) {
    if (this.#s && await this.#G(), this.#s = I, !I)
      return;
    const [g, C, A] = await Promise.all([I.getFieldObjects(), I.getCalculationOrderIds(), I.getJSActions()]);
    if (!g && !A) {
      await this.#G();
      return;
    }
    if (I !== this.#s)
      return;
    try {
      this.#Z = this.#a();
    } catch (s) {
      console.error("setDocument:", s), await this.#G();
      return;
    }
    const i = this.#i;
    this.#C = new AbortController();
    const {
      signal: l
    } = this.#C;
    i._on("updatefromsandbox", (s) => {
      s?.source === window && this.#b(s.detail);
    }, {
      signal: l
    }), i._on("dispatcheventinsandbox", (s) => {
      this.#Z?.dispatchEventInSandbox(s.detail);
    }, {
      signal: l
    }), i._on("pagechanging", ({
      pageNumber: s,
      previous: d
    }) => {
      s !== d && (this.#t(d), this.#m(s));
    }, {
      signal: l
    }), i._on("pagerendered", ({
      pageNumber: s
    }) => {
      this._pageOpenPending.has(s) && s === this.#d.currentPageNumber && this.#m(s);
    }, {
      signal: l
    }), i._on("pagesdestroy", async () => {
      await this.#t(this.#d.currentPageNumber), await this.#Z?.dispatchEventInSandbox({
        id: "doc",
        name: "WillClose"
      }), this.#I?.resolve();
    }, {
      signal: l
    });
    try {
      const s = await this.#A(I);
      if (I !== this.#s)
        return;
      await this.#Z.createSandbox({
        objects: g,
        calculationOrder: C,
        appInfo: {
          platform: navigator.platform,
          language: navigator.language
        },
        docInfo: {
          ...s,
          actions: A
        }
      }), i.dispatch("sandboxcreated", {
        source: this
      });
    } catch (s) {
      console.error("setDocument:", s), await this.#G();
      return;
    }
    await this.#Z?.dispatchEventInSandbox({
      id: "doc",
      name: "Open"
    }), await this.#m(this.#d.currentPageNumber, !0), Promise.resolve().then(() => {
      I === this.#s && (this.#c = !0);
    });
  }
  async dispatchWillSave() {
    return this.#Z?.dispatchEventInSandbox({
      id: "doc",
      name: "WillSave"
    });
  }
  async dispatchDidSave() {
    return this.#Z?.dispatchEventInSandbox({
      id: "doc",
      name: "DidSave"
    });
  }
  async dispatchWillPrint() {
    if (this.#Z) {
      await this.#o?.promise, this.#o = Promise.withResolvers();
      try {
        await this.#Z.dispatchEventInSandbox({
          id: "doc",
          name: "WillPrint"
        });
      } catch (I) {
        throw this.#o.resolve(), this.#o = null, I;
      }
      await this.#o.promise;
    }
  }
  async dispatchDidPrint() {
    return this.#Z?.dispatchEventInSandbox({
      id: "doc",
      name: "DidPrint"
    });
  }
  get destroyPromise() {
    return this.#g?.promise || null;
  }
  get ready() {
    return this.#c;
  }
  get _pageOpenPending() {
    return HC(this, "_pageOpenPending", /* @__PURE__ */ new Set());
  }
  get _visitedPages() {
    return HC(this, "_visitedPages", /* @__PURE__ */ new Map());
  }
  async #b(I) {
    const g = this.#d, C = g.isInPresentationMode || g.isChangingPresentationMode, {
      id: A,
      siblings: i,
      command: l,
      value: s
    } = I;
    if (!A) {
      switch (l) {
        case "clear":
          console.clear();
          break;
        case "error":
          console.error(s);
          break;
        case "layout":
          if (!C) {
            const c = DZ(s);
            g.spreadMode = c.spreadMode;
          }
          break;
        case "page-num":
          g.currentPageNumber = s + 1;
          break;
        case "print":
          await g.pagesPromise, this.#i.dispatch("print", {
            source: this
          });
          break;
        case "println":
          console.log(s);
          break;
        case "zoom":
          C || (g.currentScaleValue = s);
          break;
        case "SaveAs":
          this.#i.dispatch("download", {
            source: this
          });
          break;
        case "FirstPage":
          g.currentPageNumber = 1;
          break;
        case "LastPage":
          g.currentPageNumber = g.pagesCount;
          break;
        case "NextPage":
          g.nextPage();
          break;
        case "PrevPage":
          g.previousPage();
          break;
        case "ZoomViewIn":
          C || g.increaseScale();
          break;
        case "ZoomViewOut":
          C || g.decreaseScale();
          break;
        case "WillPrintFinished":
          this.#o?.resolve(), this.#o = null;
          break;
      }
      return;
    }
    if (C && I.focus)
      return;
    delete I.id, delete I.siblings;
    const d = i ? [A, ...i] : [A];
    for (const c of d) {
      const G = document.querySelector(`[data-element-id="${c}"]`);
      G ? G.dispatchEvent(new CustomEvent("updatefromsandbox", {
        detail: I
      })) : this.#s?.annotationStorage.setValue(c, I);
    }
  }
  async #m(I, g = !1) {
    const C = this.#s, A = this._visitedPages;
    if (g && (this.#I = Promise.withResolvers()), !this.#I)
      return;
    const i = this.#d.getPageView(I - 1);
    if (i?.renderingState !== O.FINISHED) {
      this._pageOpenPending.add(I);
      return;
    }
    this._pageOpenPending.delete(I);
    const l = (async () => {
      const s = await (A.has(I) ? null : i.pdfPage?.getJSActions());
      C === this.#s && await this.#Z?.dispatchEventInSandbox({
        id: "page",
        name: "PageOpen",
        pageNumber: I,
        actions: s
      });
    })();
    A.set(I, l);
  }
  async #t(I) {
    const g = this.#s, C = this._visitedPages;
    if (!this.#I || this._pageOpenPending.has(I))
      return;
    const A = C.get(I);
    A && (C.set(I, null), await A, g === this.#s && await this.#Z?.dispatchEventInSandbox({
      id: "page",
      name: "PageClose",
      pageNumber: I
    }));
  }
  #a() {
    if (this.#g = Promise.withResolvers(), this.#Z)
      throw new Error("#initScripting: Scripting already exists.");
    return this.#l.createScripting();
  }
  async #G() {
    if (!this.#Z) {
      this.#s = null, this.#g?.resolve();
      return;
    }
    this.#I && (await Promise.race([this.#I.promise, new Promise((I) => {
      setTimeout(I, 1e3);
    })]).catch(() => {
    }), this.#I = null), this.#s = null;
    try {
      await this.#Z.destroySandbox();
    } catch {
    }
    this.#o?.reject(new Error("Scripting destroyed.")), this.#o = null, this.#C?.abort(), this.#C = null, this._pageOpenPending.clear(), this._visitedPages.clear(), this.#Z = null, this.#c = !1, this.#g?.resolve();
  }
}
class aG extends mG {
  constructor(I) {
    I.externalServices || window.addEventListener("updatefromsandbox", (g) => {
      I.eventBus.dispatch("updatefromsandbox", {
        source: window,
        detail: g.detail
      });
    }), I.externalServices ||= {
      createScripting: () => new oG(I.sandboxBundleSrc)
    }, I.docProperties ||= (g) => bG(g), super(I);
  }
}
const eG = 3e4;
class tG {
  constructor() {
    this.pdfViewer = null, this.pdfThumbnailViewer = null, this.onIdle = null, this.highestPriorityPage = null, this.idleTimeout = null, this.printing = !1, this.isThumbnailViewEnabled = !1, Object.defineProperty(this, "hasViewer", {
      value: () => !!this.pdfViewer
    });
  }
  setViewer(I) {
    this.pdfViewer = I;
  }
  setThumbnailViewer(I) {
    this.pdfThumbnailViewer = I;
  }
  isHighestPriority(I) {
    return this.highestPriorityPage === I.renderingId;
  }
  renderHighestPriority(I) {
    this.idleTimeout && (clearTimeout(this.idleTimeout), this.idleTimeout = null), !this.pdfViewer.forceRendering(I) && (this.isThumbnailViewEnabled && this.pdfThumbnailViewer?.forceRendering() || this.printing || this.onIdle && (this.idleTimeout = setTimeout(this.onIdle.bind(this), eG)));
  }
  getHighestPriority(I, g, C, A = !1, i = !1) {
    const l = I.views, s = l.length;
    if (s === 0)
      return null;
    for (let o = 0; o < s; o++) {
      const m = l[o].view;
      if (!this.isViewFinished(m))
        return m;
    }
    if (!i)
      for (let o = 0; o < s; o++) {
        const {
          detailView: m
        } = l[o].view;
        if (m && !this.isViewFinished(m))
          return m;
      }
    const d = I.first.id, c = I.last.id;
    if (c - d + 1 > s) {
      const o = I.ids;
      for (let m = 1, e = c - d; m < e; m++) {
        const a = C ? d + m : c - m;
        if (o.has(a))
          continue;
        const h = g[a - 1];
        if (!this.isViewFinished(h))
          return h;
      }
    }
    let G = C ? c : d - 2, b = g[G];
    return b && !this.isViewFinished(b) || A && (G += C ? 1 : -1, b = g[G], b && !this.isViewFinished(b)) ? b : null;
  }
  isViewFinished(I) {
    return I.renderingState === O.FINISHED;
  }
  renderView(I) {
    switch (I.renderingState) {
      case O.FINISHED:
        return !1;
      case O.PAUSED:
        this.highestPriorityPage = I.renderingId, I.resume();
        break;
      case O.RUNNING:
        this.highestPriorityPage = I.renderingId;
        break;
      case O.INITIAL:
        this.highestPriorityPage = I.renderingId, I.draw().finally(() => {
          this.renderHighestPriority();
        }).catch((g) => {
          g instanceof wA || console.error("renderView:", g);
        });
        break;
    }
    return !0;
  }
}
const $i = 10, WC = {
  FORCE_SCROLL_MODE_PAGE: 1e4,
  FORCE_LAZY_PAGE_INIT: 5e3,
  PAUSE_EAGER_PAGE_INIT: 250
};
function Il(Z) {
  return Object.values(WI).includes(Z) && Z !== WI.DISABLE;
}
class hG {
  #I = /* @__PURE__ */ new Set();
  #g = 0;
  constructor(I) {
    this.#g = I;
  }
  push(I) {
    const g = this.#I;
    g.has(I) && g.delete(I), g.add(I), g.size > this.#g && this.#A();
  }
  resize(I, g = null) {
    this.#g = I;
    const C = this.#I;
    if (g) {
      const A = C.size;
      let i = 1;
      for (const l of C)
        if (g.has(l.id) && (C.delete(l), C.add(l)), ++i > A)
          break;
    }
    for (; C.size > this.#g; )
      this.#A();
  }
  has(I) {
    return this.#I.has(I);
  }
  [Symbol.iterator]() {
    return this.#I.keys();
  }
  #A() {
    const I = this.#I.keys().next().value;
    I?.destroy(), this.#I.delete(I);
  }
}
class Cs {
  #I = null;
  #g = null;
  #A = null;
  #C = WI.NONE;
  #i = null;
  #l = LI.ENABLE_FORMS;
  #s = null;
  #d = null;
  #c = null;
  #Z = !1;
  #o = !1;
  #b = !1;
  #m = !1;
  #t = !1;
  #a = !0;
  #G = null;
  #e = 0;
  #B = null;
  #W = !0;
  #h = null;
  #N = null;
  #w = null;
  #n = !1;
  #R = null;
  #Y = !1;
  #u = 0;
  #M = new ResizeObserver(this.#q.bind(this));
  #y = null;
  #X = null;
  #p = null;
  #K = !0;
  #S = JI.ENABLE;
  #F = null;
  constructor(I) {
    const g = "5.4.296";
    if (Yi !== g)
      throw new Error(`The API version "${Yi}" does not match the Viewer version "${g}".`);
    if (this.container = I.container, this.viewer = I.viewer || I.container.firstElementChild, this.#F = I.viewerAlert || null, this.container?.tagName !== "DIV" || this.viewer?.tagName !== "DIV")
      throw new Error("Invalid `container` and/or `viewer` option.");
    if (this.container.offsetParent && getComputedStyle(this.container).position !== "absolute")
      throw new Error("The `container` must be absolutely positioned.");
    this.#M.observe(this.container), this.eventBus = I.eventBus, this.linkService = I.linkService || new kC(), this.downloadManager = I.downloadManager || null, this.findController = I.findController || null, this.#g = I.altTextManager || null, this.#s = I.commentManager || null, this.#p = I.signatureManager || null, this.#c = I.editorUndoBar || null, this.findController && (this.findController.onIsPageVisible = (A) => this._getVisiblePages().ids.has(A)), this._scriptingManager = I.scriptingManager || null, this.#S = I.textLayerMode ?? JI.ENABLE, this.#l = I.annotationMode ?? LI.ENABLE_FORMS, this.#C = I.annotationEditorMode ?? WI.NONE, this.#A = I.annotationEditorHighlightColors || null, this.#o = I.enableHighlightFloatingButton === !0, this.#m = I.enableUpdatedAddImage === !0, this.#t = I.enableNewAltTextWhenAddingImage === !0, this.imageResourcesPath = I.imageResourcesPath || "", this.enablePrintAutoRotate = I.enablePrintAutoRotate || !1, this.removePageBorders = I.removePageBorders || !1, this.maxCanvasPixels = I.maxCanvasPixels, this.maxCanvasDim = I.maxCanvasDim, this.capCanvasAreaFactor = I.capCanvasAreaFactor, this.enableDetailCanvas = I.enableDetailCanvas ?? !0, this.enableOptimizedPartialRendering = I.enableOptimizedPartialRendering ?? !1, this.l10n = I.l10n, this.l10n ||= new xI(), this.#b = I.enablePermissions || !1, this.pageColors = I.pageColors || null, this.#B = I.mlManager || null, this.#Z = I.enableHWA || !1, this.#K = I.supportsPinchToZoom !== !1, this.#a = I.enableAutoLinking !== !1, this.#e = I.minDurationToUpdateCanvas ?? 500, this.defaultRenderingQueue = !I.renderingQueue, this.defaultRenderingQueue ? (this.renderingQueue = new tG(), this.renderingQueue.setViewer(this)) : this.renderingQueue = I.renderingQueue;
    const {
      abortSignal: C
    } = I;
    C?.addEventListener("abort", () => {
      this.#M.disconnect(), this.#M = null;
    }, {
      once: !0
    }), this.scroll = NZ(this.container, this._scrollUpdate.bind(this), C), this.presentationModeState = ug.UNKNOWN, this._resetView(), this.removePageBorders && this.viewer.classList.add("removePageBorders"), this.#f(), this.eventBus._on("thumbnailrendered", ({
      pageNumber: A,
      pdfPage: i
    }) => {
      const l = this._pages[A - 1];
      this.#I.has(l) || i?.cleanup();
    }), I.l10n || this.l10n.translate(this.container);
  }
  get printingAllowed() {
    return this.#W;
  }
  get pagesCount() {
    return this._pages.length;
  }
  getPageView(I) {
    return this._pages[I];
  }
  getCachedPageViews() {
    return new Set(this.#I);
  }
  get pageViewsReady() {
    return this._pages.every((I) => I?.pdfPage);
  }
  get renderForms() {
    return this.#l === LI.ENABLE_FORMS;
  }
  get enableScripting() {
    return !!this._scriptingManager;
  }
  get currentPageNumber() {
    return this._currentPageNumber;
  }
  set currentPageNumber(I) {
    if (!Number.isInteger(I))
      throw new Error("Invalid page number.");
    this.pdfDocument && (this._setCurrentPageNumber(I, !0) || console.error(`currentPageNumber: "${I}" is not a valid page.`));
  }
  _setCurrentPageNumber(I, g = !1) {
    if (this._currentPageNumber === I)
      return g && this.#v(), !0;
    if (!(0 < I && I <= this.pagesCount))
      return !1;
    const C = this._currentPageNumber;
    return this._currentPageNumber = I, this.eventBus.dispatch("pagechanging", {
      source: this,
      pageNumber: I,
      pageLabel: this._pageLabels?.[I - 1] ?? null,
      previous: C
    }), g && this.#v(), !0;
  }
  get currentPageLabel() {
    return this._pageLabels?.[this._currentPageNumber - 1] ?? null;
  }
  set currentPageLabel(I) {
    if (!this.pdfDocument)
      return;
    let g = I | 0;
    if (this._pageLabels) {
      const C = this._pageLabels.indexOf(I);
      C >= 0 && (g = C + 1);
    }
    this._setCurrentPageNumber(g, !0) || console.error(`currentPageLabel: "${I}" is not a valid page.`);
  }
  get currentScale() {
    return this._currentScale !== qC ? this._currentScale : jl;
  }
  set currentScale(I) {
    if (isNaN(I))
      throw new Error("Invalid numeric scale.");
    this.pdfDocument && this.#k(I, {
      noScroll: !1
    });
  }
  get currentScaleValue() {
    return this._currentScaleValue;
  }
  set currentScaleValue(I) {
    this.pdfDocument && this.#k(I, {
      noScroll: !1
    });
  }
  get pagesRotation() {
    return this._pagesRotation;
  }
  set pagesRotation(I) {
    if (!xl(I))
      throw new Error("Invalid pages rotation angle.");
    if (!this.pdfDocument || (I %= 360, I < 0 && (I += 360), this._pagesRotation === I))
      return;
    this._pagesRotation = I;
    const g = this._currentPageNumber;
    this.refresh(!0, {
      rotation: I
    }), this._currentScaleValue && this.#k(this._currentScaleValue, {
      noScroll: !0
    }), this.eventBus.dispatch("rotationchanging", {
      source: this,
      pagesRotation: I,
      pageNumber: g
    }), this.defaultRenderingQueue && this.update();
  }
  get firstPagePromise() {
    return this.pdfDocument ? this._firstPageCapability.promise : null;
  }
  get onePageRendered() {
    return this.pdfDocument ? this._onePageRenderedCapability.promise : null;
  }
  get pagesPromise() {
    return this.pdfDocument ? this._pagesCapability.promise : null;
  }
  get _layerProperties() {
    const I = this;
    return HC(this, "_layerProperties", {
      get annotationEditorUIManager() {
        return I.#i;
      },
      get annotationStorage() {
        return I.pdfDocument?.annotationStorage;
      },
      get downloadManager() {
        return I.downloadManager;
      },
      get enableComment() {
        return !!I.#s;
      },
      get enableScripting() {
        return !!I._scriptingManager;
      },
      get fieldObjectsPromise() {
        return I.pdfDocument?.getFieldObjects();
      },
      get findController() {
        return I.findController;
      },
      get hasJSActionsPromise() {
        return I.pdfDocument?.hasJSActions();
      },
      get linkService() {
        return I.linkService;
      }
    });
  }
  #z(I) {
    const g = {
      annotationEditorMode: this.#C,
      annotationMode: this.#l,
      textLayerMode: this.#S
    };
    return I ? (this.#W = I.includes(eg.PRINT_HIGH_QUALITY) || I.includes(eg.PRINT), this.eventBus.dispatch("printingallowed", {
      source: this,
      isAllowed: this.#W
    }), !I.includes(eg.COPY) && this.#S === JI.ENABLE && (g.textLayerMode = JI.ENABLE_PERMISSIONS), I.includes(eg.MODIFY_CONTENTS) || (g.annotationEditorMode = WI.DISABLE), !I.includes(eg.MODIFY_ANNOTATIONS) && !I.includes(eg.FILL_INTERACTIVE_FORMS) && this.#l === LI.ENABLE_FORMS && (g.annotationMode = LI.ENABLE), g) : (this.#W = !0, this.eventBus.dispatch("printingallowed", {
      source: this,
      isAllowed: this.#W
    }), g);
  }
  async #x(I) {
    if (document.visibilityState === "hidden" || !this.container.offsetParent || this._getVisiblePages().views.length === 0)
      return;
    const g = Promise.withResolvers(), C = new AbortController();
    document.addEventListener("visibilitychange", () => {
      document.visibilityState === "hidden" && g.resolve();
    }, {
      signal: AbortSignal.any([I, C.signal])
    }), await Promise.race([this._onePageRenderedCapability.promise, g.promise]), C.abort();
  }
  async getAllText() {
    const I = [], g = [];
    for (let C = 1, A = this.pdfDocument.numPages; C <= A; ++C) {
      if (this.#Y)
        return null;
      g.length = 0;
      const i = await this.pdfDocument.getPage(C), {
        items: l
      } = await i.getTextContent();
      for (const s of l)
        s.str && g.push(s.str), s.hasEOL && g.push(`
`);
      I.push(jg(g.join("")));
    }
    return I.join(`
`);
  }
  #H(I, g) {
    const C = document.getSelection(), {
      focusNode: A,
      anchorNode: i
    } = C;
    if (i && A && C.containsNode(this.#R)) {
      if (this.#n || I === JI.ENABLE_PERMISSIONS) {
        nA(g);
        return;
      }
      this.#n = !0;
      const {
        classList: l
      } = this.viewer;
      l.add("copyAll");
      const s = new AbortController();
      window.addEventListener("keydown", (d) => this.#Y = d.key === "Escape", {
        signal: s.signal
      }), this.getAllText().then(async (d) => {
        d !== null && await navigator.clipboard.writeText(d);
      }).catch((d) => {
        console.warn(`Something goes wrong when extracting the text: ${d.message}`);
      }).finally(() => {
        this.#n = !1, this.#Y = !1, s.abort(), l.remove("copyAll");
      }), nA(g);
    }
  }
  setDocument(I) {
    if (this.pdfDocument && (this.eventBus.dispatch("pagesdestroy", {
      source: this
    }), this._cancelRendering(), this._resetView(), this.findController?.setDocument(null), this._scriptingManager?.setDocument(null), this.#i?.destroy(), this.#i = null, this.#C = WI.NONE, this.#W = !0), this.pdfDocument = I, !I)
      return;
    const g = I.numPages, C = I.getPage(1), A = I.getOptionalContentConfig({
      intent: "display"
    }), i = this.#b ? I.getPermissions() : Promise.resolve(), {
      eventBus: l,
      pageColors: s,
      viewer: d
    } = this;
    this.#G = new AbortController();
    const {
      signal: c
    } = this.#G;
    if (g > WC.FORCE_SCROLL_MODE_PAGE) {
      console.warn("Forcing PAGE-scrolling for performance reasons, given the length of the document.");
      const o = this._scrollMode = x.PAGE;
      l.dispatch("scrollmodechanged", {
        source: this,
        mode: o
      });
    }
    this._pagesCapability.promise.then(() => {
      l.dispatch("pagesloaded", {
        source: this,
        pagesCount: g
      });
    }, () => {
    });
    const G = (o) => {
      const m = this._pages[o.pageNumber - 1];
      m && this.#I.push(m);
    };
    l._on("pagerender", G, {
      signal: c
    });
    const b = (o) => {
      o.cssTransform || o.isDetailView || (this._onePageRenderedCapability.resolve({
        timestamp: o.timestamp
      }), l._off("pagerendered", b));
    };
    l._on("pagerendered", b, {
      signal: c
    }), Promise.all([C, i]).then(([o, m]) => {
      if (I !== this.pdfDocument)
        return;
      this._firstPageCapability.resolve(o), this._optionalContentConfigPromise = A;
      const {
        annotationEditorMode: e,
        annotationMode: a,
        textLayerMode: h
      } = this.#z(m);
      if (h !== JI.DISABLE) {
        const w = this.#R = document.createElement("div");
        w.id = "hiddenCopyElement", d.before(w);
      }
      if (e !== WI.DISABLE) {
        const w = e;
        I.isPureXfa ? console.warn("Warning: XFA-editing is not implemented.") : Il(w) ? (this.#i = new GZ(this.container, d, this.#F, this.#g, this.#s, this.#p, l, I, s, this.#A, this.#o, this.#m, this.#t, this.#B, this.#c, this.#K), l.dispatch("annotationeditoruimanager", {
          source: this,
          uiManager: this.#i
        }), w !== WI.NONE && (this.#_(w), this.#i.updateMode(w))) : console.error(`Invalid AnnotationEditor mode: ${w}`);
      }
      const t = this._scrollMode === x.PAGE ? null : d, W = this.currentScale, B = o.getViewport({
        scale: W * TI.PDF_TO_CSS_UNITS
      });
      d.style.setProperty("--scale-factor", B.scale), s?.background && d.style.setProperty("--page-bg-color", s.background), (s?.foreground === "CanvasText" || s?.background === "Canvas") && (d.style.setProperty("--hcm-highlight-filter", I.filterFactory.addHighlightHCMFilter("highlight", "CanvasText", "Canvas", "HighlightText", "Highlight")), d.style.setProperty("--hcm-highlight-selected-filter", I.filterFactory.addHighlightHCMFilter("highlight_selected", "CanvasText", "Canvas", "HighlightText", "ButtonText")));
      for (let w = 1; w <= g; ++w) {
        const n = new gs({
          container: t,
          eventBus: l,
          id: w,
          scale: W,
          defaultViewport: B.clone(),
          optionalContentConfigPromise: A,
          renderingQueue: this.renderingQueue,
          textLayerMode: h,
          annotationMode: a,
          imageResourcesPath: this.imageResourcesPath,
          maxCanvasPixels: this.maxCanvasPixels,
          maxCanvasDim: this.maxCanvasDim,
          capCanvasAreaFactor: this.capCanvasAreaFactor,
          enableDetailCanvas: this.enableDetailCanvas,
          enableOptimizedPartialRendering: this.enableOptimizedPartialRendering,
          pageColors: s,
          l10n: this.l10n,
          layerProperties: this._layerProperties,
          enableHWA: this.#Z,
          enableAutoLinking: this.#a,
          minDurationToUpdateCanvas: this.#e,
          commentManager: this.#s
        });
        this._pages.push(n);
      }
      this._pages[0]?.setPdfPage(o), this._scrollMode === x.PAGE ? this.#V() : this._spreadMode !== oI.NONE && this._updateSpreadMode(), l._on("annotationeditorlayerrendered", (w) => {
        this.#i && l.dispatch("annotationeditormodechanged", {
          source: this,
          mode: this.#C
        });
      }, {
        once: !0,
        signal: c
      }), this.#x(c).then(async () => {
        if (I !== this.pdfDocument)
          return;
        if (this.findController?.setDocument(I), this._scriptingManager?.setDocument(I), this.#R && document.addEventListener("copy", this.#H.bind(this, h), {
          signal: c
        }), I.loadingParams.disableAutoFetch || g > WC.FORCE_LAZY_PAGE_INIT) {
          this._pagesCapability.resolve();
          return;
        }
        let w = g - 1;
        if (w <= 0) {
          this._pagesCapability.resolve();
          return;
        }
        for (let n = 2; n <= g; ++n) {
          const V = I.getPage(n).then((N) => {
            const R = this._pages[n - 1];
            R.pdfPage || R.setPdfPage(N), --w === 0 && this._pagesCapability.resolve();
          }, (N) => {
            console.error(`Unable to get page ${n} to initialize viewer`, N), --w === 0 && this._pagesCapability.resolve();
          });
          n % WC.PAUSE_EAGER_PAGE_INIT === 0 && await V;
        }
      }), l.dispatch("pagesinit", {
        source: this
      }), I.getMetadata().then(({
        info: w
      }) => {
        I === this.pdfDocument && w.Language && (d.lang = w.Language);
      }), this.defaultRenderingQueue && this.update();
    }).catch((o) => {
      console.error("Unable to initialize viewer", o), this._pagesCapability.reject(o);
    });
  }
  setPageLabels(I) {
    if (this.pdfDocument) {
      I ? Array.isArray(I) && this.pdfDocument.numPages === I.length ? this._pageLabels = I : (this._pageLabels = null, console.error("setPageLabels: Invalid page labels.")) : this._pageLabels = null;
      for (let g = 0, C = this._pages.length; g < C; g++)
        this._pages[g].setPageLabel(this._pageLabels?.[g] ?? null);
    }
  }
  _resetView() {
    this._pages = [], this._currentPageNumber = 1, this._currentScale = qC, this._currentScaleValue = null, this._pageLabels = null, this.#I = new hG($i), this._location = null, this._pagesRotation = 0, this._optionalContentConfigPromise = null, this._firstPageCapability = Promise.withResolvers(), this._onePageRenderedCapability = Promise.withResolvers(), this._pagesCapability = Promise.withResolvers(), this._scrollMode = x.VERTICAL, this._previousScrollMode = x.UNKNOWN, this._spreadMode = oI.NONE, this.#y = {
      previousPageNumber: 1,
      scrollDown: !0,
      pages: []
    }, this.#G?.abort(), this.#G = null, this.viewer.textContent = "", this._updateScrollMode(), this.viewer.removeAttribute("lang"), this.#R?.remove(), this.#R = null, this.#T(), this.#E();
  }
  #V() {
    if (this._scrollMode !== x.PAGE)
      throw new Error("#ensurePageViewVisible: Invalid scrollMode value.");
    const I = this._currentPageNumber, g = this.#y, C = this.viewer;
    if (C.textContent = "", g.pages.length = 0, this._spreadMode === oI.NONE && !this.isInPresentationMode) {
      const A = this._pages[I - 1];
      C.append(A.div), g.pages.push(A);
    } else {
      const A = /* @__PURE__ */ new Set(), i = this._spreadMode - 1;
      i === -1 ? A.add(I - 1) : I % 2 !== i ? (A.add(I - 1), A.add(I)) : (A.add(I - 2), A.add(I - 1));
      const l = document.createElement("div");
      if (l.className = "spread", this.isInPresentationMode) {
        const s = document.createElement("div");
        s.className = "dummyPage", l.append(s);
      }
      for (const s of A) {
        const d = this._pages[s];
        d && (l.append(d.div), g.pages.push(d));
      }
      C.append(l);
    }
    g.scrollDown = I >= g.previousPageNumber, g.previousPageNumber = I;
  }
  _scrollUpdate() {
    this.pagesCount !== 0 && (this.#h && clearTimeout(this.#h), this.#h = setTimeout(() => {
      this.#h = null, this.update();
    }, 100), this.update());
  }
  #D(I, g = null) {
    const {
      div: C,
      id: A
    } = I;
    if (this._currentPageNumber !== A && this._setCurrentPageNumber(A), this._scrollMode === x.PAGE && (this.#V(), this.update()), !g && !this.isInPresentationMode) {
      const i = C.offsetLeft + C.clientLeft, l = i + C.clientWidth, {
        scrollLeft: s,
        clientWidth: d
      } = this.container;
      (this._scrollMode === x.HORIZONTAL || i < s || l > s + d) && (g = {
        left: 0,
        top: 0
      });
    }
    Ql(C, g), !this._currentScaleValue && this._location && (this._location = null);
  }
  #r(I) {
    return I === this._currentScale || Math.abs(I - this._currentScale) < 1e-15;
  }
  #j(I, g, {
    noScroll: C = !1,
    preset: A = !1,
    drawingDelay: i = -1,
    origin: l = null
  }) {
    if (this._currentScaleValue = g.toString(), this.#r(I)) {
      A && this.eventBus.dispatch("scalechanging", {
        source: this,
        scale: I,
        presetValue: g
      });
      return;
    }
    this.viewer.style.setProperty("--scale-factor", I * TI.PDF_TO_CSS_UNITS);
    const s = i >= 0 && i < 1e3;
    this.refresh(!0, {
      scale: I,
      drawingDelay: s ? i : -1
    }), s && (this.#X = setTimeout(() => {
      this.#X = null, this.refresh();
    }, i));
    const d = this._currentScale;
    if (this._currentScale = I, !C) {
      let c = this._currentPageNumber, G;
      if (this._location && !(this.isInPresentationMode || this.isChangingPresentationMode) && (c = this._location.pageNumber, G = [null, {
        name: "XYZ"
      }, this._location.left, this._location.top, null]), this.scrollPageIntoView({
        pageNumber: c,
        destArray: G,
        allowNegativeOffset: !0
      }), Array.isArray(l)) {
        const b = I / d - 1, [o, m] = this.containerTopLeft;
        this.container.scrollLeft += (l[0] - m) * b, this.container.scrollTop += (l[1] - o) * b;
      }
    }
    this.eventBus.dispatch("scalechanging", {
      source: this,
      scale: I,
      presetValue: A ? g : void 0
    }), this.defaultRenderingQueue && this.update();
  }
  get #P() {
    return this._spreadMode !== oI.NONE && this._scrollMode !== x.HORIZONTAL ? 2 : 1;
  }
  #k(I, g) {
    let C = parseFloat(I);
    if (C > 0)
      g.preset = !1, this.#j(C, I, g);
    else {
      const A = this._pages[this._currentPageNumber - 1];
      if (!A)
        return;
      let i = Ni, l = ui;
      this.isInPresentationMode ? (i = l = 4, this._spreadMode !== oI.NONE && (i *= 2)) : this.removePageBorders ? i = l = 0 : this._scrollMode === x.HORIZONTAL && ([i, l] = [l, i]);
      const s = (this.container.clientWidth - i) / A.width * A.scale / this.#P, d = (this.container.clientHeight - l) / A.height * A.scale;
      switch (I) {
        case "page-actual":
          C = 1;
          break;
        case "page-width":
          C = s;
          break;
        case "page-height":
          C = d;
          break;
        case "page-fit":
          C = Math.min(s, d);
          break;
        case "auto":
          const c = Xi(A) ? s : Math.min(d, s);
          C = Math.min(VZ, c);
          break;
        default:
          console.error(`#setScale: "${I}" is an unknown zoom value.`);
          return;
      }
      g.preset = !0, this.#j(C, I, g);
    }
  }
  #v() {
    const I = this._pages[this._currentPageNumber - 1];
    this.isInPresentationMode && this.#k(this._currentScaleValue, {
      noScroll: !0
    }), this.#D(I);
  }
  pageLabelToPageNumber(I) {
    if (!this._pageLabels)
      return null;
    const g = this._pageLabels.indexOf(I);
    return g < 0 ? null : g + 1;
  }
  scrollPageIntoView({
    pageNumber: I,
    destArray: g = null,
    allowNegativeOffset: C = !1,
    ignoreDestinationZoom: A = !1,
    center: i = null
  }) {
    if (!this.pdfDocument)
      return;
    const l = Number.isInteger(I) && this._pages[I - 1];
    if (!l) {
      console.error(`scrollPageIntoView: "${I}" is not a valid pageNumber parameter.`);
      return;
    }
    if (this.isInPresentationMode || !g) {
      this._setCurrentPageNumber(I, !0);
      return;
    }
    let s = 0, d = 0, c = 0, G = 0, b, o;
    const m = l.rotation % 180 !== 0, e = (m ? l.height : l.width) / l.scale / TI.PDF_TO_CSS_UNITS, a = (m ? l.width : l.height) / l.scale / TI.PDF_TO_CSS_UNITS;
    let h = 0;
    switch (g[1].name) {
      case "XYZ":
        s = g[2], d = g[3], h = g[4], s = s !== null ? s : 0, d = d !== null ? d : a;
        break;
      case "Fit":
      case "FitB":
        h = "page-fit";
        break;
      case "FitH":
      case "FitBH":
        d = g[2], h = "page-width", d === null && this._location ? (s = this._location.left, d = this._location.top) : (typeof d != "number" || d < 0) && (d = a);
        break;
      case "FitV":
      case "FitBV":
        s = g[2], c = e, G = a, h = "page-height";
        break;
      case "FitR":
        s = g[2], d = g[3], c = g[4] - s, G = g[5] - d;
        let w = Ni, n = ui;
        this.removePageBorders && (w = n = 0), b = (this.container.clientWidth - w) / c / TI.PDF_TO_CSS_UNITS, o = (this.container.clientHeight - n) / G / TI.PDF_TO_CSS_UNITS, h = Math.min(Math.abs(b), Math.abs(o));
        break;
      default:
        console.error(`scrollPageIntoView: "${g[1].name}" is not a valid destination type.`);
        return;
    }
    if (A || (h && h !== this._currentScale ? this.currentScaleValue = h : this._currentScale === qC && (this.currentScaleValue = wZ)), h === "page-fit" && !g[4]) {
      this.#D(l);
      return;
    }
    const t = [l.viewport.convertToViewportPoint(s, d), l.viewport.convertToViewportPoint(s + c, d + G)];
    let W = Math.min(t[0][0], t[1][0]), B = Math.min(t[0][1], t[1][1]);
    i ? ((i === "both" || i === "vertical") && (B -= (this.container.clientHeight - Math.abs(t[1][1] - t[0][1])) / 2), (i === "both" || i === "horizontal") && (W -= (this.container.clientWidth - Math.abs(t[1][0] - t[0][0])) / 2)) : C || (W = Math.max(W, 0), B = Math.max(B, 0)), this.#D(l, {
      left: W,
      top: B
    });
  }
  _updateLocation(I) {
    const g = this._currentScale, C = this._currentScaleValue, A = parseFloat(C) === g ? Math.round(g * 1e4) / 100 : C, i = I.id, l = this._pages[i - 1], s = this.container, d = l.getPagePoint(s.scrollLeft - I.x, s.scrollTop - I.y), c = Math.round(d[0]), G = Math.round(d[1]);
    let b = `#page=${i}`;
    this.isInPresentationMode || (b += `&zoom=${A},${c},${G}`), this._location = {
      pageNumber: i,
      scale: A,
      top: G,
      left: c,
      rotation: this._pagesRotation,
      pdfOpenParams: b
    };
  }
  update() {
    const I = this._getVisiblePages(), g = I.views, C = g.length;
    if (C === 0)
      return;
    const A = Math.max($i, 2 * C + 1);
    this.#I.resize(A, I.ids);
    for (const {
      view: d,
      visibleArea: c
    } of g)
      d.updateVisibleArea(c);
    for (const d of this.#I)
      I.ids.has(d.id) || d.updateVisibleArea(null);
    this.renderingQueue.renderHighestPriority(I);
    const i = this._spreadMode === oI.NONE && (this._scrollMode === x.PAGE || this._scrollMode === x.VERTICAL), l = this._currentPageNumber;
    let s = !1;
    for (const d of g) {
      if (d.percent < 100)
        break;
      if (d.id === l && i) {
        s = !0;
        break;
      }
    }
    this._setCurrentPageNumber(s ? l : g[0].id), this._updateLocation(I.first), this.eventBus.dispatch("updateviewarea", {
      source: this,
      location: this._location
    });
  }
  #Q() {
    const I = this._getVisiblePages(), g = [], {
      ids: C,
      views: A
    } = I;
    for (const i of A) {
      const {
        view: l
      } = i;
      if (!l.hasEditableAnnotations()) {
        C.delete(l.id);
        continue;
      }
      g.push(i);
    }
    return g.length === 0 ? null : (this.renderingQueue.renderHighestPriority({
      first: g[0],
      last: g.at(-1),
      views: g,
      ids: C
    }), C);
  }
  containsElement(I) {
    return this.container.contains(I);
  }
  focus() {
    this.container.focus();
  }
  get _isContainerRtl() {
    return getComputedStyle(this.container).direction === "rtl";
  }
  get isInPresentationMode() {
    return this.presentationModeState === ug.FULLSCREEN;
  }
  get isChangingPresentationMode() {
    return this.presentationModeState === ug.CHANGING;
  }
  get isHorizontalScrollbarEnabled() {
    return this.isInPresentationMode ? !1 : this.container.scrollWidth > this.container.clientWidth;
  }
  get isVerticalScrollbarEnabled() {
    return this.isInPresentationMode ? !1 : this.container.scrollHeight > this.container.clientHeight;
  }
  _getVisiblePages() {
    const I = this._scrollMode === x.PAGE ? this.#y.pages : this._pages, g = this._scrollMode === x.HORIZONTAL, C = g && this._isContainerRtl;
    return RZ({
      scrollEl: this.container,
      views: I,
      sortByVisibility: !0,
      horizontal: g,
      rtl: C
    });
  }
  cleanup() {
    for (const I of this._pages)
      I.renderingState !== O.FINISHED && I.reset();
  }
  _cancelRendering() {
    for (const I of this._pages)
      I.cancelRendering();
  }
  async #J(I) {
    if (I.pdfPage)
      return I.pdfPage;
    try {
      const g = await this.pdfDocument.getPage(I.id);
      return I.pdfPage || I.setPdfPage(g), g;
    } catch (g) {
      return console.error("Unable to get page for page view", g), null;
    }
  }
  #O(I) {
    if (I.first?.id === 1)
      return !0;
    if (I.last?.id === this.pagesCount)
      return !1;
    switch (this._scrollMode) {
      case x.PAGE:
        return this.#y.scrollDown;
      case x.HORIZONTAL:
        return this.scroll.right;
    }
    return this.scroll.down;
  }
  forceRendering(I) {
    const g = I || this._getVisiblePages(), C = this.#O(g), A = this._spreadMode !== oI.NONE && this._scrollMode !== x.HORIZONTAL, i = this.#X !== null || this.#h !== null && g.views.some((s) => s.detailView?.renderingCancelled), l = this.renderingQueue.getHighestPriority(g, this._pages, C, A, i);
    return l ? (this.#J(l).then(() => {
      this.renderingQueue.renderView(l);
    }), !0) : !1;
  }
  get hasEqualPageSizes() {
    const I = this._pages[0];
    for (let g = 1, C = this._pages.length; g < C; ++g) {
      const A = this._pages[g];
      if (A.width !== I.width || A.height !== I.height)
        return !1;
    }
    return !0;
  }
  getPagesOverview() {
    let I;
    return this._pages.map((g) => {
      const C = g.pdfPage.getViewport({
        scale: 1
      }), A = Xi(C);
      if (I === void 0)
        I = A;
      else if (this.enablePrintAutoRotate && A !== I)
        return {
          width: C.height,
          height: C.width,
          rotation: (C.rotation - 90) % 360
        };
      return {
        width: C.width,
        height: C.height,
        rotation: C.rotation
      };
    });
  }
  get optionalContentConfigPromise() {
    return this.pdfDocument ? this._optionalContentConfigPromise ? this._optionalContentConfigPromise : (console.error("optionalContentConfigPromise: Not initialized yet."), this.pdfDocument.getOptionalContentConfig({
      intent: "display"
    })) : Promise.resolve(null);
  }
  set optionalContentConfigPromise(I) {
    if (!(I instanceof Promise))
      throw new Error(`Invalid optionalContentConfigPromise: ${I}`);
    this.pdfDocument && this._optionalContentConfigPromise && (this._optionalContentConfigPromise = I, this.refresh(!1, {
      optionalContentConfigPromise: I
    }), this.eventBus.dispatch("optionalcontentconfigchanged", {
      source: this,
      promise: I
    }));
  }
  get scrollMode() {
    return this._scrollMode;
  }
  set scrollMode(I) {
    if (this._scrollMode !== I) {
      if (!yZ(I))
        throw new Error(`Invalid scroll mode: ${I}`);
      this.pagesCount > WC.FORCE_SCROLL_MODE_PAGE || (this._previousScrollMode = this._scrollMode, this._scrollMode = I, this.eventBus.dispatch("scrollmodechanged", {
        source: this,
        mode: I
      }), this._updateScrollMode(this._currentPageNumber));
    }
  }
  _updateScrollMode(I = null) {
    const g = this._scrollMode, C = this.viewer;
    C.classList.toggle("scrollHorizontal", g === x.HORIZONTAL), C.classList.toggle("scrollWrapped", g === x.WRAPPED), !(!this.pdfDocument || !I) && (g === x.PAGE ? this.#V() : this._previousScrollMode === x.PAGE && this._updateSpreadMode(), this._currentScaleValue && isNaN(this._currentScaleValue) && this.#k(this._currentScaleValue, {
      noScroll: !0
    }), this._setCurrentPageNumber(I, !0), this.update());
  }
  get spreadMode() {
    return this._spreadMode;
  }
  set spreadMode(I) {
    if (this._spreadMode !== I) {
      if (!XZ(I))
        throw new Error(`Invalid spread mode: ${I}`);
      this._spreadMode = I, this.eventBus.dispatch("spreadmodechanged", {
        source: this,
        mode: I
      }), this._updateSpreadMode(this._currentPageNumber);
    }
  }
  _updateSpreadMode(I = null) {
    if (!this.pdfDocument)
      return;
    const g = this.viewer, C = this._pages;
    if (this._scrollMode === x.PAGE)
      this.#V();
    else if (g.textContent = "", this._spreadMode === oI.NONE)
      for (const A of this._pages)
        g.append(A.div);
    else {
      const A = this._spreadMode - 1;
      let i = null;
      for (let l = 0, s = C.length; l < s; ++l)
        i === null ? (i = document.createElement("div"), i.className = "spread", g.append(i)) : l % 2 === A && (i = i.cloneNode(!1), g.append(i)), i.append(C[l].div);
    }
    I && (this._currentScaleValue && isNaN(this._currentScaleValue) && this.#k(this._currentScaleValue, {
      noScroll: !0
    }), this._setCurrentPageNumber(I, !0), this.update());
  }
  _getPageAdvance(I, g = !1) {
    switch (this._scrollMode) {
      case x.WRAPPED: {
        const {
          views: C
        } = this._getVisiblePages(), A = /* @__PURE__ */ new Map();
        for (const {
          id: i,
          y: l,
          percent: s,
          widthPercent: d
        } of C) {
          if (s === 0 || d < 100)
            continue;
          let c = A.get(l);
          c || A.set(l, c ||= []), c.push(i);
        }
        for (const i of A.values()) {
          const l = i.indexOf(I);
          if (l === -1)
            continue;
          const s = i.length;
          if (s === 1)
            break;
          if (g)
            for (let d = l - 1, c = 0; d >= c; d--) {
              const G = i[d], b = i[d + 1] - 1;
              if (G < b)
                return I - b;
            }
          else
            for (let d = l + 1, c = s; d < c; d++) {
              const G = i[d], b = i[d - 1] + 1;
              if (G > b)
                return b - I;
            }
          if (g) {
            const d = i[0];
            if (d < I)
              return I - d + 1;
          } else {
            const d = i[s - 1];
            if (d > I)
              return d - I + 1;
          }
          break;
        }
        break;
      }
      case x.HORIZONTAL:
        break;
      case x.PAGE:
      case x.VERTICAL: {
        if (this._spreadMode === oI.NONE)
          break;
        const C = this._spreadMode - 1;
        if (g && I % 2 !== C)
          break;
        if (!g && I % 2 === C)
          break;
        const {
          views: A
        } = this._getVisiblePages(), i = g ? I - 1 : I + 1;
        for (const {
          id: l,
          percent: s,
          widthPercent: d
        } of A)
          if (l === i) {
            if (s > 0 && d === 100)
              return 2;
            break;
          }
        break;
      }
    }
    return 1;
  }
  nextPage() {
    const I = this._currentPageNumber, g = this.pagesCount;
    if (I >= g)
      return !1;
    const C = this._getPageAdvance(I, !1) || 1;
    return this.currentPageNumber = Math.min(I + C, g), !0;
  }
  previousPage() {
    const I = this._currentPageNumber;
    if (I <= 1)
      return !1;
    const g = this._getPageAdvance(I, !0) || 1;
    return this.currentPageNumber = Math.max(I - g, 1), !0;
  }
  updateScale({
    drawingDelay: I,
    scaleFactor: g = null,
    steps: C = null,
    origin: A
  }) {
    if (C === null && g === null)
      throw new Error("Invalid updateScale options: either `steps` or `scaleFactor` must be provided.");
    if (!this.pdfDocument)
      return;
    let i = this._currentScale;
    if (g > 0 && g !== 1)
      i = Math.round(i * g * 100) / 100;
    else if (C) {
      const l = C > 0 ? Vi : 1 / Vi, s = C > 0 ? Math.ceil : Math.floor;
      C = Math.abs(C);
      do
        i = s((i * l).toFixed(2) * 10) / 10;
      while (--C > 0);
    }
    i = jA(i, nZ, YZ), this.#k(i, {
      noScroll: !1,
      drawingDelay: I,
      origin: A
    });
  }
  increaseScale(I = {}) {
    this.updateScale({
      ...I,
      steps: I.steps ?? 1
    });
  }
  decreaseScale(I = {}) {
    this.updateScale({
      ...I,
      steps: -(I.steps ?? 1)
    });
  }
  #f(I = this.container.clientHeight) {
    I !== this.#u && (this.#u = I, HZ.setProperty("--viewer-container-height", `${I}px`));
  }
  #q(I) {
    for (const g of I)
      if (g.target === this.container) {
        this.#f(Math.floor(g.borderBoxSize[0].blockSize)), this.#d = null;
        break;
      }
  }
  get containerTopLeft() {
    return this.#d ||= [this.container.offsetTop, this.container.offsetLeft];
  }
  #T() {
    this.#X !== null && (clearTimeout(this.#X), this.#X = null), this.#h !== null && (clearTimeout(this.#h), this.#h = null);
  }
  #E() {
    this.#N?.abort(), this.#N = null, this.#w !== null && (clearTimeout(this.#w), this.#w = null);
  }
  #_(I) {
    switch (I) {
      case WI.STAMP:
        this.#B?.loadModel("altText");
        break;
      case WI.SIGNATURE:
        this.#p?.loadSignatures();
        break;
    }
  }
  get annotationEditorMode() {
    return this.#i ? this.#C : WI.DISABLE;
  }
  set annotationEditorMode({
    mode: I,
    editId: g = null,
    isFromKeyboard: C = !1,
    mustEnterInEditMode: A = !1,
    editComment: i = !1
  }) {
    if (!this.#i)
      throw new Error("The AnnotationEditor is not enabled.");
    if (this.#C === I)
      return;
    if (!Il(I))
      throw new Error(`Invalid AnnotationEditor mode: ${I}`);
    if (!this.pdfDocument)
      return;
    this.#_(I);
    const {
      eventBus: l,
      pdfDocument: s
    } = this, d = async () => {
      this.#E(), this.#C = I, await this.#i.updateMode(I, g, C, A, i), !(I !== this.#C || s !== this.pdfDocument) && l.dispatch("annotationeditormodechanged", {
        source: this,
        mode: I
      });
    };
    if (I === WI.NONE || this.#C === WI.NONE) {
      const c = I !== WI.NONE;
      c || this.pdfDocument.annotationStorage.resetModifiedIds(), this.cleanup();
      for (const b of this._pages)
        b.toggleEditingMode(c);
      const G = this.#Q();
      if (c && G) {
        this.#E(), this.#N = new AbortController();
        const b = AbortSignal.any([this.#G.signal, this.#N.signal]);
        l._on("pagerendered", ({
          pageNumber: o
        }) => {
          G.delete(o), G.size === 0 && (this.#w = setTimeout(d, 0));
        }, {
          signal: b
        });
        return;
      }
    }
    d();
  }
  refresh(I = !1, g = /* @__PURE__ */ Object.create(null)) {
    if (this.pdfDocument) {
      for (const C of this._pages)
        C.update(g);
      this.#T(), I || this.update();
    }
  }
}
class BG extends Cs {
  _resetView() {
    super._resetView(), this._scrollMode = x.PAGE, this._spreadMode = oI.NONE;
  }
  set scrollMode(I) {
  }
  _updateScrollMode() {
  }
  set spreadMode(I) {
  }
  _updateSpreadMode() {
  }
}
globalThis.pdfjsViewer = {
  AnnotationLayerBuilder: vl,
  DownloadManager: $Z,
  EventBus: El,
  FindState: fI,
  GenericL10n: xI,
  LinkTarget: Ag,
  parseQueryString: LC,
  PDFFindController: _Z,
  PDFHistory: qc,
  PDFLinkService: Ul,
  PDFPageView: gs,
  PDFScriptingManager: aG,
  PDFSinglePageViewer: BG,
  PDFViewer: Cs,
  ProgressBar: MZ,
  RenderingStates: O,
  ScrollMode: x,
  SimpleLinkService: kC,
  SpreadMode: oI,
  StructTreeLayerBuilder: $l,
  TextLayerBuilder: yg,
  XfaLayerBuilder: Is
};
Ng.workerSrc = dZ;
class WG {
  constructor(I, g, C, A) {
    this.pdfProxy = I, this.canvasId = g, this.textLayerId = C, this.annotationLayerId = A;
  }
  async renderPage(I, g = 1, C = !1, A = !1) {
    const i = await this.pdfProxy.getPage(I), l = i.getViewport({ scale: g }), s = document.getElementById(this.canvasId), d = document.getElementById(this.textLayerId), c = document.getElementById(this.annotationLayerId), G = s.getContext("2d");
    s.width = l.width, s.height = l.height, await i.render({ canvasContext: G, viewport: l }).promise, C && d !== null && (i.getTextContent().then((b) => {
      d.style.setProperty("--total-scale-factor", `${g}`), d.style.setProperty("--scale-factor", `${g}`), d.style.setProperty("--scale-round-x", "1px"), d.style.setProperty("--scale-round-y", "1px"), new yC({
        container: d,
        textContentSource: b,
        viewport: l.clone({ dontFlip: !0 })
      }).render();
    }), A && c !== null && i.getAnnotations({ intent: "display" }).then((b) => {
      new Fl({
        div: c,
        accessibilityManager: void 0,
        annotationCanvasMap: void 0,
        annotationEditorUIManager: void 0,
        page: i,
        viewport: l,
        structTreeLayer: null
      }).render({
        div: c,
        viewport: l,
        page: i,
        annotations: b,
        imageResourcesPath: void 0,
        renderForms: !1,
        linkService: new kC(),
        downloadManager: null,
        annotationStorage: void 0,
        enableScripting: !1,
        hasJSActions: void 0,
        fieldObjects: void 0
      });
    }));
  }
}
async function Zb(Z, I, g = null, C = null) {
  const A = await fetch(I), i = new Uint8Array(await A.arrayBuffer()), s = await ul({ data: i }).promise;
  return new WG(s, Z, g, C);
}
export {
  WG as PdfHandle,
  Zb as loadPdf
};
